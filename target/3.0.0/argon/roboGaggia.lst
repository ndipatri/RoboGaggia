
/Users/ndipatri/development/roboGaggia/roboGaggia/target/3.0.0/argon/roboGaggia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7fd0  000d7fd0  00007fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d7fd8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  2003e63c  000d7fdc  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  2003e6b8  2003e6b8  0002e6b8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d8058  000d8058  00028058  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8080  000d8080  00028080  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014ce3c  00000000  00000000  00028084  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001474a  00000000  00000000  00174ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00033a56  00000000  00000000  0018960a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ae0  00000000  00000000  001bd060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008cf0  00000000  00000000  001bfb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00035c64  00000000  00000000  001c8830  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000362bd  00000000  00000000  001fe494  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00126a00  00000000  00000000  00234751  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000079f0  00000000  00000000  0035b154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fc89 	bl	d7948 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fcab 	bl	d7998 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e63c 	.word	0x2003e63c
   d404c:	000d7fdc 	.word	0x000d7fdc
   d4050:	2003e6b8 	.word	0x2003e6b8
   d4054:	2003e6b8 	.word	0x2003e6b8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fce5 	bl	d6a30 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7fac 	.word	0x000d7fac
   d4080:	000d7fd0 	.word	0x000d7fd0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b862 	b.w	d414c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9b3 	bl	d43f4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bc8f 	b.w	d69b4 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bca1 	b.w	d49dc <malloc>

000d409a <_Znaj>:
   d409a:	f000 bc9f 	b.w	d49dc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f000 bca5 	b.w	d49ec <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fbd2 	bl	d4854 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d45f5 	.word	0x000d45f5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
   d40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40dc:	f001 f924 	bl	d5328 <_ZN5spark10LogManager8instanceEv>
   d40e0:	4621      	mov	r1, r4
   d40e2:	f001 fb14 	bl	d570e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e6:	f002 fb89 	bl	d67fc <_Z16_fetch_usbserialv>
   d40ea:	f002 fb79 	bl	d67e0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d40ee:	4620      	mov	r0, r4
   d40f0:	4b04      	ldr	r3, [pc, #16]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f2:	f840 3b04 	str.w	r3, [r0], #4
   d40f6:	f001 f9f7 	bl	d54e8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	000d7c30 	.word	0x000d7c30
   d4104:	000d7c18 	.word	0x000d7c18

000d4108 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
    }
   d410c:	f7ff ffe2 	bl	d40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	2124      	movs	r1, #36	; 0x24
   d4114:	f002 fda3 	bl	d6c5e <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d411c:	b40e      	push	{r1, r2, r3}
   d411e:	b510      	push	{r4, lr}
   d4120:	b08d      	sub	sp, #52	; 0x34
   d4122:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
   d4124:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d4126:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d412a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d412c:	2300      	movs	r3, #0
   d412e:	2020      	movs	r0, #32
   d4130:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4134:	e9cd 4200 	strd	r4, r2, [sp]
   d4138:	2032      	movs	r0, #50	; 0x32
   d413a:	aa04      	add	r2, sp, #16
   d413c:	f000 fb92 	bl	d4864 <log_message_v>
}
   d4140:	b00d      	add	sp, #52	; 0x34
   d4142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4146:	b003      	add	sp, #12
   d4148:	4770      	bx	lr
	...

000d414c <setup>:


double measuredTemperatureC;

// setup() runs once, when the device is first turned on.
void setup() {
   d414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4150:	f000 fa58 	bl	d4604 <HAL_Timer_Get_Milli_Seconds>
  
  // strange but leaving this for now...
  currentTime = millis(); 
   d4154:	ee07 0a90 	vmov	s15, r0
   d4158:	4b1c      	ldr	r3, [pc, #112]	; (d41cc <setup+0x80>)
   d415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
  
  // setup MAX6675 to read the temperature from thermocouple
  pinMode(MAX6675_CS, OUTPUT);
   d415e:	2101      	movs	r1, #1
   d4160:	2002      	movs	r0, #2
  currentTime = millis(); 
   d4162:	edc3 7a00 	vstr	s15, [r3]
  pinMode(MAX6675_CS, OUTPUT);
   d4166:	f002 fcd3 	bl	d6b10 <pinMode>
  pinMode(MAX6675_SO, INPUT);
   d416a:	2100      	movs	r1, #0
   d416c:	2004      	movs	r0, #4
   d416e:	f002 fccf 	bl	d6b10 <pinMode>
  pinMode(MAX6675_SCK, OUTPUT);
   d4172:	2101      	movs	r1, #1
   d4174:	2003      	movs	r0, #3
   d4176:	f002 fccb 	bl	d6b10 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d417a:	4915      	ldr	r1, [pc, #84]	; (d41d0 <setup+0x84>)
   d417c:	4815      	ldr	r0, [pc, #84]	; (d41d4 <setup+0x88>)
   d417e:	2300      	movs	r3, #0
   d4180:	2209      	movs	r2, #9
   d4182:	f000 fbb3 	bl	d48ec <spark_variable>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4186:	2000      	movs	r0, #0
   d4188:	f000 fa44 	bl	d4614 <hal_timer_millis>
   d418c:	f04f 0900 	mov.w	r9, #0
   d4190:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4192:	f643 2697 	movw	r6, #14999	; 0x3a97
   d4196:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d4198:	2000      	movs	r0, #0
   d419a:	f000 fa3b 	bl	d4614 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d419e:	ebb0 0408 	subs.w	r4, r0, r8
   d41a2:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d41a6:	42af      	cmp	r7, r5
   d41a8:	bf08      	it	eq
   d41aa:	42a6      	cmpeq	r6, r4
   d41ac:	d307      	bcc.n	d41be <setup+0x72>

  Particle.variable("measuredTemperatureC1", measuredTemperatureC);

  // Wait for a USB serial connection for up to 15 seconds
  waitFor(Serial.isConnected, 15000);
   d41ae:	f002 fb25 	bl	d67fc <_Z16_fetch_usbserialv>
   d41b2:	f002 fb18 	bl	d67e6 <_ZN9USBSerial11isConnectedEv>
   d41b6:	b910      	cbnz	r0, d41be <setup+0x72>
            spark_process();
   d41b8:	f000 fba0 	bl	d48fc <spark_process>
        while (_while() && !_condition()) {
   d41bc:	e7ec      	b.n	d4198 <setup+0x4c>
   d41be:	f002 fb1d 	bl	d67fc <_Z16_fetch_usbserialv>
}
   d41c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  waitFor(Serial.isConnected, 15000);
   d41c6:	f002 bb0e 	b.w	d67e6 <_ZN9USBSerial11isConnectedEv>
   d41ca:	bf00      	nop
   d41cc:	2003e6d0 	.word	0x2003e6d0
   d41d0:	2003e700 	.word	0x2003e700
   d41d4:	000d7bbc 	.word	0x000d7bbc

000d41d8 <_Z19measureTemperatureCv>:
  pulseBrewHeaterFor(durationMillis);

  delay(3000);
}

double measureTemperatureC() {
   d41d8:	b538      	push	{r3, r4, r5, lr}

  uint16_t measuredValue;

  // enable MAX6675
  digitalWrite(MAX6675_CS, LOW);
   d41da:	2100      	movs	r1, #0
   d41dc:	2002      	movs	r0, #2
   d41de:	f002 fca8 	bl	d6b32 <digitalWrite>
  delay(1);
   d41e2:	2001      	movs	r0, #1
   d41e4:	f000 fc22 	bl	d4a2c <delay>
  //  15    = 0 always
  //  14..2 = 0.25 degree counts MSB First
  //  2     = 1 if thermocouple is open circuit  
  //  1..0  = uninteresting status
  
  measuredValue = shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
   d41e8:	2201      	movs	r2, #1
   d41ea:	2103      	movs	r1, #3
   d41ec:	2004      	movs	r0, #4
   d41ee:	f002 fccc 	bl	d6b8a <shiftIn>
  measuredValue <<= 8;
   d41f2:	0200      	lsls	r0, r0, #8
   d41f4:	f400 457f 	and.w	r5, r0, #65280	; 0xff00
  measuredValue |= shiftIn(MAX6675_SO, MAX6675_SCK, MSBFIRST);
   d41f8:	2201      	movs	r2, #1
   d41fa:	2103      	movs	r1, #3
   d41fc:	2004      	movs	r0, #4
   d41fe:	f002 fcc4 	bl	d6b8a <shiftIn>
   d4202:	4328      	orrs	r0, r5
   d4204:	b284      	uxth	r4, r0
  
  // disable MAX6675
  digitalWrite(MAX6675_CS, HIGH);
   d4206:	2101      	movs	r1, #1
   d4208:	2002      	movs	r0, #2
   d420a:	f002 fc92 	bl	d6b32 <digitalWrite>

  if (measuredValue & 0x4) 
   d420e:	0763      	lsls	r3, r4, #29
   d4210:	d409      	bmi.n	d4226 <_Z19measureTemperatureCv+0x4e>

  // The lower three bits (0,1,2) are discarded status bits
  measuredValue >>= 3;

  // The remaining bits are the number of 0.25 degree (C) counts
  return measuredValue*0.25;
   d4212:	08e0      	lsrs	r0, r4, #3
   d4214:	f002 fe7c 	bl	d6f10 <__aeabi_i2d>
   d4218:	4b07      	ldr	r3, [pc, #28]	; (d4238 <_Z19measureTemperatureCv+0x60>)
   d421a:	2200      	movs	r2, #0
   d421c:	f002 fee2 	bl	d6fe4 <__aeabi_dmul>
   d4220:	ec41 0b10 	vmov	d0, r0, r1
}
   d4224:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;     
   d4226:	ed9f 0b02 	vldr	d0, [pc, #8]	; d4230 <_Z19measureTemperatureCv+0x58>
   d422a:	e7fb      	b.n	d4224 <_Z19measureTemperatureCv+0x4c>
   d422c:	f3af 8000 	nop.w
   d4230:	00000000 	.word	0x00000000
   d4234:	7ff80000 	.word	0x7ff80000
   d4238:	3fd00000 	.word	0x3fd00000

000d423c <_Z34calculateHeaterPulseDurationMillisd>:

int calculateHeaterPulseDurationMillis(double currentTempC) {
   d423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4240:	ed2d 8b02 	vpush	{d8}
   d4244:	eeb0 8a40 	vmov.f32	s16, s0
   d4248:	eef0 8a60 	vmov.f32	s17, s1
   d424c:	b088      	sub	sp, #32

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d424e:	4945      	ldr	r1, [pc, #276]	; (d4364 <_Z34calculateHeaterPulseDurationMillisd+0x128>)
  PID_p = kp * currentError;

  // Calculate the I value in a range on +-3
  if(-3 < currentError < 3)
  {
    PID_i = PID_i + (ki * currentError);
   d4250:	4c45      	ldr	r4, [pc, #276]	; (d4368 <_Z34calculateHeaterPulseDurationMillisd+0x12c>)
  PID_p = kp * currentError;
   d4252:	4d46      	ldr	r5, [pc, #280]	; (d436c <_Z34calculateHeaterPulseDurationMillisd+0x130>)
  }

  //For derivative we need real time to calculate speed change rate
  previousTime = currentTime;                            // the previous time is stored before the actual time read
   d4254:	f8df 814c 	ldr.w	r8, [pc, #332]	; d43a4 <_Z34calculateHeaterPulseDurationMillisd+0x168>
  currentError = targetTempC - currentTempC;
   d4258:	4e45      	ldr	r6, [pc, #276]	; (d4370 <_Z34calculateHeaterPulseDurationMillisd+0x134>)
  previousTime = currentTime;                            // the previous time is stored before the actual time read
   d425a:	4f46      	ldr	r7, [pc, #280]	; (d4374 <_Z34calculateHeaterPulseDurationMillisd+0x138>)
   d425c:	a804      	add	r0, sp, #16
   d425e:	f002 f8c8 	bl	d63f2 <_ZN6StringC1EPKc>
  Log.error("currentTempC '" + String(currentTempC) + "'.");
   d4262:	eeb0 0a48 	vmov.f32	s0, s16
   d4266:	eef0 0a68 	vmov.f32	s1, s17
   d426a:	2106      	movs	r1, #6
   d426c:	4668      	mov	r0, sp
   d426e:	f002 f93b 	bl	d64e8 <_ZN6StringC1Edi>
   d4272:	4669      	mov	r1, sp
   d4274:	a804      	add	r0, sp, #16
   d4276:	f002 f962 	bl	d653e <_ZplRK15StringSumHelperRK6String>
   d427a:	493f      	ldr	r1, [pc, #252]	; (d4378 <_Z34calculateHeaterPulseDurationMillisd+0x13c>)
   d427c:	f002 f96b 	bl	d6556 <_ZplRK15StringSumHelperPKc>
   d4280:	6801      	ldr	r1, [r0, #0]
   d4282:	483e      	ldr	r0, [pc, #248]	; (d437c <_Z34calculateHeaterPulseDurationMillisd+0x140>)
   d4284:	f7ff ff4a 	bl	d411c <_ZNK5spark6Logger5errorEPKcz>
   d4288:	4668      	mov	r0, sp
   d428a:	f002 f867 	bl	d635c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d428e:	a804      	add	r0, sp, #16
   d4290:	f002 f864 	bl	d635c <_ZN6StringD1Ev>
  currentError = targetTempC - currentTempC;
   d4294:	4b3a      	ldr	r3, [pc, #232]	; (d4380 <_Z34calculateHeaterPulseDurationMillisd+0x144>)
   d4296:	6818      	ldr	r0, [r3, #0]
   d4298:	f002 fe4c 	bl	d6f34 <__aeabi_f2d>
   d429c:	ec53 2b18 	vmov	r2, r3, d8
   d42a0:	f002 fce8 	bl	d6c74 <__aeabi_dsub>
   d42a4:	f003 f958 	bl	d7558 <__aeabi_d2f>
  PID_p = kp * currentError;
   d42a8:	4b36      	ldr	r3, [pc, #216]	; (d4384 <_Z34calculateHeaterPulseDurationMillisd+0x148>)
  currentError = targetTempC - currentTempC;
   d42aa:	6030      	str	r0, [r6, #0]
  PID_p = kp * currentError;
   d42ac:	edd3 7a00 	vldr	s15, [r3]
    PID_i = PID_i + (ki * currentError);
   d42b0:	4b35      	ldr	r3, [pc, #212]	; (d4388 <_Z34calculateHeaterPulseDurationMillisd+0x14c>)
  currentError = targetTempC - currentTempC;
   d42b2:	ee07 0a10 	vmov	s14, r0
  PID_p = kp * currentError;
   d42b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    PID_i = PID_i + (ki * currentError);
   d42ba:	edd3 6a00 	vldr	s13, [r3]
  previousTime = currentTime;                            // the previous time is stored before the actual time read
   d42be:	f8d8 3000 	ldr.w	r3, [r8]
   d42c2:	603b      	str	r3, [r7, #0]
  PID_p = kp * currentError;
   d42c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PID_i = PID_i + (ki * currentError);
   d42c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  PID_p = kp * currentError;
   d42cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d42d0:	edc5 7a00 	vstr	s15, [r5]
    PID_i = PID_i + (ki * currentError);
   d42d4:	edd4 7a00 	vldr	s15, [r4]
   d42d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42dc:	eee7 7a26 	vfma.f32	s15, s14, s13
   d42e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d42e4:	edc4 7a00 	vstr	s15, [r4]
   d42e8:	f000 f98c 	bl	d4604 <HAL_Timer_Get_Milli_Seconds>
  currentTime = millis();                            // actual time read
   d42ec:	ee07 0a90 	vmov	s15, r0
  elapsedTime = (currentTime - previousTime) / 1000; 
   d42f0:	ed97 7a00 	vldr	s14, [r7]

  // Now we can calculate the D value - the derivative or slope.. which is a means
  // of predicting future value
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d42f4:	4a25      	ldr	r2, [pc, #148]	; (d438c <_Z34calculateHeaterPulseDurationMillisd+0x150>)
   d42f6:	edd6 6a00 	vldr	s13, [r6]
  elapsedTime = (currentTime - previousTime) / 1000; 
   d42fa:	4b25      	ldr	r3, [pc, #148]	; (d4390 <_Z34calculateHeaterPulseDurationMillisd+0x154>)
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d42fc:	4925      	ldr	r1, [pc, #148]	; (d4394 <_Z34calculateHeaterPulseDurationMillisd+0x158>)
  currentTime = millis();                            // actual time read
   d42fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4302:	edc8 7a00 	vstr	s15, [r8]
  elapsedTime = (currentTime - previousTime) / 1000; 
   d4306:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d430a:	ed9f 7a23 	vldr	s14, [pc, #140]	; d4398 <_Z34calculateHeaterPulseDurationMillisd+0x15c>
   d430e:	ee87 6a87 	vdiv.f32	s12, s15, s14
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d4312:	edd2 7a00 	vldr	s15, [r2]
  elapsedTime = (currentTime - previousTime) / 1000; 
   d4316:	ed83 6a00 	vstr	s12, [r3]
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d431a:	ee76 7ae7 	vsub.f32	s15, s13, s15
   d431e:	4b1f      	ldr	r3, [pc, #124]	; (d439c <_Z34calculateHeaterPulseDurationMillisd+0x160>)
  previousError = currentError;     //Remember to store the previous error for next loop.
   d4320:	edc2 6a00 	vstr	s13, [r2]
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d4324:	ee87 7a86 	vdiv.f32	s14, s15, s12

  
  //vFinal total PID value is the sum of P + I + D
  currentOutput = PID_p + PID_i + PID_d;
   d4328:	682a      	ldr	r2, [r5, #0]
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d432a:	edd3 7a00 	vldr	s15, [r3]
   d432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4332:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d433a:	edc1 7a00 	vstr	s15, [r1]
  currentOutput = PID_p + PID_i + PID_d;
   d433e:	6821      	ldr	r1, [r4, #0]
  PID_d = kd*((currentError - previousError)/elapsedTime);
   d4340:	ee17 3a90 	vmov	r3, s15
  currentOutput = PID_p + PID_i + PID_d;
   d4344:	440a      	add	r2, r1

  //We define PWM range between 0 and 255
  if(currentOutput < 0)
   d4346:	18d3      	adds	r3, r2, r3
   d4348:	4a15      	ldr	r2, [pc, #84]	; (d43a0 <_Z34calculateHeaterPulseDurationMillisd+0x164>)
   d434a:	d507      	bpl.n	d435c <_Z34calculateHeaterPulseDurationMillisd+0x120>
  {    currentOutput = 0;    }
   d434c:	2300      	movs	r3, #0
  if(currentOutput > 255)  
  {    currentOutput = 255;  }
   d434e:	6013      	str	r3, [r2, #0]

  return currentOutput;
}
   d4350:	6810      	ldr	r0, [r2, #0]
   d4352:	b008      	add	sp, #32
   d4354:	ecbd 8b02 	vpop	{d8}
   d4358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(currentOutput > 255)  
   d435c:	2bff      	cmp	r3, #255	; 0xff
  {    currentOutput = 255;  }
   d435e:	bfc8      	it	gt
   d4360:	23ff      	movgt	r3, #255	; 0xff
   d4362:	e7f4      	b.n	d434e <_Z34calculateHeaterPulseDurationMillisd+0x112>
   d4364:	000d7bd2 	.word	0x000d7bd2
   d4368:	2003e6c0 	.word	0x2003e6c0
   d436c:	2003e6c4 	.word	0x2003e6c4
   d4370:	2003e6c8 	.word	0x2003e6c8
   d4374:	2003e70c 	.word	0x2003e70c
   d4378:	000d7be1 	.word	0x000d7be1
   d437c:	2003e728 	.word	0x2003e728
   d4380:	2003e644 	.word	0x2003e644
   d4384:	2003e640 	.word	0x2003e640
   d4388:	2003e6d8 	.word	0x2003e6d8
   d438c:	2003e708 	.word	0x2003e708
   d4390:	2003e6d4 	.word	0x2003e6d4
   d4394:	2003e6bc 	.word	0x2003e6bc
   d4398:	447a0000 	.word	0x447a0000
   d439c:	2003e63c 	.word	0x2003e63c
   d43a0:	2003e6cc 	.word	0x2003e6cc
   d43a4:	2003e6d0 	.word	0x2003e6d0

000d43a8 <_Z18pulseBrewHeaterFori>:

void pulseBrewHeaterFor(int headerPulseDurationMillis) {
   d43a8:	b510      	push	{r4, lr}
   d43aa:	b088      	sub	sp, #32
   d43ac:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
   d43ae:	490e      	ldr	r1, [pc, #56]	; (d43e8 <_Z18pulseBrewHeaterFori+0x40>)
   d43b0:	a804      	add	r0, sp, #16
   d43b2:	f002 f81e 	bl	d63f2 <_ZN6StringC1EPKc>
  Log.error("Pulsing Brew Heater for '" + String(headerPulseDurationMillis) + "' milliseconds.");
   d43b6:	220a      	movs	r2, #10
   d43b8:	4621      	mov	r1, r4
   d43ba:	4668      	mov	r0, sp
   d43bc:	f002 f881 	bl	d64c2 <_ZN6StringC1Eih>
   d43c0:	4669      	mov	r1, sp
   d43c2:	a804      	add	r0, sp, #16
   d43c4:	f002 f8bb 	bl	d653e <_ZplRK15StringSumHelperRK6String>
   d43c8:	4908      	ldr	r1, [pc, #32]	; (d43ec <_Z18pulseBrewHeaterFori+0x44>)
   d43ca:	f002 f8c4 	bl	d6556 <_ZplRK15StringSumHelperPKc>
   d43ce:	6801      	ldr	r1, [r0, #0]
   d43d0:	4807      	ldr	r0, [pc, #28]	; (d43f0 <_Z18pulseBrewHeaterFori+0x48>)
   d43d2:	f7ff fea3 	bl	d411c <_ZNK5spark6Logger5errorEPKcz>
   d43d6:	4668      	mov	r0, sp
   d43d8:	f001 ffc0 	bl	d635c <_ZN6StringD1Ev>
class StringSumHelper : public String
   d43dc:	a804      	add	r0, sp, #16
   d43de:	f001 ffbd 	bl	d635c <_ZN6StringD1Ev>
   d43e2:	b008      	add	sp, #32
   d43e4:	bd10      	pop	{r4, pc}
   d43e6:	bf00      	nop
   d43e8:	000d7be4 	.word	0x000d7be4
   d43ec:	000d7bfe 	.word	0x000d7bfe
   d43f0:	2003e728 	.word	0x2003e728

000d43f4 <loop>:
void loop() {
   d43f4:	b508      	push	{r3, lr}
  measuredTemperatureC = measureTemperatureC();  
   d43f6:	f7ff feef 	bl	d41d8 <_Z19measureTemperatureCv>
   d43fa:	4b06      	ldr	r3, [pc, #24]	; (d4414 <loop+0x20>)
   d43fc:	ed83 0b00 	vstr	d0, [r3]
  int durationMillis = calculateHeaterPulseDurationMillis(measuredTemperatureC);
   d4400:	f7ff ff1c 	bl	d423c <_Z34calculateHeaterPulseDurationMillisd>
  pulseBrewHeaterFor(durationMillis);
   d4404:	f7ff ffd0 	bl	d43a8 <_Z18pulseBrewHeaterFori>
}
   d4408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(3000);
   d440c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4410:	f000 bb0c 	b.w	d4a2c <delay>
   d4414:	2003e700 	.word	0x2003e700

000d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4418:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d441a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d441e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4420:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4422:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4426:	42ae      	cmp	r6, r5
   d4428:	d004      	beq.n	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d442a:	4628      	mov	r0, r5
   d442c:	f001 ff96 	bl	d635c <_ZN6StringD1Ev>
   d4430:	3514      	adds	r5, #20
   d4432:	e7f8      	b.n	d4426 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4434:	6820      	ldr	r0, [r4, #0]
   d4436:	f000 fad9 	bl	d49ec <free>
    AllocatorT::free(data_);
}
   d443a:	4620      	mov	r0, r4
   d443c:	bd70      	pop	{r4, r5, r6, pc}

000d443e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d443e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4442:	4604      	mov	r4, r0
   d4444:	460d      	mov	r5, r1
   d4446:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4448:	d916      	bls.n	d4478 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d444a:	4290      	cmp	r0, r2
   d444c:	d215      	bcs.n	d447a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d444e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4452:	1a75      	subs	r5, r6, r1
   d4454:	f1a1 0714 	sub.w	r7, r1, #20
   d4458:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d445a:	42b7      	cmp	r7, r6
   d445c:	d01c      	beq.n	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d445e:	b12c      	cbz	r4, d446c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4460:	4631      	mov	r1, r6
   d4462:	4620      	mov	r0, r4
   d4464:	f001 fff6 	bl	d6454 <_ZN6StringC1EOS_>
   d4468:	7c33      	ldrb	r3, [r6, #16]
   d446a:	7423      	strb	r3, [r4, #16]
   d446c:	4630      	mov	r0, r6
   d446e:	f001 ff75 	bl	d635c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4472:	3e14      	subs	r6, #20
   d4474:	3c14      	subs	r4, #20
   d4476:	e7f0      	b.n	d445a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4478:	d00e      	beq.n	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d447a:	42b5      	cmp	r5, r6
   d447c:	d00c      	beq.n	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d447e:	b12c      	cbz	r4, d448c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4480:	4629      	mov	r1, r5
   d4482:	4620      	mov	r0, r4
   d4484:	f001 ffe6 	bl	d6454 <_ZN6StringC1EOS_>
   d4488:	7c2b      	ldrb	r3, [r5, #16]
   d448a:	7423      	strb	r3, [r4, #16]
   d448c:	4628      	mov	r0, r5
   d448e:	f001 ff65 	bl	d635c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4492:	3514      	adds	r5, #20
   d4494:	3414      	adds	r4, #20
   d4496:	e7f0      	b.n	d447a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d449a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d449e:	2300      	movs	r3, #0
   d44a0:	e9c0 3300 	strd	r3, r3, [r0]
   d44a4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44a6:	684f      	ldr	r7, [r1, #4]
   d44a8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44aa:	4604      	mov	r4, r0
   d44ac:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44ae:	dd23      	ble.n	d44f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d44b0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d44b4:	fb08 f007 	mul.w	r0, r8, r7
   d44b8:	f000 fa90 	bl	d49dc <malloc>
            if (!d) {
   d44bc:	4605      	mov	r5, r0
   d44be:	b1d8      	cbz	r0, d44f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d44c0:	e9d4 1200 	ldrd	r1, r2, [r4]
   d44c4:	fb08 1202 	mla	r2, r8, r2, r1
   d44c8:	f7ff ffb9 	bl	d443e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d44cc:	6820      	ldr	r0, [r4, #0]
   d44ce:	f000 fa8d 	bl	d49ec <free>
        data_ = d;
   d44d2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d44d4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44d6:	e9d6 7300 	ldrd	r7, r3, [r6]
   d44da:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d44de:	45b8      	cmp	r8, r7
   d44e0:	d008      	beq.n	d44f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d44e2:	4639      	mov	r1, r7
   d44e4:	4628      	mov	r0, r5
   d44e6:	f001 ffcf 	bl	d6488 <_ZN6StringC1ERKS_>
   d44ea:	7c3b      	ldrb	r3, [r7, #16]
   d44ec:	742b      	strb	r3, [r5, #16]
   d44ee:	3714      	adds	r7, #20
   d44f0:	3514      	adds	r5, #20
   d44f2:	e7f4      	b.n	d44de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d44f4:	6873      	ldr	r3, [r6, #4]
   d44f6:	6063      	str	r3, [r4, #4]
}
   d44f8:	4620      	mov	r0, r4
   d44fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4500 <_GLOBAL__sub_I_logHandler>:
   d4500:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4502:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   d4504:	2500      	movs	r5, #0
   d4506:	e9cd 5500 	strd	r5, r5, [sp]
   d450a:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d450c:	f002 f976 	bl	d67fc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4510:	4c1e      	ldr	r4, [pc, #120]	; (d458c <_GLOBAL__sub_I_logHandler+0x8c>)
   d4512:	4606      	mov	r6, r0
   d4514:	4669      	mov	r1, sp
   d4516:	a803      	add	r0, sp, #12
   d4518:	f7ff ffbf 	bl	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d451c:	4627      	mov	r7, r4
        stream_(&stream) {
   d451e:	a903      	add	r1, sp, #12
   d4520:	a806      	add	r0, sp, #24
   d4522:	f7ff ffba 	bl	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4526:	4b1a      	ldr	r3, [pc, #104]	; (d4590 <_GLOBAL__sub_I_logHandler+0x90>)
   d4528:	f847 3b04 	str.w	r3, [r7], #4
   d452c:	a906      	add	r1, sp, #24
   d452e:	a809      	add	r0, sp, #36	; 0x24
   d4530:	f7ff ffb3 	bl	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4534:	aa09      	add	r2, sp, #36	; 0x24
   d4536:	211e      	movs	r1, #30
   d4538:	4638      	mov	r0, r7
   d453a:	f001 fa3b 	bl	d59b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d453e:	a809      	add	r0, sp, #36	; 0x24
   d4540:	f7ff ff6a 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4544:	a806      	add	r0, sp, #24
   d4546:	f7ff ff67 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d454a:	4b12      	ldr	r3, [pc, #72]	; (d4594 <_GLOBAL__sub_I_logHandler+0x94>)
   d454c:	6023      	str	r3, [r4, #0]
   d454e:	a803      	add	r0, sp, #12
   d4550:	6226      	str	r6, [r4, #32]
   d4552:	f7ff ff61 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4556:	4b10      	ldr	r3, [pc, #64]	; (d4598 <_GLOBAL__sub_I_logHandler+0x98>)
   d4558:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d455a:	f002 f94f 	bl	d67fc <_Z16_fetch_usbserialv>
   d455e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4562:	f002 f939 	bl	d67d8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4566:	f000 fedf 	bl	d5328 <_ZN5spark10LogManager8instanceEv>
   d456a:	4621      	mov	r1, r4
   d456c:	f001 f9b4 	bl	d58d8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d4570:	4668      	mov	r0, sp
   d4572:	f7ff ff51 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4576:	4a09      	ldr	r2, [pc, #36]	; (d459c <_GLOBAL__sub_I_logHandler+0x9c>)
   d4578:	4909      	ldr	r1, [pc, #36]	; (d45a0 <_GLOBAL__sub_I_logHandler+0xa0>)
   d457a:	4620      	mov	r0, r4
   d457c:	f002 fb6a 	bl	d6c54 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4580:	4629      	mov	r1, r5
   d4582:	2001      	movs	r0, #1
   d4584:	f000 f996 	bl	d48b4 <system_thread_set_state>
   d4588:	b00d      	add	sp, #52	; 0x34
   d458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d458c:	2003e6dc 	.word	0x2003e6dc
   d4590:	000d7c18 	.word	0x000d7c18
   d4594:	000d7d5c 	.word	0x000d7d5c
   d4598:	000d7c30 	.word	0x000d7c30
   d459c:	2003e6b8 	.word	0x2003e6b8
   d45a0:	000d40d5 	.word	0x000d40d5

000d45a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <os_mutex_recursive_create+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030248 	.word	0x00030248

000d45b4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <os_mutex_recursive_destroy+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030248 	.word	0x00030248

000d45c4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <os_mutex_recursive_lock+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030248 	.word	0x00030248

000d45d4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <os_mutex_recursive_unlock+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030248 	.word	0x00030248

000d45e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_RNG_GetRandomNumber+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	685b      	ldr	r3, [r3, #4]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030218 	.word	0x00030218

000d45f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_Delay_Microseconds+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	68db      	ldr	r3, [r3, #12]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030218 	.word	0x00030218

000d4604 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	695b      	ldr	r3, [r3, #20]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030218 	.word	0x00030218

000d4614 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <hal_timer_millis+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030218 	.word	0x00030218

000d4624 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_Pin_Mode+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	689b      	ldr	r3, [r3, #8]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003022c 	.word	0x0003022c

000d4634 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_Get_Pin_Mode+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	68db      	ldr	r3, [r3, #12]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003022c 	.word	0x0003022c

000d4644 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_GPIO_Write+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	691b      	ldr	r3, [r3, #16]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003022c 	.word	0x0003022c

000d4654 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_GPIO_Read+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	695b      	ldr	r3, [r3, #20]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003022c 	.word	0x0003022c

000d4664 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <hal_i2c_write+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a1b      	ldr	r3, [r3, #32]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030228 	.word	0x00030228

000d4674 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_i2c_available+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030228 	.word	0x00030228

000d4684 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_i2c_read+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030228 	.word	0x00030228

000d4694 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <hal_i2c_peek+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030228 	.word	0x00030228

000d46a4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <hal_i2c_flush+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030228 	.word	0x00030228

000d46b4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <hal_i2c_is_enabled+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030228 	.word	0x00030228

000d46c4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <hal_i2c_init+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030228 	.word	0x00030228

000d46d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <inet_inet_ntop+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030264 	.word	0x00030264

000d46e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <netdb_freeaddrinfo+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030268 	.word	0x00030268

000d46f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <netdb_getaddrinfo+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	68db      	ldr	r3, [r3, #12]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030268 	.word	0x00030268

000d4704 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_spi_init+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	69db      	ldr	r3, [r3, #28]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030230 	.word	0x00030230

000d4714 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_spi_is_enabled+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6a1b      	ldr	r3, [r3, #32]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030230 	.word	0x00030230

000d4724 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_usart_init+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	681b      	ldr	r3, [r3, #0]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003023c 	.word	0x0003023c

000d4734 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_usart_end+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	689b      	ldr	r3, [r3, #8]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003023c 	.word	0x0003023c

000d4744 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <hal_usart_write+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	68db      	ldr	r3, [r3, #12]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003023c 	.word	0x0003023c

000d4754 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_usart_available+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	691b      	ldr	r3, [r3, #16]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003023c 	.word	0x0003023c

000d4764 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_usart_read+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	695b      	ldr	r3, [r3, #20]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003023c 	.word	0x0003023c

000d4774 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <hal_usart_peek+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	699b      	ldr	r3, [r3, #24]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003023c 	.word	0x0003023c

000d4784 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <hal_usart_flush+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	69db      	ldr	r3, [r3, #28]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003023c 	.word	0x0003023c

000d4794 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <hal_usart_is_enabled+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6a1b      	ldr	r3, [r3, #32]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003023c 	.word	0x0003023c

000d47a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_usart_available_data_for_write+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003023c 	.word	0x0003023c

000d47b4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <hal_usart_begin_config+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003023c 	.word	0x0003023c

000d47c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <HAL_USB_USART_Init+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	681b      	ldr	r3, [r3, #0]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003024c 	.word	0x0003024c

000d47d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_USB_USART_Begin+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	685b      	ldr	r3, [r3, #4]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003024c 	.word	0x0003024c

000d47e4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_USB_USART_End+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	689b      	ldr	r3, [r3, #8]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003024c 	.word	0x0003024c

000d47f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_USB_USART_Available_Data+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	691b      	ldr	r3, [r3, #16]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003024c 	.word	0x0003024c

000d4804 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	695b      	ldr	r3, [r3, #20]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003024c 	.word	0x0003024c

000d4814 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_USB_USART_Receive_Data+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	699b      	ldr	r3, [r3, #24]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003024c 	.word	0x0003024c

000d4824 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_USB_USART_Send_Data+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	69db      	ldr	r3, [r3, #28]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003024c 	.word	0x0003024c

000d4834 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_USB_USART_Flush_Data+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a1b      	ldr	r3, [r3, #32]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003024c 	.word	0x0003024c

000d4844 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_USB_USART_Is_Connected+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003024c 	.word	0x0003024c

000d4854 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <panic_+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030260 	.word	0x00030260

000d4864 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <log_message_v+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030260 	.word	0x00030260

000d4874 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <log_level_name+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030260 	.word	0x00030260

000d4884 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <log_set_callbacks+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030260 	.word	0x00030260

000d4894 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <set_system_mode+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	685b      	ldr	r3, [r3, #4]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030220 	.word	0x00030220

000d48a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <system_delay_ms+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	695b      	ldr	r3, [r3, #20]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030220 	.word	0x00030220

000d48b4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <system_thread_set_state+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030220 	.word	0x00030220

000d48c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b03      	ldr	r3, [pc, #12]	; (d48d4 <system_ctrl_set_app_request_handler+0x10>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48ce:	9301      	str	r3, [sp, #4]
   d48d0:	bd08      	pop	{r3, pc}
   d48d2:	0000      	.short	0x0000
   d48d4:	00030220 	.word	0x00030220

000d48d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b03      	ldr	r3, [pc, #12]	; (d48e8 <system_ctrl_set_result+0x10>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48e2:	9301      	str	r3, [sp, #4]
   d48e4:	bd08      	pop	{r3, pc}
   d48e6:	0000      	.short	0x0000
   d48e8:	00030220 	.word	0x00030220

000d48ec <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <spark_variable+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	681b      	ldr	r3, [r3, #0]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030244 	.word	0x00030244

000d48fc <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <spark_process+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	689b      	ldr	r3, [r3, #8]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030244 	.word	0x00030244

000d490c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030244 	.word	0x00030244

000d491c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <network_connect+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	685b      	ldr	r3, [r3, #4]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030240 	.word	0x00030240

000d492c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <network_connecting+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	689b      	ldr	r3, [r3, #8]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030240 	.word	0x00030240

000d493c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <network_disconnect+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	68db      	ldr	r3, [r3, #12]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030240 	.word	0x00030240

000d494c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <network_ready+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	691b      	ldr	r3, [r3, #16]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030240 	.word	0x00030240

000d495c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <network_on+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	695b      	ldr	r3, [r3, #20]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030240 	.word	0x00030240

000d496c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <network_off+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	699b      	ldr	r3, [r3, #24]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030240 	.word	0x00030240

000d497c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <network_listen+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	69db      	ldr	r3, [r3, #28]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030240 	.word	0x00030240

000d498c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <network_listening+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	6a1b      	ldr	r3, [r3, #32]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030240 	.word	0x00030240

000d499c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <network_set_listen_timeout+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030240 	.word	0x00030240

000d49ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <network_get_listen_timeout+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030240 	.word	0x00030240

000d49bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <network_is_on+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030240 	.word	0x00030240

000d49cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <network_is_off+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030240 	.word	0x00030240

000d49dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <malloc+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	681b      	ldr	r3, [r3, #0]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003021c 	.word	0x0003021c

000d49ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <free+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	685b      	ldr	r3, [r3, #4]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003021c 	.word	0x0003021c

000d49fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <realloc+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	689b      	ldr	r3, [r3, #8]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003021c 	.word	0x0003021c

000d4a0c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <vsnprintf+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003021c 	.word	0x0003021c

000d4a1c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <newlib_impure_ptr_callback+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003021c 	.word	0x0003021c

000d4a2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4a2c:	2100      	movs	r1, #0
   d4a2e:	f7ff bf39 	b.w	d48a4 <system_delay_ms>

000d4a32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a32:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a34:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a36:	4604      	mov	r4, r0
          _M_dispose();
   d4a38:	689b      	ldr	r3, [r3, #8]
   d4a3a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a3c:	68a3      	ldr	r3, [r4, #8]
   d4a3e:	3b01      	subs	r3, #1
   d4a40:	60a3      	str	r3, [r4, #8]
   d4a42:	b92b      	cbnz	r3, d4a50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4a44:	6823      	ldr	r3, [r4, #0]
   d4a46:	4620      	mov	r0, r4
   d4a48:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4a4e:	4718      	bx	r3
    }
   d4a50:	bd10      	pop	{r4, pc}

000d4a52 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4a52:	b510      	push	{r4, lr}
   d4a54:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a56:	6800      	ldr	r0, [r0, #0]
   d4a58:	b108      	cbz	r0, d4a5e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a5a:	f7ff fdab 	bl	d45b4 <os_mutex_recursive_destroy>
    }
   d4a5e:	4620      	mov	r0, r4
   d4a60:	bd10      	pop	{r4, pc}

000d4a62 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4a62:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4a64:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4a66:	4604      	mov	r4, r0
      if (_M_manager)
   d4a68:	b113      	cbz	r3, d4a70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a6a:	2203      	movs	r2, #3
   d4a6c:	4601      	mov	r1, r0
   d4a6e:	4798      	blx	r3
    }
   d4a70:	4620      	mov	r0, r4
   d4a72:	bd10      	pop	{r4, pc}

000d4a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4a74:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4a76:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4a7a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4a7c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d4a80:	42ae      	cmp	r6, r5
   d4a82:	d004      	beq.n	d4a8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d4a84:	4628      	mov	r0, r5
   d4a86:	f001 fc69 	bl	d635c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d4a8a:	3510      	adds	r5, #16
   d4a8c:	e7f8      	b.n	d4a80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d4a8e:	6820      	ldr	r0, [r4, #0]
   d4a90:	f7ff ffac 	bl	d49ec <free>
    AllocatorT::free(data_);
}
   d4a94:	4620      	mov	r0, r4
   d4a96:	bd70      	pop	{r4, r5, r6, pc}

000d4a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4a98:	680b      	ldr	r3, [r1, #0]
   d4a9a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4a9c:	b113      	cbz	r3, d4aa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4a9e:	685a      	ldr	r2, [r3, #4]
   d4aa0:	3201      	adds	r2, #1
   d4aa2:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4aa4:	4770      	bx	lr

000d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4aa6:	b510      	push	{r4, lr}
   d4aa8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4aaa:	6800      	ldr	r0, [r0, #0]
   d4aac:	b128      	cbz	r0, d4aba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4aae:	6843      	ldr	r3, [r0, #4]
   d4ab0:	3b01      	subs	r3, #1
   d4ab2:	6043      	str	r3, [r0, #4]
   d4ab4:	b90b      	cbnz	r3, d4aba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4ab6:	f7ff ffbc 	bl	d4a32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4aba:	4620      	mov	r0, r4
   d4abc:	bd10      	pop	{r4, pc}
	...

000d4ac0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4ac0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4ac2:	4c06      	ldr	r4, [pc, #24]	; (d4adc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4ac4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4ac6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4ac8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4aca:	f7ff fd6b 	bl	d45a4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4ace:	4620      	mov	r0, r4
   d4ad0:	4a03      	ldr	r2, [pc, #12]	; (d4ae0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4ad2:	4904      	ldr	r1, [pc, #16]	; (d4ae4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4ad8:	f002 b8bc 	b.w	d6c54 <__aeabi_atexit>
   d4adc:	2003e710 	.word	0x2003e710
   d4ae0:	2003e6b8 	.word	0x2003e6b8
   d4ae4:	000d4a53 	.word	0x000d4a53

000d4ae8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ae8:	2200      	movs	r2, #0
   d4aea:	6840      	ldr	r0, [r0, #4]
   d4aec:	4611      	mov	r1, r2
   d4aee:	f7ff bf4d 	b.w	d498c <network_listening>

000d4af2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4af2:	2200      	movs	r2, #0
   d4af4:	6840      	ldr	r0, [r0, #4]
   d4af6:	4611      	mov	r1, r2
   d4af8:	f7ff bf58 	b.w	d49ac <network_get_listen_timeout>

000d4afc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	2200      	movs	r2, #0
   d4b00:	f7ff bf4c 	b.w	d499c <network_set_listen_timeout>

000d4b04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b04:	6840      	ldr	r0, [r0, #4]
   d4b06:	2200      	movs	r2, #0
   d4b08:	f081 0101 	eor.w	r1, r1, #1
   d4b0c:	f7ff bf36 	b.w	d497c <network_listen>

000d4b10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b10:	2300      	movs	r3, #0
   d4b12:	6840      	ldr	r0, [r0, #4]
   d4b14:	461a      	mov	r2, r3
   d4b16:	4619      	mov	r1, r3
   d4b18:	f7ff bf28 	b.w	d496c <network_off>

000d4b1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b1c:	2300      	movs	r3, #0
   d4b1e:	6840      	ldr	r0, [r0, #4]
   d4b20:	461a      	mov	r2, r3
   d4b22:	4619      	mov	r1, r3
   d4b24:	f7ff bf1a 	b.w	d495c <network_on>

000d4b28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b28:	2200      	movs	r2, #0
   d4b2a:	6840      	ldr	r0, [r0, #4]
   d4b2c:	4611      	mov	r1, r2
   d4b2e:	f7ff bf0d 	b.w	d494c <network_ready>

000d4b32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b32:	2200      	movs	r2, #0
   d4b34:	6840      	ldr	r0, [r0, #4]
   d4b36:	4611      	mov	r1, r2
   d4b38:	f7ff bef8 	b.w	d492c <network_connecting>

000d4b3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b3c:	6840      	ldr	r0, [r0, #4]
   d4b3e:	2200      	movs	r2, #0
   d4b40:	2102      	movs	r1, #2
   d4b42:	f7ff befb 	b.w	d493c <network_disconnect>

000d4b46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b46:	2300      	movs	r3, #0
   d4b48:	6840      	ldr	r0, [r0, #4]
   d4b4a:	461a      	mov	r2, r3
   d4b4c:	f7ff bee6 	b.w	d491c <network_connect>

000d4b50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b50:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b52:	2203      	movs	r2, #3
   d4b54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b56:	4a02      	ldr	r2, [pc, #8]	; (d4b60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b5a:	4770      	bx	lr
   d4b5c:	2003e714 	.word	0x2003e714
   d4b60:	000d7c48 	.word	0x000d7c48

000d4b64 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4b64:	4770      	bx	lr

000d4b66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b68:	4606      	mov	r6, r0
   d4b6a:	4615      	mov	r5, r2
   d4b6c:	460c      	mov	r4, r1
   d4b6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b70:	42bc      	cmp	r4, r7
   d4b72:	d006      	beq.n	d4b82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4b74:	6833      	ldr	r3, [r6, #0]
   d4b76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4b7a:	689b      	ldr	r3, [r3, #8]
   d4b7c:	4630      	mov	r0, r6
   d4b7e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4b80:	e7f6      	b.n	d4b70 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4b82:	4628      	mov	r0, r5
   d4b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b86 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4b86:	7c00      	ldrb	r0, [r0, #16]
   d4b88:	2200      	movs	r2, #0
   d4b8a:	f7ff bd6b 	b.w	d4664 <hal_i2c_write>

000d4b8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4b8e:	7c00      	ldrb	r0, [r0, #16]
   d4b90:	2100      	movs	r1, #0
   d4b92:	f7ff bd6f 	b.w	d4674 <hal_i2c_available>

000d4b96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4b96:	7c00      	ldrb	r0, [r0, #16]
   d4b98:	2100      	movs	r1, #0
   d4b9a:	f7ff bd73 	b.w	d4684 <hal_i2c_read>

000d4b9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4b9e:	7c00      	ldrb	r0, [r0, #16]
   d4ba0:	2100      	movs	r1, #0
   d4ba2:	f7ff bd77 	b.w	d4694 <hal_i2c_peek>

000d4ba6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4ba6:	7c00      	ldrb	r0, [r0, #16]
   d4ba8:	2100      	movs	r1, #0
   d4baa:	f7ff bd7b 	b.w	d46a4 <hal_i2c_flush>

000d4bae <_ZN7TwoWireD0Ev>:
   d4bae:	b510      	push	{r4, lr}
   d4bb0:	2114      	movs	r1, #20
   d4bb2:	4604      	mov	r4, r0
   d4bb4:	f002 f853 	bl	d6c5e <_ZdlPvj>
   d4bb8:	4620      	mov	r0, r4
   d4bba:	bd10      	pop	{r4, pc}

000d4bbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4bbc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bc2:	4604      	mov	r4, r0
   d4bc4:	4608      	mov	r0, r1
   d4bc6:	2100      	movs	r1, #0
   d4bc8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4bcc:	4b03      	ldr	r3, [pc, #12]	; (d4bdc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4bce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4bd0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4bd2:	4611      	mov	r1, r2
   d4bd4:	f7ff fd76 	bl	d46c4 <hal_i2c_init>
}
   d4bd8:	4620      	mov	r0, r4
   d4bda:	bd10      	pop	{r4, pc}
   d4bdc:	000d7c84 	.word	0x000d7c84

000d4be0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4be0:	4770      	bx	lr

000d4be2 <_ZN9IPAddressD0Ev>:
   d4be2:	b510      	push	{r4, lr}
   d4be4:	2118      	movs	r1, #24
   d4be6:	4604      	mov	r4, r0
   d4be8:	f002 f839 	bl	d6c5e <_ZdlPvj>
   d4bec:	4620      	mov	r0, r4
   d4bee:	bd10      	pop	{r4, pc}

000d4bf0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4bf2:	7d03      	ldrb	r3, [r0, #20]
   d4bf4:	2b06      	cmp	r3, #6
{
   d4bf6:	b08d      	sub	sp, #52	; 0x34
   d4bf8:	460e      	mov	r6, r1
   d4bfa:	f100 0704 	add.w	r7, r0, #4
   d4bfe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4c02:	d012      	beq.n	d4c2a <_ZNK9IPAddress7printToER5Print+0x3a>
   d4c04:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4c08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c0c:	220a      	movs	r2, #10
   d4c0e:	4630      	mov	r0, r6
   d4c10:	f001 fad9 	bl	d61c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4c18:	d019      	beq.n	d4c4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4c1a:	2c00      	cmp	r4, #0
   d4c1c:	d0f4      	beq.n	d4c08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4c1e:	212e      	movs	r1, #46	; 0x2e
   d4c20:	4630      	mov	r0, r6
   d4c22:	f001 fac1 	bl	d61a8 <_ZN5Print5printEc>
   d4c26:	4404      	add	r4, r0
   d4c28:	e7ee      	b.n	d4c08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c2a:	232f      	movs	r3, #47	; 0x2f
   d4c2c:	466a      	mov	r2, sp
   d4c2e:	4639      	mov	r1, r7
   d4c30:	200a      	movs	r0, #10
		buf[0] = 0;
   d4c32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c36:	f7ff fd4d 	bl	d46d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4c3a:	4668      	mov	r0, sp
   d4c3c:	f002 ff01 	bl	d7a42 <strlen>
   d4c40:	6833      	ldr	r3, [r6, #0]
   d4c42:	4602      	mov	r2, r0
   d4c44:	68db      	ldr	r3, [r3, #12]
   d4c46:	4669      	mov	r1, sp
   d4c48:	4630      	mov	r0, r6
   d4c4a:	4798      	blx	r3
   d4c4c:	4604      	mov	r4, r0
    }
    return n;
}
   d4c4e:	4620      	mov	r0, r4
   d4c50:	b00d      	add	sp, #52	; 0x34
   d4c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4c54:	b510      	push	{r4, lr}
   d4c56:	4b05      	ldr	r3, [pc, #20]	; (d4c6c <_ZN9IPAddressC1Ev+0x18>)
   d4c58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c5a:	2211      	movs	r2, #17
   d4c5c:	f840 3b04 	str.w	r3, [r0], #4
   d4c60:	2100      	movs	r1, #0
   d4c62:	f002 fe99 	bl	d7998 <memset>
}
   d4c66:	4620      	mov	r0, r4
   d4c68:	bd10      	pop	{r4, pc}
   d4c6a:	bf00      	nop
   d4c6c:	000d7cac 	.word	0x000d7cac

000d4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c70:	4603      	mov	r3, r0
   d4c72:	4a07      	ldr	r2, [pc, #28]	; (d4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c74:	b510      	push	{r4, lr}
   d4c76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4c7a:	f101 0210 	add.w	r2, r1, #16
   d4c7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4c82:	f843 4b04 	str.w	r4, [r3], #4
   d4c86:	4291      	cmp	r1, r2
   d4c88:	d1f9      	bne.n	d4c7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4c8a:	780a      	ldrb	r2, [r1, #0]
   d4c8c:	701a      	strb	r2, [r3, #0]
}
   d4c8e:	bd10      	pop	{r4, pc}
   d4c90:	000d7cac 	.word	0x000d7cac

000d4c94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4c94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4c96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4c9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4c9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ca2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ca6:	2304      	movs	r3, #4
   d4ca8:	6041      	str	r1, [r0, #4]
   d4caa:	7503      	strb	r3, [r0, #20]
}
   d4cac:	bd10      	pop	{r4, pc}
	...

000d4cb0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d4cb0:	b513      	push	{r0, r1, r4, lr}
   d4cb2:	4b05      	ldr	r3, [pc, #20]	; (d4cc8 <_ZN9IPAddressC1EPKh+0x18>)
   d4cb4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d4cb6:	78cb      	ldrb	r3, [r1, #3]
   d4cb8:	9300      	str	r3, [sp, #0]
   d4cba:	788b      	ldrb	r3, [r1, #2]
   d4cbc:	784a      	ldrb	r2, [r1, #1]
   d4cbe:	7809      	ldrb	r1, [r1, #0]
   d4cc0:	f7ff ffe8 	bl	d4c94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4cc4:	b002      	add	sp, #8
   d4cc6:	bd10      	pop	{r4, pc}
   d4cc8:	000d7cac 	.word	0x000d7cac

000d4ccc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d4ccc:	f100 0310 	add.w	r3, r0, #16
   d4cd0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d4cd2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d4cd6:	2901      	cmp	r1, #1
   d4cd8:	4618      	mov	r0, r3
   d4cda:	d108      	bne.n	d4cee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d4cdc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d4ce0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d4ce4:	3a01      	subs	r2, #1
   d4ce6:	f103 0310 	add.w	r3, r3, #16
   d4cea:	d1f2      	bne.n	d4cd2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d4cec:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d4cee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d4cf0:	bf04      	itt	eq
   d4cf2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d4cf6:	1852      	addeq	r2, r2, r1
   d4cf8:	e7f4      	b.n	d4ce4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d4cfa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d4cfa:	b40e      	push	{r1, r2, r3}
   d4cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cfe:	b088      	sub	sp, #32
   d4d00:	af00      	add	r7, sp, #0
   d4d02:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4d06:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4d08:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4d0c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d4d0e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4d10:	462b      	mov	r3, r5
   d4d12:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d4d14:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4d16:	f7ff fe79 	bl	d4a0c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d4d1a:	280f      	cmp	r0, #15
   d4d1c:	687a      	ldr	r2, [r7, #4]
   d4d1e:	d91a      	bls.n	d4d56 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d4d20:	f100 0308 	add.w	r3, r0, #8
   d4d24:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d4d28:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d4d2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4d2e:	1c41      	adds	r1, r0, #1
   d4d30:	462b      	mov	r3, r5
   d4d32:	4668      	mov	r0, sp
        va_start(args, fmt);
   d4d34:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d4d36:	f7ff fe69 	bl	d4a0c <vsnprintf>
        if (n > 0) {
   d4d3a:	1e02      	subs	r2, r0, #0
   d4d3c:	dd04      	ble.n	d4d48 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d4d3e:	6823      	ldr	r3, [r4, #0]
   d4d40:	4669      	mov	r1, sp
   d4d42:	689b      	ldr	r3, [r3, #8]
   d4d44:	4620      	mov	r0, r4
   d4d46:	4798      	blx	r3
   d4d48:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d4d4a:	3720      	adds	r7, #32
   d4d4c:	46bd      	mov	sp, r7
   d4d4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d4d52:	b003      	add	sp, #12
   d4d54:	4770      	bx	lr
    } else if (n > 0) {
   d4d56:	2800      	cmp	r0, #0
   d4d58:	d0f7      	beq.n	d4d4a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d4d5a:	6823      	ldr	r3, [r4, #0]
   d4d5c:	4602      	mov	r2, r0
   d4d5e:	689b      	ldr	r3, [r3, #8]
   d4d60:	f107 0110 	add.w	r1, r7, #16
   d4d64:	4620      	mov	r0, r4
   d4d66:	4798      	blx	r3
}
   d4d68:	e7ef      	b.n	d4d4a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d4d6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d6a:	b510      	push	{r4, lr}
          _M_dispose();
   d4d6c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d6e:	4604      	mov	r4, r0
          _M_dispose();
   d4d70:	689b      	ldr	r3, [r3, #8]
   d4d72:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d74:	68a3      	ldr	r3, [r4, #8]
   d4d76:	3b01      	subs	r3, #1
   d4d78:	60a3      	str	r3, [r4, #8]
   d4d7a:	b92b      	cbnz	r3, d4d88 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4d7c:	6823      	ldr	r3, [r4, #0]
   d4d7e:	4620      	mov	r0, r4
   d4d80:	68db      	ldr	r3, [r3, #12]
    }
   d4d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4d86:	4718      	bx	r3
    }
   d4d88:	bd10      	pop	{r4, pc}

000d4d8a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d4d8a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4d8c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d4d8e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	2201      	movs	r2, #1
   d4d96:	f10d 0107 	add.w	r1, sp, #7
   d4d9a:	4798      	blx	r3
}
   d4d9c:	b003      	add	sp, #12
   d4d9e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4da2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d4da2:	b538      	push	{r3, r4, r5, lr}
   d4da4:	680b      	ldr	r3, [r1, #0]
   d4da6:	6003      	str	r3, [r0, #0]
   d4da8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d4daa:	6843      	ldr	r3, [r0, #4]
   d4dac:	429d      	cmp	r5, r3
    class __shared_ptr
   d4dae:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d4db0:	d00c      	beq.n	d4dcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d4db2:	b115      	cbz	r5, d4dba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d4db4:	686b      	ldr	r3, [r5, #4]
   d4db6:	3301      	adds	r3, #1
   d4db8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d4dba:	6860      	ldr	r0, [r4, #4]
   d4dbc:	b128      	cbz	r0, d4dca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d4dbe:	6843      	ldr	r3, [r0, #4]
   d4dc0:	3b01      	subs	r3, #1
   d4dc2:	6043      	str	r3, [r0, #4]
   d4dc4:	b90b      	cbnz	r3, d4dca <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d4dc6:	f7ff ffd0 	bl	d4d6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d4dca:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d4dcc:	4620      	mov	r0, r4
   d4dce:	bd38      	pop	{r3, r4, r5, pc}

000d4dd0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4dd0:	460b      	mov	r3, r1
   d4dd2:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d4dd8:	e9c0 2200 	strd	r2, r2, [r0]
   d4ddc:	4604      	mov	r4, r0
        t_ = t;
   d4dde:	6083      	str	r3, [r0, #8]
    if (t) {
   d4de0:	b90b      	cbnz	r3, d4de6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d4de2:	4620      	mov	r0, r4
   d4de4:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d4de6:	f7ff ffdc 	bl	d4da2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d4dea:	e7fa      	b.n	d4de2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d4dec <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d4dec:	6883      	ldr	r3, [r0, #8]
   d4dee:	b1eb      	cbz	r3, d4e2c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d4df0:	781a      	ldrb	r2, [r3, #0]
   d4df2:	2a03      	cmp	r2, #3
   d4df4:	d81a      	bhi.n	d4e2c <_ZNK5spark9JSONValue4typeEv+0x40>
   d4df6:	e8df f002 	tbb	[pc, r2]
   d4dfa:	1704      	.short	0x1704
   d4dfc:	1b02      	.short	0x1b02
   d4dfe:	2005      	movs	r0, #5
   d4e00:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d4e02:	6802      	ldr	r2, [r0, #0]
   d4e04:	685b      	ldr	r3, [r3, #4]
   d4e06:	6852      	ldr	r2, [r2, #4]
   d4e08:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d4e0a:	282d      	cmp	r0, #45	; 0x2d
   d4e0c:	d012      	beq.n	d4e34 <_ZNK5spark9JSONValue4typeEv+0x48>
   d4e0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4e12:	2b09      	cmp	r3, #9
   d4e14:	d90e      	bls.n	d4e34 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d4e16:	2874      	cmp	r0, #116	; 0x74
   d4e18:	d00e      	beq.n	d4e38 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d4e1a:	2866      	cmp	r0, #102	; 0x66
   d4e1c:	d00c      	beq.n	d4e38 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d4e1e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d4e22:	4258      	negs	r0, r3
   d4e24:	4158      	adcs	r0, r3
   d4e26:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d4e28:	2006      	movs	r0, #6
   d4e2a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d4e2c:	2000      	movs	r0, #0
   d4e2e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d4e30:	2004      	movs	r0, #4
   d4e32:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d4e34:	2003      	movs	r0, #3
   d4e36:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d4e38:	2002      	movs	r0, #2
}
   d4e3a:	4770      	bx	lr

000d4e3c <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d4e3c:	b510      	push	{r4, lr}
   d4e3e:	4604      	mov	r4, r0
    switch (type()) {
   d4e40:	f7ff ffd4 	bl	d4dec <_ZNK5spark9JSONValue4typeEv>
   d4e44:	2802      	cmp	r0, #2
   d4e46:	d00e      	beq.n	d4e66 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d4e48:	1ec3      	subs	r3, r0, #3
   d4e4a:	b2db      	uxtb	r3, r3
   d4e4c:	2b01      	cmp	r3, #1
   d4e4e:	d814      	bhi.n	d4e7a <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d4e50:	6822      	ldr	r2, [r4, #0]
   d4e52:	68a3      	ldr	r3, [r4, #8]
   d4e54:	6850      	ldr	r0, [r2, #4]
   d4e56:	685b      	ldr	r3, [r3, #4]
}
   d4e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d4e5c:	220a      	movs	r2, #10
   d4e5e:	2100      	movs	r1, #0
   d4e60:	4418      	add	r0, r3
   d4e62:	f002 be97 	b.w	d7b94 <strtol>
        const char* const s = d_->json + t_->start;
   d4e66:	6822      	ldr	r2, [r4, #0]
   d4e68:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d4e6a:	6852      	ldr	r2, [r2, #4]
   d4e6c:	685b      	ldr	r3, [r3, #4]
   d4e6e:	5cd0      	ldrb	r0, [r2, r3]
   d4e70:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d4e74:	4258      	negs	r0, r3
   d4e76:	4158      	adcs	r0, r3
}
   d4e78:	bd10      	pop	{r4, pc}
    switch (type()) {
   d4e7a:	2000      	movs	r0, #0
   d4e7c:	e7fc      	b.n	d4e78 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d4e80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4e80:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d4e82:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4e84:	e9c0 3300 	strd	r3, r3, [r0]
   d4e88:	4604      	mov	r4, r0
        n_(0) {
   d4e8a:	480e      	ldr	r0, [pc, #56]	; (d4ec4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d4e8c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d4e90:	b1a9      	cbz	r1, d4ebe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d4e92:	780b      	ldrb	r3, [r1, #0]
   d4e94:	2b03      	cmp	r3, #3
   d4e96:	d006      	beq.n	d4ea6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d4e98:	b98b      	cbnz	r3, d4ebe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d4e9a:	6813      	ldr	r3, [r2, #0]
   d4e9c:	6858      	ldr	r0, [r3, #4]
   d4e9e:	684b      	ldr	r3, [r1, #4]
   d4ea0:	5cc3      	ldrb	r3, [r0, r3]
   d4ea2:	2b6e      	cmp	r3, #110	; 0x6e
   d4ea4:	d007      	beq.n	d4eb6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d4ea6:	6813      	ldr	r3, [r2, #0]
   d4ea8:	684d      	ldr	r5, [r1, #4]
   d4eaa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d4eac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d4eae:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d4eb0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d4eb2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d4eb4:	60e3      	str	r3, [r4, #12]
   d4eb6:	4611      	mov	r1, r2
   d4eb8:	4620      	mov	r0, r4
   d4eba:	f7ff ff72 	bl	d4da2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	bd38      	pop	{r3, r4, r5, pc}
   d4ec2:	bf00      	nop
   d4ec4:	000d7d1e 	.word	0x000d7d1e

000d4ec8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d4ec8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d4eca:	2500      	movs	r5, #0
   d4ecc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d4ece:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d4ed2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d4ed6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d4eda:	4604      	mov	r4, r0
   d4edc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d4ede:	b14b      	cbz	r3, d4ef4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d4ee0:	781a      	ldrb	r2, [r3, #0]
   d4ee2:	2a01      	cmp	r2, #1
   d4ee4:	d106      	bne.n	d4ef4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d4ee6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d4eea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d4eec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d4eee:	6143      	str	r3, [r0, #20]
   d4ef0:	f7ff ff57 	bl	d4da2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd38      	pop	{r3, r4, r5, pc}

000d4ef8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d4ef8:	b510      	push	{r4, lr}
    if (!n_) {
   d4efa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d4efc:	4604      	mov	r4, r0
    if (!n_) {
   d4efe:	b163      	cbz	r3, d4f1a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d4f00:	6880      	ldr	r0, [r0, #8]
   d4f02:	60e0      	str	r0, [r4, #12]
    --n_;
   d4f04:	3b01      	subs	r3, #1
    ++t_;
   d4f06:	3010      	adds	r0, #16
   d4f08:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d4f0a:	6120      	str	r0, [r4, #16]
    --n_;
   d4f0c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d4f0e:	b113      	cbz	r3, d4f16 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d4f10:	f7ff fedc 	bl	d4ccc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d4f14:	60a0      	str	r0, [r4, #8]
    return true;
   d4f16:	2001      	movs	r0, #1
   d4f18:	e000      	b.n	d4f1c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d4f1a:	4618      	mov	r0, r3
}
   d4f1c:	bd10      	pop	{r4, pc}

000d4f1e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d4f1e:	b510      	push	{r4, lr}
    write('}');
   d4f20:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d4f22:	4604      	mov	r4, r0
    write('}');
   d4f24:	f7ff ff31 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d4f28:	2301      	movs	r3, #1
   d4f2a:	7123      	strb	r3, [r4, #4]
}
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	bd10      	pop	{r4, pc}

000d4f30 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d4f30:	b508      	push	{r3, lr}
    switch (state_) {
   d4f32:	7903      	ldrb	r3, [r0, #4]
   d4f34:	2b01      	cmp	r3, #1
   d4f36:	d002      	beq.n	d4f3e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d4f38:	2b02      	cmp	r3, #2
   d4f3a:	d004      	beq.n	d4f46 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d4f3c:	bd08      	pop	{r3, pc}
        write(',');
   d4f3e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d4f40:	f7ff ff23 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
}
   d4f44:	e7fa      	b.n	d4f3c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d4f46:	213a      	movs	r1, #58	; 0x3a
   d4f48:	e7fa      	b.n	d4f40 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d4f4a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d4f4a:	b510      	push	{r4, lr}
   d4f4c:	4604      	mov	r4, r0
    writeSeparator();
   d4f4e:	f7ff ffef 	bl	d4f30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d4f52:	4620      	mov	r0, r4
   d4f54:	217b      	movs	r1, #123	; 0x7b
   d4f56:	f7ff ff18 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d4f5a:	2300      	movs	r3, #0
   d4f5c:	7123      	strb	r3, [r4, #4]
}
   d4f5e:	4620      	mov	r0, r4
   d4f60:	bd10      	pop	{r4, pc}
	...

000d4f64 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d4f64:	b513      	push	{r0, r1, r4, lr}
   d4f66:	4604      	mov	r4, r0
   d4f68:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d4f6a:	f7ff ffe1 	bl	d4f30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d4f6e:	6823      	ldr	r3, [r4, #0]
   d4f70:	9a01      	ldr	r2, [sp, #4]
   d4f72:	68db      	ldr	r3, [r3, #12]
   d4f74:	4903      	ldr	r1, [pc, #12]	; (d4f84 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d4f76:	4620      	mov	r0, r4
   d4f78:	4798      	blx	r3
    state_ = NEXT;
   d4f7a:	2301      	movs	r3, #1
}
   d4f7c:	4620      	mov	r0, r4
    state_ = NEXT;
   d4f7e:	7123      	strb	r3, [r4, #4]
}
   d4f80:	b002      	add	sp, #8
   d4f82:	bd10      	pop	{r4, pc}
   d4f84:	000d7cb8 	.word	0x000d7cb8

000d4f88 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d4f88:	b513      	push	{r0, r1, r4, lr}
   d4f8a:	4604      	mov	r4, r0
   d4f8c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d4f8e:	f7ff ffcf 	bl	d4f30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d4f92:	6823      	ldr	r3, [r4, #0]
   d4f94:	9a01      	ldr	r2, [sp, #4]
   d4f96:	68db      	ldr	r3, [r3, #12]
   d4f98:	4903      	ldr	r1, [pc, #12]	; (d4fa8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	4798      	blx	r3
    state_ = NEXT;
   d4f9e:	2301      	movs	r3, #1
}
   d4fa0:	4620      	mov	r0, r4
    state_ = NEXT;
   d4fa2:	7123      	strb	r3, [r4, #4]
}
   d4fa4:	b002      	add	sp, #8
   d4fa6:	bd10      	pop	{r4, pc}
   d4fa8:	000d7cbb 	.word	0x000d7cbb

000d4fac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d4fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fb0:	460d      	mov	r5, r1
   d4fb2:	4617      	mov	r7, r2
    write('"');
   d4fb4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d4fb6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d5058 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d4fba:	4604      	mov	r4, r0
    const char* const end = str + size;
   d4fbc:	442f      	add	r7, r5
    write('"');
   d4fbe:	f7ff fee4 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d4fc2:	4629      	mov	r1, r5
    while (s != end) {
   d4fc4:	42bd      	cmp	r5, r7
   d4fc6:	462a      	mov	r2, r5
   d4fc8:	d038      	beq.n	d503c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d4fca:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d4fce:	2e22      	cmp	r6, #34	; 0x22
   d4fd0:	d003      	beq.n	d4fda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d4fd2:	2e5c      	cmp	r6, #92	; 0x5c
   d4fd4:	d001      	beq.n	d4fda <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d4fd6:	2e1f      	cmp	r6, #31
   d4fd8:	d8f4      	bhi.n	d4fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d4fda:	6823      	ldr	r3, [r4, #0]
   d4fdc:	1a52      	subs	r2, r2, r1
   d4fde:	689b      	ldr	r3, [r3, #8]
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	4798      	blx	r3
            write('\\');
   d4fe4:	215c      	movs	r1, #92	; 0x5c
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	f7ff fecf 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d4fec:	2e0d      	cmp	r6, #13
   d4fee:	d80a      	bhi.n	d5006 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d4ff0:	2e07      	cmp	r6, #7
   d4ff2:	d91c      	bls.n	d502e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d4ff4:	f1a6 0308 	sub.w	r3, r6, #8
   d4ff8:	2b05      	cmp	r3, #5
   d4ffa:	d818      	bhi.n	d502e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d4ffc:	e8df f003 	tbb	[pc, r3]
   d5000:	17110f0d 	.word	0x17110f0d
   d5004:	1513      	.short	0x1513
   d5006:	2e22      	cmp	r6, #34	; 0x22
   d5008:	d001      	beq.n	d500e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d500a:	2e5c      	cmp	r6, #92	; 0x5c
   d500c:	d10f      	bne.n	d502e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d500e:	4631      	mov	r1, r6
                write('b');
   d5010:	4620      	mov	r0, r4
   d5012:	f7ff feba 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d5016:	4629      	mov	r1, r5
    while (s != end) {
   d5018:	e7d4      	b.n	d4fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d501a:	2162      	movs	r1, #98	; 0x62
   d501c:	e7f8      	b.n	d5010 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d501e:	2174      	movs	r1, #116	; 0x74
   d5020:	e7f6      	b.n	d5010 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d5022:	216e      	movs	r1, #110	; 0x6e
   d5024:	e7f4      	b.n	d5010 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d5026:	2166      	movs	r1, #102	; 0x66
   d5028:	e7f2      	b.n	d5010 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d502a:	2172      	movs	r1, #114	; 0x72
   d502c:	e7f0      	b.n	d5010 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d502e:	6823      	ldr	r3, [r4, #0]
   d5030:	4632      	mov	r2, r6
   d5032:	68db      	ldr	r3, [r3, #12]
   d5034:	4641      	mov	r1, r8
   d5036:	4620      	mov	r0, r4
   d5038:	4798      	blx	r3
                break;
   d503a:	e7ec      	b.n	d5016 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d503c:	428d      	cmp	r5, r1
   d503e:	d004      	beq.n	d504a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d5040:	6823      	ldr	r3, [r4, #0]
   d5042:	1a6a      	subs	r2, r5, r1
   d5044:	689b      	ldr	r3, [r3, #8]
   d5046:	4620      	mov	r0, r4
   d5048:	4798      	blx	r3
    }
    write('"');
   d504a:	2122      	movs	r1, #34	; 0x22
   d504c:	4620      	mov	r0, r4
   d504e:	f7ff fe9c 	bl	d4d8a <_ZN5spark10JSONWriter5writeEc>
}
   d5052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5056:	bf00      	nop
   d5058:	000d7cbe 	.word	0x000d7cbe

000d505c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d505c:	b513      	push	{r0, r1, r4, lr}
   d505e:	4604      	mov	r4, r0
   d5060:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d5064:	f7ff ff64 	bl	d4f30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5068:	4620      	mov	r0, r4
   d506a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d506e:	f7ff ff9d 	bl	d4fac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5072:	2302      	movs	r3, #2
}
   d5074:	4620      	mov	r0, r4
    state_ = VALUE;
   d5076:	7123      	strb	r3, [r4, #4]
}
   d5078:	b002      	add	sp, #8
   d507a:	bd10      	pop	{r4, pc}

000d507c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d507c:	b513      	push	{r0, r1, r4, lr}
   d507e:	4604      	mov	r4, r0
   d5080:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d5084:	f7ff ff54 	bl	d4f30 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d5088:	4620      	mov	r0, r4
   d508a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d508e:	f7ff ff8d 	bl	d4fac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d5092:	2301      	movs	r3, #1
}
   d5094:	4620      	mov	r0, r4
    state_ = NEXT;
   d5096:	7123      	strb	r3, [r4, #4]
}
   d5098:	b002      	add	sp, #8
   d509a:	bd10      	pop	{r4, pc}

000d509c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d509c:	6880      	ldr	r0, [r0, #8]
   d509e:	6803      	ldr	r3, [r0, #0]
   d50a0:	68db      	ldr	r3, [r3, #12]
   d50a2:	4718      	bx	r3

000d50a4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d50a4:	4770      	bx	lr

000d50a6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d50a6:	4608      	mov	r0, r1
   d50a8:	b111      	cbz	r1, d50b0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d50aa:	680b      	ldr	r3, [r1, #0]
   d50ac:	685b      	ldr	r3, [r3, #4]
   d50ae:	4718      	bx	r3
}
   d50b0:	4770      	bx	lr

000d50b2 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d50b2:	4770      	bx	lr

000d50b4 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d50b4:	4770      	bx	lr

000d50b6 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d50b6:	4770      	bx	lr

000d50b8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d50b8:	b538      	push	{r3, r4, r5, lr}
   d50ba:	4604      	mov	r4, r0
   d50bc:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d50be:	6800      	ldr	r0, [r0, #0]
   d50c0:	212e      	movs	r1, #46	; 0x2e
   d50c2:	f002 fca2 	bl	d7a0a <strchrnul>
    size = s - category;
   d50c6:	6823      	ldr	r3, [r4, #0]
   d50c8:	1ac3      	subs	r3, r0, r3
   d50ca:	602b      	str	r3, [r5, #0]
    if (size) {
   d50cc:	b123      	cbz	r3, d50d8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d50ce:	7803      	ldrb	r3, [r0, #0]
   d50d0:	b103      	cbz	r3, d50d4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d50d2:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50d4:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d50d6:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d50d8:	4618      	mov	r0, r3
   d50da:	bd38      	pop	{r3, r4, r5, pc}

000d50dc <_ZN5spark16JSONStreamWriterD0Ev>:
   d50dc:	b510      	push	{r4, lr}
   d50de:	210c      	movs	r1, #12
   d50e0:	4604      	mov	r4, r0
   d50e2:	f001 fdbc 	bl	d6c5e <_ZdlPvj>
   d50e6:	4620      	mov	r0, r4
   d50e8:	bd10      	pop	{r4, pc}

000d50ea <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d50ea:	b510      	push	{r4, lr}
   d50ec:	2104      	movs	r1, #4
   d50ee:	4604      	mov	r4, r0
   d50f0:	f001 fdb5 	bl	d6c5e <_ZdlPvj>
   d50f4:	4620      	mov	r0, r4
   d50f6:	bd10      	pop	{r4, pc}

000d50f8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d50f8:	b510      	push	{r4, lr}
   d50fa:	2104      	movs	r1, #4
   d50fc:	4604      	mov	r4, r0
   d50fe:	f001 fdae 	bl	d6c5e <_ZdlPvj>
   d5102:	4620      	mov	r0, r4
   d5104:	bd10      	pop	{r4, pc}

000d5106 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d5106:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5108:	f002 fc89 	bl	d7a1e <strcmp>
}
   d510c:	fab0 f080 	clz	r0, r0
   d5110:	0940      	lsrs	r0, r0, #5
   d5112:	bd08      	pop	{r3, pc}

000d5114 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5114:	b510      	push	{r4, lr}
   d5116:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5118:	f001 fb70 	bl	d67fc <_Z16_fetch_usbserialv>
   d511c:	4284      	cmp	r4, r0
   d511e:	d010      	beq.n	d5142 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5120:	f001 fac4 	bl	d66ac <_Z22__fetch_global_Serial1v>
   d5124:	4284      	cmp	r4, r0
   d5126:	d105      	bne.n	d5134 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d5128:	f001 fac0 	bl	d66ac <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d512c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d5130:	f001 bab9 	b.w	d66a6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5134:	b12c      	cbz	r4, d5142 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d5136:	6823      	ldr	r3, [r4, #0]
   d5138:	4620      	mov	r0, r4
   d513a:	685b      	ldr	r3, [r3, #4]
}
   d513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5140:	4718      	bx	r3
   d5142:	bd10      	pop	{r4, pc}

000d5144 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5144:	b513      	push	{r0, r1, r4, lr}
   d5146:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d5148:	4608      	mov	r0, r1
   d514a:	9101      	str	r1, [sp, #4]
   d514c:	f002 fc79 	bl	d7a42 <strlen>
   d5150:	9901      	ldr	r1, [sp, #4]
   d5152:	4602      	mov	r2, r0
   d5154:	4620      	mov	r0, r4
}
   d5156:	b002      	add	sp, #8
   d5158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d515c:	f7ff bf8e 	b.w	d507c <_ZN5spark10JSONWriter5valueEPKcj>

000d5160 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d5160:	b513      	push	{r0, r1, r4, lr}
   d5162:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5164:	4608      	mov	r0, r1
   d5166:	9101      	str	r1, [sp, #4]
   d5168:	f002 fc6b 	bl	d7a42 <strlen>
   d516c:	6823      	ldr	r3, [r4, #0]
   d516e:	9901      	ldr	r1, [sp, #4]
   d5170:	68db      	ldr	r3, [r3, #12]
   d5172:	4602      	mov	r2, r0
   d5174:	4620      	mov	r0, r4
}
   d5176:	b002      	add	sp, #8
   d5178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d517c:	4718      	bx	r3

000d517e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d517e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5180:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d5182:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d5186:	68db      	ldr	r3, [r3, #12]
   d5188:	2201      	movs	r2, #1
   d518a:	f10d 0107 	add.w	r1, sp, #7
   d518e:	4798      	blx	r3
}
   d5190:	b003      	add	sp, #12
   d5192:	f85d fb04 	ldr.w	pc, [sp], #4

000d5196 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5196:	b40e      	push	{r1, r2, r3}
   d5198:	b503      	push	{r0, r1, lr}
   d519a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d519c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d519e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d51a2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d51a4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d51a6:	f001 f82c 	bl	d6202 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d51aa:	b002      	add	sp, #8
   d51ac:	f85d eb04 	ldr.w	lr, [sp], #4
   d51b0:	b003      	add	sp, #12
   d51b2:	4770      	bx	lr

000d51b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d51b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d51b8:	e9d0 9500 	ldrd	r9, r5, [r0]
   d51bc:	f04f 0814 	mov.w	r8, #20
   d51c0:	fb08 f505 	mul.w	r5, r8, r5
   d51c4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d51c6:	10ab      	asrs	r3, r5, #2
   d51c8:	4d18      	ldr	r5, [pc, #96]	; (d522c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d51ca:	4617      	mov	r7, r2
   d51cc:	435d      	muls	r5, r3
   d51ce:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d51d0:	2d00      	cmp	r5, #0
   d51d2:	dd23      	ble.n	d521c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d51d4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d51d6:	fb08 f006 	mul.w	r0, r8, r6
   d51da:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d51de:	463a      	mov	r2, r7
   d51e0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d51e4:	5820      	ldr	r0, [r4, r0]
   d51e6:	9101      	str	r1, [sp, #4]
   d51e8:	455f      	cmp	r7, fp
   d51ea:	bf28      	it	cs
   d51ec:	465a      	movcs	r2, fp
   d51ee:	f002 fc30 	bl	d7a52 <strncmp>
                if (cmp == 0) {
   d51f2:	9901      	ldr	r1, [sp, #4]
   d51f4:	2301      	movs	r3, #1
   d51f6:	b978      	cbnz	r0, d5218 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d51f8:	455f      	cmp	r7, fp
   d51fa:	d103      	bne.n	d5204 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d51fc:	9a00      	ldr	r2, [sp, #0]
   d51fe:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5200:	4635      	mov	r5, r6
   d5202:	e7e5      	b.n	d51d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5204:	bf8c      	ite	hi
   d5206:	2001      	movhi	r0, #1
   d5208:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d520a:	2800      	cmp	r0, #0
   d520c:	d0f8      	beq.n	d5200 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d520e:	1bae      	subs	r6, r5, r6
	      ++__first;
   d5210:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5214:	3e01      	subs	r6, #1
   d5216:	e7f3      	b.n	d5200 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d5218:	0fc0      	lsrs	r0, r0, #31
   d521a:	e7f6      	b.n	d520a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d521c:	eba4 0409 	sub.w	r4, r4, r9
}
   d5220:	4802      	ldr	r0, [pc, #8]	; (d522c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5222:	10a4      	asrs	r4, r4, #2
   d5224:	4360      	muls	r0, r4
   d5226:	b003      	add	sp, #12
   d5228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d522c:	cccccccd 	.word	0xcccccccd

000d5230 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d5232:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d5234:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5236:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d5238:	b30b      	cbz	r3, d527e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d523a:	b301      	cbz	r1, d527e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d523c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d523e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d5242:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d5244:	a903      	add	r1, sp, #12
   d5246:	a801      	add	r0, sp, #4
   d5248:	f7ff ff36 	bl	d50b8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d524c:	4601      	mov	r1, r0
   d524e:	b1b0      	cbz	r0, d527e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5250:	f10d 030b 	add.w	r3, sp, #11
   d5254:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d5256:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d525a:	4620      	mov	r0, r4
   d525c:	f7ff ffaa 	bl	d51b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5260:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5264:	b15b      	cbz	r3, d527e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d5266:	6824      	ldr	r4, [r4, #0]
   d5268:	2314      	movs	r3, #20
   d526a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d526e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d5272:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d5276:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5278:	bfa8      	it	ge
   d527a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d527c:	e7e2      	b.n	d5244 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d527e:	4630      	mov	r0, r6
   d5280:	b004      	add	sp, #16
   d5282:	bd70      	pop	{r4, r5, r6, pc}

000d5284 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5284:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5286:	4c0a      	ldr	r4, [pc, #40]	; (d52b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5288:	7823      	ldrb	r3, [r4, #0]
   d528a:	f3bf 8f5b 	dmb	ish
   d528e:	07db      	lsls	r3, r3, #31
   d5290:	d40b      	bmi.n	d52aa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5292:	4620      	mov	r0, r4
   d5294:	f7fe ff10 	bl	d40b8 <__cxa_guard_acquire>
   d5298:	b138      	cbz	r0, d52aa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d529a:	4620      	mov	r0, r4
   d529c:	f7fe ff11 	bl	d40c2 <__cxa_guard_release>
   d52a0:	4a04      	ldr	r2, [pc, #16]	; (d52b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d52a2:	4905      	ldr	r1, [pc, #20]	; (d52b8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d52a4:	4805      	ldr	r0, [pc, #20]	; (d52bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d52a6:	f001 fcd5 	bl	d6c54 <__aeabi_atexit>
}
   d52aa:	4804      	ldr	r0, [pc, #16]	; (d52bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d52ac:	bd10      	pop	{r4, pc}
   d52ae:	bf00      	nop
   d52b0:	2003e720 	.word	0x2003e720
   d52b4:	2003e6b8 	.word	0x2003e6b8
   d52b8:	000d50b5 	.word	0x000d50b5
   d52bc:	2003e648 	.word	0x2003e648

000d52c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d52c0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d52c2:	4c0a      	ldr	r4, [pc, #40]	; (d52ec <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d52c4:	7823      	ldrb	r3, [r4, #0]
   d52c6:	f3bf 8f5b 	dmb	ish
   d52ca:	07db      	lsls	r3, r3, #31
   d52cc:	d40b      	bmi.n	d52e6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d52ce:	4620      	mov	r0, r4
   d52d0:	f7fe fef2 	bl	d40b8 <__cxa_guard_acquire>
   d52d4:	b138      	cbz	r0, d52e6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d52d6:	4620      	mov	r0, r4
   d52d8:	f7fe fef3 	bl	d40c2 <__cxa_guard_release>
   d52dc:	4a04      	ldr	r2, [pc, #16]	; (d52f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d52de:	4905      	ldr	r1, [pc, #20]	; (d52f4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d52e0:	4805      	ldr	r0, [pc, #20]	; (d52f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d52e2:	f001 fcb7 	bl	d6c54 <__aeabi_atexit>
    return &factory;
}
   d52e6:	4804      	ldr	r0, [pc, #16]	; (d52f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d52e8:	bd10      	pop	{r4, pc}
   d52ea:	bf00      	nop
   d52ec:	2003e724 	.word	0x2003e724
   d52f0:	2003e6b8 	.word	0x2003e6b8
   d52f4:	000d50b3 	.word	0x000d50b3
   d52f8:	2003e64c 	.word	0x2003e64c

000d52fc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d52fc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d52fe:	2500      	movs	r5, #0
   d5300:	4604      	mov	r4, r0
   d5302:	e9c0 5500 	strd	r5, r5, [r0]
   d5306:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d530a:	6085      	str	r5, [r0, #8]
   d530c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d530e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d5312:	f7ff f947 	bl	d45a4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5316:	f7ff ffb5 	bl	d5284 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d531a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d531c:	f7ff ffd0 	bl	d52c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5320:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5322:	6220      	str	r0, [r4, #32]
}
   d5324:	4620      	mov	r0, r4
   d5326:	bd38      	pop	{r3, r4, r5, pc}

000d5328 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5328:	b510      	push	{r4, lr}
    static LogManager mgr;
   d532a:	4c0b      	ldr	r4, [pc, #44]	; (d5358 <_ZN5spark10LogManager8instanceEv+0x30>)
   d532c:	7823      	ldrb	r3, [r4, #0]
   d532e:	f3bf 8f5b 	dmb	ish
   d5332:	07db      	lsls	r3, r3, #31
   d5334:	d40e      	bmi.n	d5354 <_ZN5spark10LogManager8instanceEv+0x2c>
   d5336:	4620      	mov	r0, r4
   d5338:	f7fe febe 	bl	d40b8 <__cxa_guard_acquire>
   d533c:	b150      	cbz	r0, d5354 <_ZN5spark10LogManager8instanceEv+0x2c>
   d533e:	4807      	ldr	r0, [pc, #28]	; (d535c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5340:	f7ff ffdc 	bl	d52fc <_ZN5spark10LogManagerC1Ev>
   d5344:	4620      	mov	r0, r4
   d5346:	f7fe febc 	bl	d40c2 <__cxa_guard_release>
   d534a:	4a05      	ldr	r2, [pc, #20]	; (d5360 <_ZN5spark10LogManager8instanceEv+0x38>)
   d534c:	4905      	ldr	r1, [pc, #20]	; (d5364 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d534e:	4803      	ldr	r0, [pc, #12]	; (d535c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5350:	f001 fc80 	bl	d6c54 <__aeabi_atexit>
    return &mgr;
}
   d5354:	4801      	ldr	r0, [pc, #4]	; (d535c <_ZN5spark10LogManager8instanceEv+0x34>)
   d5356:	bd10      	pop	{r4, pc}
   d5358:	2003e71c 	.word	0x2003e71c
   d535c:	2003e72c 	.word	0x2003e72c
   d5360:	2003e6b8 	.word	0x2003e6b8
   d5364:	000d5799 	.word	0x000d5799

000d5368 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5368:	4a02      	ldr	r2, [pc, #8]	; (d5374 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d536a:	4903      	ldr	r1, [pc, #12]	; (d5378 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d536c:	4803      	ldr	r0, [pc, #12]	; (d537c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d536e:	2300      	movs	r3, #0
   d5370:	f7ff ba88 	b.w	d4884 <log_set_callbacks>
   d5374:	000d5675 	.word	0x000d5675
   d5378:	000d5601 	.word	0x000d5601
   d537c:	000d5581 	.word	0x000d5581

000d5380 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5380:	2300      	movs	r3, #0
   d5382:	461a      	mov	r2, r3
   d5384:	4619      	mov	r1, r3
   d5386:	4618      	mov	r0, r3
   d5388:	f7ff ba7c 	b.w	d4884 <log_set_callbacks>

000d538c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d538e:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5390:	f851 3b04 	ldr.w	r3, [r1], #4
   d5394:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5396:	4604      	mov	r4, r0
   d5398:	a801      	add	r0, sp, #4
   d539a:	f7ff fb7d 	bl	d4a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d539e:	466a      	mov	r2, sp
   d53a0:	4629      	mov	r1, r5
   d53a2:	4620      	mov	r0, r4
   d53a4:	f7ff fd14 	bl	d4dd0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53a8:	a801      	add	r0, sp, #4
   d53aa:	f7ff fb7c 	bl	d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53ae:	4620      	mov	r0, r4
   d53b0:	b003      	add	sp, #12
   d53b2:	bd30      	pop	{r4, r5, pc}

000d53b4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d53b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d53b6:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53b8:	f851 3b04 	ldr.w	r3, [r1], #4
   d53bc:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d53be:	4604      	mov	r4, r0
   d53c0:	a801      	add	r0, sp, #4
   d53c2:	f7ff fb69 	bl	d4a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d53c6:	466a      	mov	r2, sp
   d53c8:	4629      	mov	r1, r5
   d53ca:	4620      	mov	r0, r4
   d53cc:	f7ff fd7c 	bl	d4ec8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d53d0:	a801      	add	r0, sp, #4
   d53d2:	f7ff fb68 	bl	d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53d6:	4620      	mov	r0, r4
   d53d8:	b003      	add	sp, #12
   d53da:	bd30      	pop	{r4, r5, pc}

000d53dc <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d53dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d53de:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53e0:	f851 3b04 	ldr.w	r3, [r1], #4
   d53e4:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d53e6:	4604      	mov	r4, r0
   d53e8:	a801      	add	r0, sp, #4
   d53ea:	f7ff fb55 	bl	d4a98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d53ee:	466a      	mov	r2, sp
   d53f0:	4629      	mov	r1, r5
   d53f2:	4620      	mov	r0, r4
   d53f4:	f7ff fd44 	bl	d4e80 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d53f8:	a801      	add	r0, sp, #4
   d53fa:	f7ff fb54 	bl	d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53fe:	4620      	mov	r0, r4
   d5400:	b003      	add	sp, #12
   d5402:	bd30      	pop	{r4, r5, pc}

000d5404 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5404:	b570      	push	{r4, r5, r6, lr}
   d5406:	b08a      	sub	sp, #40	; 0x28
   d5408:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d540a:	4601      	mov	r1, r0
   d540c:	a804      	add	r0, sp, #16
   d540e:	f7ff ffd1 	bl	d53b4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d5412:	4e14      	ldr	r6, [pc, #80]	; (d5464 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5414:	a804      	add	r0, sp, #16
   d5416:	f7ff fd6f 	bl	d4ef8 <_ZN5spark18JSONObjectIterator4nextEv>
   d541a:	b1e8      	cbz	r0, d5458 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d541c:	a904      	add	r1, sp, #16
   d541e:	4668      	mov	r0, sp
   d5420:	f7ff ffdc 	bl	d53dc <_ZNK5spark18JSONObjectIterator4nameEv>
   d5424:	9802      	ldr	r0, [sp, #8]
   d5426:	4631      	mov	r1, r6
   d5428:	f7ff fe6d 	bl	d5106 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d542c:	4604      	mov	r4, r0
   d542e:	b110      	cbz	r0, d5436 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d5430:	1e2c      	subs	r4, r5, #0
   d5432:	bf18      	it	ne
   d5434:	2401      	movne	r4, #1
   d5436:	a801      	add	r0, sp, #4
   d5438:	f7ff fb35 	bl	d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d543c:	2c00      	cmp	r4, #0
   d543e:	d0e9      	beq.n	d5414 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d5440:	a904      	add	r1, sp, #16
   d5442:	4668      	mov	r0, sp
   d5444:	f7ff ffa2 	bl	d538c <_ZNK5spark18JSONObjectIterator5valueEv>
   d5448:	4668      	mov	r0, sp
   d544a:	f7ff fcf7 	bl	d4e3c <_ZNK5spark9JSONValue5toIntEv>
   d544e:	6028      	str	r0, [r5, #0]
   d5450:	a801      	add	r0, sp, #4
   d5452:	f7ff fb28 	bl	d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5456:	e7dd      	b.n	d5414 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5458:	a805      	add	r0, sp, #20
   d545a:	f7ff fb24 	bl	d4aa6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d545e:	b00a      	add	sp, #40	; 0x28
   d5460:	bd70      	pop	{r4, r5, r6, pc}
   d5462:	bf00      	nop
   d5464:	000d7cc4 	.word	0x000d7cc4

000d5468 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5468:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d546a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d546c:	4620      	mov	r0, r4
   d546e:	4912      	ldr	r1, [pc, #72]	; (d54b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5470:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d5472:	f002 fad4 	bl	d7a1e <strcmp>
   d5476:	b948      	cbnz	r0, d548c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d5478:	f001 f9c0 	bl	d67fc <_Z16_fetch_usbserialv>
   d547c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5480:	f001 f9aa 	bl	d67d8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5484:	f001 f9ba 	bl	d67fc <_Z16_fetch_usbserialv>
}
   d5488:	b003      	add	sp, #12
   d548a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d548c:	490b      	ldr	r1, [pc, #44]	; (d54bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d548e:	4620      	mov	r0, r4
   d5490:	f002 fac5 	bl	d7a1e <strcmp>
   d5494:	b970      	cbnz	r0, d54b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5496:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d549a:	a901      	add	r1, sp, #4
   d549c:	4628      	mov	r0, r5
        int baud = 9600;
   d549e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d54a0:	f7ff ffb0 	bl	d5404 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d54a4:	f001 f902 	bl	d66ac <_Z22__fetch_global_Serial1v>
   d54a8:	9901      	ldr	r1, [sp, #4]
   d54aa:	f001 f8f9 	bl	d66a0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d54ae:	f001 f8fd 	bl	d66ac <_Z22__fetch_global_Serial1v>
   d54b2:	e7e9      	b.n	d5488 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d54b4:	2000      	movs	r0, #0
   d54b6:	e7e7      	b.n	d5488 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d54b8:	000d7cc9 	.word	0x000d7cc9
   d54bc:	000d7cd0 	.word	0x000d7cd0

000d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d54c0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d54c2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d54c6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d54c8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d54ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d54ce:	42ae      	cmp	r6, r5
   d54d0:	d005      	beq.n	d54de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d54d2:	f105 0008 	add.w	r0, r5, #8
   d54d6:	f7ff fff3 	bl	d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d54da:	3514      	adds	r5, #20
   d54dc:	e7f7      	b.n	d54ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d54de:	6820      	ldr	r0, [r4, #0]
   d54e0:	f7ff fa84 	bl	d49ec <free>
}
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd70      	pop	{r4, r5, r6, pc}

000d54e8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d54e8:	b510      	push	{r4, lr}
   d54ea:	4604      	mov	r4, r0
   d54ec:	300c      	adds	r0, #12
   d54ee:	f7ff ffe7 	bl	d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d54f2:	4620      	mov	r0, r4
   d54f4:	f7ff fabe 	bl	d4a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d54f8:	4620      	mov	r0, r4
   d54fa:	bd10      	pop	{r4, pc}

000d54fc <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d54fc:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d54fe:	4b04      	ldr	r3, [pc, #16]	; (d5510 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5500:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d5502:	f840 3b04 	str.w	r3, [r0], #4
   d5506:	f7ff ffef 	bl	d54e8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d550a:	4620      	mov	r0, r4
   d550c:	bd10      	pop	{r4, pc}
   d550e:	bf00      	nop
   d5510:	000d7c18 	.word	0x000d7c18

000d5514 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5514:	b510      	push	{r4, lr}
   d5516:	4604      	mov	r4, r0
   d5518:	f7ff fff0 	bl	d54fc <_ZN5spark16StreamLogHandlerD1Ev>
   d551c:	4620      	mov	r0, r4
   d551e:	2124      	movs	r1, #36	; 0x24
   d5520:	f001 fb9d 	bl	d6c5e <_ZdlPvj>
   d5524:	4620      	mov	r0, r4
   d5526:	bd10      	pop	{r4, pc}

000d5528 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5528:	b510      	push	{r4, lr}
   d552a:	4b03      	ldr	r3, [pc, #12]	; (d5538 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d552c:	6003      	str	r3, [r0, #0]
   d552e:	4604      	mov	r4, r0
   d5530:	f7ff ffe4 	bl	d54fc <_ZN5spark16StreamLogHandlerD1Ev>
   d5534:	4620      	mov	r0, r4
   d5536:	bd10      	pop	{r4, pc}
   d5538:	000d7d74 	.word	0x000d7d74

000d553c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d553c:	b510      	push	{r4, lr}
   d553e:	4604      	mov	r4, r0
   d5540:	f7ff fff2 	bl	d5528 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5544:	4620      	mov	r0, r4
   d5546:	2124      	movs	r1, #36	; 0x24
   d5548:	f001 fb89 	bl	d6c5e <_ZdlPvj>
   d554c:	4620      	mov	r0, r4
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d5550:	2200      	movs	r2, #0
   d5552:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5556:	b510      	push	{r4, lr}
        capacity_(0) {
   d5558:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d555a:	680c      	ldr	r4, [r1, #0]
   d555c:	6004      	str	r4, [r0, #0]
   d555e:	684c      	ldr	r4, [r1, #4]
   d5560:	6044      	str	r4, [r0, #4]
   d5562:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5564:	600a      	str	r2, [r1, #0]
   d5566:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5568:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d556a:	608a      	str	r2, [r1, #8]
}
   d556c:	bd10      	pop	{r4, pc}

000d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d556e:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5570:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5572:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5574:	6818      	ldr	r0, [r3, #0]
   d5576:	f7ff f82d 	bl	d45d4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}
	...

000d5580 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5584:	b087      	sub	sp, #28
   d5586:	4680      	mov	r8, r0
   d5588:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d558a:	4b1c      	ldr	r3, [pc, #112]	; (d55fc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d558c:	685b      	ldr	r3, [r3, #4]
   d558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5592:	4689      	mov	r9, r1
   d5594:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5596:	b96b      	cbnz	r3, d55b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d5598:	f7ff fec6 	bl	d5328 <_ZN5spark10LogManager8instanceEv>
   d559c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d559e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d55a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d55a4:	9305      	str	r3, [sp, #20]
   d55a6:	f7ff f80d 	bl	d45c4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d55aa:	7b23      	ldrb	r3, [r4, #12]
   d55ac:	b12b      	cbz	r3, d55ba <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d55ae:	a805      	add	r0, sp, #20
   d55b0:	f7ff ffdd 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d55b4:	b007      	add	sp, #28
   d55b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d55ba:	2301      	movs	r3, #1
   d55bc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d55be:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d55c2:	fa5f f989 	uxtb.w	r9, r9
   d55c6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d55ca:	45aa      	cmp	sl, r5
   d55cc:	d012      	beq.n	d55f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d55ce:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d55d2:	4631      	mov	r1, r6
   d55d4:	1d38      	adds	r0, r7, #4
   d55d6:	f7ff fe2b 	bl	d5230 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d55da:	4581      	cmp	r9, r0
   d55dc:	d3f5      	bcc.n	d55ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d55de:	683b      	ldr	r3, [r7, #0]
   d55e0:	9a03      	ldr	r2, [sp, #12]
   d55e2:	9200      	str	r2, [sp, #0]
   d55e4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d55e8:	464a      	mov	r2, r9
   d55ea:	4633      	mov	r3, r6
   d55ec:	4641      	mov	r1, r8
   d55ee:	4638      	mov	r0, r7
   d55f0:	47d8      	blx	fp
   d55f2:	e7ea      	b.n	d55ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d55f4:	2300      	movs	r3, #0
   d55f6:	7323      	strb	r3, [r4, #12]
   d55f8:	e7d9      	b.n	d55ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d55fa:	bf00      	nop
   d55fc:	e000ed00 	.word	0xe000ed00

000d5600 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5604:	469b      	mov	fp, r3
   d5606:	4b1a      	ldr	r3, [pc, #104]	; (d5670 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5608:	685b      	ldr	r3, [r3, #4]
   d560a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d560e:	4680      	mov	r8, r0
   d5610:	4689      	mov	r9, r1
   d5612:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5614:	b96b      	cbnz	r3, d5632 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d5616:	f7ff fe87 	bl	d5328 <_ZN5spark10LogManager8instanceEv>
   d561a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d561c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5620:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5622:	9301      	str	r3, [sp, #4]
   d5624:	f7fe ffce 	bl	d45c4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5628:	7b23      	ldrb	r3, [r4, #12]
   d562a:	b12b      	cbz	r3, d5638 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d562c:	a801      	add	r0, sp, #4
   d562e:	f7ff ff9e 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5632:	b003      	add	sp, #12
   d5634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5638:	2301      	movs	r3, #1
   d563a:	7323      	strb	r3, [r4, #12]
   d563c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5640:	b2f6      	uxtb	r6, r6
   d5642:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5646:	4555      	cmp	r5, sl
   d5648:	d00e      	beq.n	d5668 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d564a:	f855 7b04 	ldr.w	r7, [r5], #4
   d564e:	4659      	mov	r1, fp
   d5650:	1d38      	adds	r0, r7, #4
   d5652:	f7ff fded 	bl	d5230 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5656:	4286      	cmp	r6, r0
   d5658:	d3f5      	bcc.n	d5646 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d565a:	683b      	ldr	r3, [r7, #0]
   d565c:	464a      	mov	r2, r9
   d565e:	68db      	ldr	r3, [r3, #12]
   d5660:	4641      	mov	r1, r8
   d5662:	4638      	mov	r0, r7
   d5664:	4798      	blx	r3
   d5666:	e7ee      	b.n	d5646 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d5668:	2300      	movs	r3, #0
   d566a:	7323      	strb	r3, [r4, #12]
   d566c:	e7de      	b.n	d562c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d566e:	bf00      	nop
   d5670:	e000ed00 	.word	0xe000ed00

000d5674 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5674:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5678:	4b16      	ldr	r3, [pc, #88]	; (d56d4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d567a:	685b      	ldr	r3, [r3, #4]
   d567c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5680:	4605      	mov	r5, r0
   d5682:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d5684:	bb1b      	cbnz	r3, d56ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d5686:	f7ff fe4f 	bl	d5328 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d568a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d568e:	4604      	mov	r4, r0
   d5690:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5692:	9301      	str	r3, [sp, #4]
   d5694:	f7fe ff96 	bl	d45c4 <os_mutex_recursive_lock>
   d5698:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d569c:	2446      	movs	r4, #70	; 0x46
   d569e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d56a2:	45b0      	cmp	r8, r6
   d56a4:	d109      	bne.n	d56ba <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d56a6:	a801      	add	r0, sp, #4
   d56a8:	f7ff ff61 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d56ac:	42a5      	cmp	r5, r4
   d56ae:	bfb4      	ite	lt
   d56b0:	2000      	movlt	r0, #0
   d56b2:	2001      	movge	r0, #1
}
   d56b4:	b002      	add	sp, #8
   d56b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d56ba:	f856 0b04 	ldr.w	r0, [r6], #4
   d56be:	4639      	mov	r1, r7
   d56c0:	3004      	adds	r0, #4
   d56c2:	f7ff fdb5 	bl	d5230 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d56c6:	4284      	cmp	r4, r0
   d56c8:	bfa8      	it	ge
   d56ca:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d56cc:	e7e9      	b.n	d56a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d56ce:	2000      	movs	r0, #0
   d56d0:	e7f0      	b.n	d56b4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d56d2:	bf00      	nop
   d56d4:	e000ed00 	.word	0xe000ed00

000d56d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d56d8:	b570      	push	{r4, r5, r6, lr}
   d56da:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d56dc:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d56e0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d56e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d56e6:	4282      	cmp	r2, r0
   d56e8:	d007      	beq.n	d56fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d56ea:	4601      	mov	r1, r0
            if (*p == value) {
   d56ec:	681d      	ldr	r5, [r3, #0]
   d56ee:	f851 6b04 	ldr.w	r6, [r1], #4
   d56f2:	42ae      	cmp	r6, r5
   d56f4:	d003      	beq.n	d56fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d56f6:	4608      	mov	r0, r1
   d56f8:	e7f5      	b.n	d56e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d56fa:	2000      	movs	r0, #0
}
   d56fc:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d56fe:	1a52      	subs	r2, r2, r1
   d5700:	f002 f930 	bl	d7964 <memmove>
    --size_;
   d5704:	6863      	ldr	r3, [r4, #4]
   d5706:	3b01      	subs	r3, #1
   d5708:	6063      	str	r3, [r4, #4]
    return true;
   d570a:	2001      	movs	r0, #1
   d570c:	e7f6      	b.n	d56fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d570e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d570e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d5710:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5714:	4604      	mov	r4, r0
   d5716:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5718:	9101      	str	r1, [sp, #4]
   d571a:	9303      	str	r3, [sp, #12]
   d571c:	f7fe ff52 	bl	d45c4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5720:	a901      	add	r1, sp, #4
   d5722:	4620      	mov	r0, r4
   d5724:	f7ff ffd8 	bl	d56d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5728:	b118      	cbz	r0, d5732 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d572a:	6863      	ldr	r3, [r4, #4]
   d572c:	b90b      	cbnz	r3, d5732 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d572e:	f7ff fe27 	bl	d5380 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5732:	a803      	add	r0, sp, #12
   d5734:	f7ff ff1b 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5738:	b004      	add	sp, #16
   d573a:	bd10      	pop	{r4, pc}

000d573c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d573c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d573e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d5742:	2318      	movs	r3, #24
   d5744:	4604      	mov	r4, r0
   d5746:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d574a:	42ae      	cmp	r6, r5
   d574c:	d015      	beq.n	d577a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d574e:	f105 0110 	add.w	r1, r5, #16
   d5752:	4620      	mov	r0, r4
   d5754:	f7ff ffc0 	bl	d56d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5758:	6863      	ldr	r3, [r4, #4]
   d575a:	b90b      	cbnz	r3, d5760 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d575c:	f7ff fe10 	bl	d5380 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d5760:	69e0      	ldr	r0, [r4, #28]
   d5762:	6929      	ldr	r1, [r5, #16]
   d5764:	6803      	ldr	r3, [r0, #0]
   d5766:	68db      	ldr	r3, [r3, #12]
   d5768:	4798      	blx	r3
        if (h.stream) {
   d576a:	6969      	ldr	r1, [r5, #20]
   d576c:	b119      	cbz	r1, d5776 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d576e:	6a20      	ldr	r0, [r4, #32]
   d5770:	6803      	ldr	r3, [r0, #0]
   d5772:	68db      	ldr	r3, [r3, #12]
   d5774:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d5776:	3518      	adds	r5, #24
   d5778:	e7e7      	b.n	d574a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d577a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d577e:	2618      	movs	r6, #24
   d5780:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5784:	42ae      	cmp	r6, r5
   d5786:	d004      	beq.n	d5792 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d5788:	4628      	mov	r0, r5
   d578a:	f000 fde7 	bl	d635c <_ZN6StringD1Ev>
   d578e:	3518      	adds	r5, #24
   d5790:	e7f8      	b.n	d5784 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5792:	2300      	movs	r3, #0
   d5794:	6163      	str	r3, [r4, #20]
}
   d5796:	bd70      	pop	{r4, r5, r6, pc}

000d5798 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d5798:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d579a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d579c:	f7ff fdf0 	bl	d5380 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d57a0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d57a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d57a6:	9301      	str	r3, [sp, #4]
   d57a8:	f7fe ff0c 	bl	d45c4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d57ac:	4620      	mov	r0, r4
   d57ae:	f7ff ffc5 	bl	d573c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d57b2:	a801      	add	r0, sp, #4
   d57b4:	f7ff fedb 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d57b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d57ba:	b108      	cbz	r0, d57c0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d57bc:	f7fe fefa 	bl	d45b4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d57c0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d57c4:	2618      	movs	r6, #24
   d57c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d57ca:	42ae      	cmp	r6, r5
   d57cc:	d004      	beq.n	d57d8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d57ce:	4628      	mov	r0, r5
   d57d0:	f000 fdc4 	bl	d635c <_ZN6StringD1Ev>
   d57d4:	3518      	adds	r5, #24
   d57d6:	e7f8      	b.n	d57ca <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d57d8:	6920      	ldr	r0, [r4, #16]
   d57da:	f7ff f907 	bl	d49ec <free>
   d57de:	6820      	ldr	r0, [r4, #0]
   d57e0:	f7ff f904 	bl	d49ec <free>
}
   d57e4:	4620      	mov	r0, r4
   d57e6:	b002      	add	sp, #8
   d57e8:	bd70      	pop	{r4, r5, r6, pc}

000d57ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d57ea:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d57ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57ee:	4606      	mov	r6, r0
   d57f0:	460c      	mov	r4, r1
   d57f2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d57f4:	d927      	bls.n	d5846 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d57f6:	4290      	cmp	r0, r2
   d57f8:	d226      	bcs.n	d5848 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d57fa:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d57fe:	1a6c      	subs	r4, r5, r1
   d5800:	f1a1 0714 	sub.w	r7, r1, #20
   d5804:	4404      	add	r4, r0
        capacity_(0) {
   d5806:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d5808:	42af      	cmp	r7, r5
   d580a:	d03d      	beq.n	d5888 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d580c:	b1a4      	cbz	r4, d5838 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d580e:	682b      	ldr	r3, [r5, #0]
   d5810:	6023      	str	r3, [r4, #0]
   d5812:	88ab      	ldrh	r3, [r5, #4]
   d5814:	80a3      	strh	r3, [r4, #4]
   d5816:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d581a:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d581c:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d5820:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5822:	68ab      	ldr	r3, [r5, #8]
   d5824:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5826:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5828:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d582a:	68ea      	ldr	r2, [r5, #12]
   d582c:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d582e:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5830:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5832:	692a      	ldr	r2, [r5, #16]
   d5834:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5836:	612b      	str	r3, [r5, #16]
   d5838:	f105 0008 	add.w	r0, r5, #8
   d583c:	f7ff fe40 	bl	d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d5840:	3d14      	subs	r5, #20
   d5842:	3c14      	subs	r4, #20
   d5844:	e7e0      	b.n	d5808 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5846:	d01f      	beq.n	d5888 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5848:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d584a:	42ac      	cmp	r4, r5
   d584c:	d01c      	beq.n	d5888 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d584e:	b1a6      	cbz	r6, d587a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5850:	6823      	ldr	r3, [r4, #0]
   d5852:	6033      	str	r3, [r6, #0]
   d5854:	88a3      	ldrh	r3, [r4, #4]
   d5856:	80b3      	strh	r3, [r6, #4]
   d5858:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d585c:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d585e:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5862:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5864:	68a3      	ldr	r3, [r4, #8]
   d5866:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5868:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d586a:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d586c:	68e2      	ldr	r2, [r4, #12]
   d586e:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5870:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5872:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5874:	6922      	ldr	r2, [r4, #16]
   d5876:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5878:	6123      	str	r3, [r4, #16]
   d587a:	f104 0008 	add.w	r0, r4, #8
   d587e:	f7ff fe1f 	bl	d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5882:	3414      	adds	r4, #20
   d5884:	3614      	adds	r6, #20
   d5886:	e7e0      	b.n	d584a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d588a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d588a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d588c:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5890:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5892:	4604      	mov	r4, r0
   d5894:	460e      	mov	r6, r1
   d5896:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5898:	db0d      	blt.n	d58b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d589a:	3501      	adds	r5, #1
        if (n > 0) {
   d589c:	2d00      	cmp	r5, #0
   d589e:	6800      	ldr	r0, [r0, #0]
   d58a0:	dd04      	ble.n	d58ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d58a2:	00a9      	lsls	r1, r5, #2
   d58a4:	f7ff f8aa 	bl	d49fc <realloc>
            if (!d) {
   d58a8:	b918      	cbnz	r0, d58b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d58aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d58ac:	f7ff f89e 	bl	d49ec <free>
        T* d = nullptr;
   d58b0:	2000      	movs	r0, #0
        data_ = d;
   d58b2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d58b4:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d58b6:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d58b8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d58ba:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d58be:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d58c0:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d58c4:	1d08      	adds	r0, r1, #4
   d58c6:	f002 f84d 	bl	d7964 <memmove>
    new(p) T(std::move(value));
   d58ca:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d58ce:	6863      	ldr	r3, [r4, #4]
   d58d0:	3301      	adds	r3, #1
   d58d2:	6063      	str	r3, [r4, #4]
    return true;
   d58d4:	2001      	movs	r0, #1
   d58d6:	e7e8      	b.n	d58aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d58d8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d58d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d58da:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d58de:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d58e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d58e2:	9301      	str	r3, [sp, #4]
   d58e4:	460d      	mov	r5, r1
   d58e6:	f7fe fe6d 	bl	d45c4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d58ea:	e9d4 3100 	ldrd	r3, r1, [r4]
   d58ee:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d58f2:	4283      	cmp	r3, r0
   d58f4:	461a      	mov	r2, r3
   d58f6:	d00b      	beq.n	d5910 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d58f8:	6812      	ldr	r2, [r2, #0]
   d58fa:	42aa      	cmp	r2, r5
   d58fc:	f103 0304 	add.w	r3, r3, #4
   d5900:	d1f7      	bne.n	d58f2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5902:	a801      	add	r0, sp, #4
   d5904:	f7ff fe33 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d5908:	2500      	movs	r5, #0
}
   d590a:	4628      	mov	r0, r5
   d590c:	b003      	add	sp, #12
   d590e:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d5910:	462a      	mov	r2, r5
   d5912:	4620      	mov	r0, r4
   d5914:	f7ff ffb9 	bl	d588a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5918:	4605      	mov	r5, r0
   d591a:	2800      	cmp	r0, #0
   d591c:	d0f1      	beq.n	d5902 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d591e:	6863      	ldr	r3, [r4, #4]
   d5920:	2b01      	cmp	r3, #1
   d5922:	d101      	bne.n	d5928 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d5924:	f7ff fd20 	bl	d5368 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5928:	a801      	add	r0, sp, #4
   d592a:	f7ff fe20 	bl	d556e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d592e:	e7ec      	b.n	d590a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d5930 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5930:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5934:	4604      	mov	r4, r0
   d5936:	460d      	mov	r5, r1
   d5938:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d593a:	d914      	bls.n	d5966 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d593c:	4290      	cmp	r0, r2
   d593e:	d213      	bcs.n	d5968 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d5940:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d5944:	1a75      	subs	r5, r6, r1
   d5946:	f1a1 0710 	sub.w	r7, r1, #16
   d594a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d594c:	42b7      	cmp	r7, r6
   d594e:	d018      	beq.n	d5982 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5950:	b11c      	cbz	r4, d595a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5952:	4631      	mov	r1, r6
   d5954:	4620      	mov	r0, r4
   d5956:	f000 fd7d 	bl	d6454 <_ZN6StringC1EOS_>
                end->~T();
   d595a:	4630      	mov	r0, r6
   d595c:	f000 fcfe 	bl	d635c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5960:	3e10      	subs	r6, #16
   d5962:	3c10      	subs	r4, #16
   d5964:	e7f2      	b.n	d594c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d5966:	d00c      	beq.n	d5982 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5968:	42b5      	cmp	r5, r6
   d596a:	d00a      	beq.n	d5982 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d596c:	b11c      	cbz	r4, d5976 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d596e:	4629      	mov	r1, r5
   d5970:	4620      	mov	r0, r4
   d5972:	f000 fd6f 	bl	d6454 <_ZN6StringC1EOS_>
                p->~T();
   d5976:	4628      	mov	r0, r5
   d5978:	f000 fcf0 	bl	d635c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d597c:	3510      	adds	r5, #16
   d597e:	3410      	adds	r4, #16
   d5980:	e7f2      	b.n	d5968 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5984:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5986:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5988:	4605      	mov	r5, r0
        if (n > 0) {
   d598a:	dd11      	ble.n	d59b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d598c:	0130      	lsls	r0, r6, #4
   d598e:	f7ff f825 	bl	d49dc <malloc>
            if (!d) {
   d5992:	4604      	mov	r4, r0
   d5994:	b158      	cbz	r0, d59ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5996:	e9d5 1200 	ldrd	r1, r2, [r5]
   d599a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d599e:	f7ff ffc7 	bl	d5930 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d59a2:	6828      	ldr	r0, [r5, #0]
   d59a4:	f7ff f822 	bl	d49ec <free>
        data_ = d;
   d59a8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d59aa:	60ae      	str	r6, [r5, #8]
        return true;
   d59ac:	2001      	movs	r0, #1
    }
   d59ae:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d59b0:	2400      	movs	r4, #0
   d59b2:	e7f6      	b.n	d59a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d59b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d59b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59b8:	4691      	mov	r9, r2
   d59ba:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d59bc:	2300      	movs	r3, #0
   d59be:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d59c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d59c4:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d59c6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d59c8:	4299      	cmp	r1, r3
        capacity_(0) {
   d59ca:	e9c0 3300 	strd	r3, r3, [r0]
   d59ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d59d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d59d6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d59da:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d59dc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d59de:	dc23      	bgt.n	d5a28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d59e0:	e9d9 5700 	ldrd	r5, r7, [r9]
   d59e4:	2314      	movs	r3, #20
   d59e6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d59ea:	42af      	cmp	r7, r5
   d59ec:	d03b      	beq.n	d5a66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d59ee:	4629      	mov	r1, r5
   d59f0:	a80d      	add	r0, sp, #52	; 0x34
   d59f2:	f000 fd2f 	bl	d6454 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d59f6:	a90d      	add	r1, sp, #52	; 0x34
   d59f8:	a811      	add	r0, sp, #68	; 0x44
   d59fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d59fc:	f000 fd2a 	bl	d6454 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a00:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5a04:	4299      	cmp	r1, r3
   d5a06:	da1b      	bge.n	d5a40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d5a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d5a0c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5a10:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5a14:	4631      	mov	r1, r6
   d5a16:	f106 0010 	add.w	r0, r6, #16
   d5a1a:	f7ff ff89 	bl	d5930 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5a1e:	b9ee      	cbnz	r6, d5a5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5a22:	3301      	adds	r3, #1
   d5a24:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5a26:	e011      	b.n	d5a4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5a28:	a80a      	add	r0, sp, #40	; 0x28
   d5a2a:	f7ff ffab 	bl	d5984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5a2e:	2800      	cmp	r0, #0
   d5a30:	d1d6      	bne.n	d59e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5a32:	a80a      	add	r0, sp, #40	; 0x28
   d5a34:	f7ff f81e 	bl	d4a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5a38:	4620      	mov	r0, r4
   d5a3a:	b017      	add	sp, #92	; 0x5c
   d5a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a40:	3101      	adds	r1, #1
   d5a42:	a80a      	add	r0, sp, #40	; 0x28
   d5a44:	f7ff ff9e 	bl	d5984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5a48:	2800      	cmp	r0, #0
   d5a4a:	d1dd      	bne.n	d5a08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5a4c:	a811      	add	r0, sp, #68	; 0x44
   d5a4e:	f000 fc85 	bl	d635c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5a52:	a80d      	add	r0, sp, #52	; 0x34
   d5a54:	f000 fc82 	bl	d635c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5a58:	3514      	adds	r5, #20
   d5a5a:	e7c6      	b.n	d59ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5a5c:	a911      	add	r1, sp, #68	; 0x44
   d5a5e:	4630      	mov	r0, r6
   d5a60:	f000 fcf8 	bl	d6454 <_ZN6StringC1EOS_>
   d5a64:	e7dc      	b.n	d5a20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d5a66:	2600      	movs	r6, #0
   d5a68:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5a6c:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5a6e:	4637      	mov	r7, r6
   d5a70:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5a74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5a78:	429e      	cmp	r6, r3
   d5a7a:	f280 8097 	bge.w	d5bac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5a7e:	0133      	lsls	r3, r6, #4
   d5a80:	58d3      	ldr	r3, [r2, r3]
   d5a82:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5a84:	b90b      	cbnz	r3, d5a8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d5a86:	3601      	adds	r6, #1
   d5a88:	e7f4      	b.n	d5a74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5a8a:	fb0a f306 	mul.w	r3, sl, r6
   d5a8e:	9709      	str	r7, [sp, #36]	; 0x24
   d5a90:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5a92:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5a94:	a909      	add	r1, sp, #36	; 0x24
   d5a96:	a808      	add	r0, sp, #32
   d5a98:	f7ff fb0e 	bl	d50b8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5a9c:	4683      	mov	fp, r0
   d5a9e:	2800      	cmp	r0, #0
   d5aa0:	d0f1      	beq.n	d5a86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5aa2:	4601      	mov	r1, r0
   d5aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d5aa6:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5aaa:	f10d 031f 	add.w	r3, sp, #31
   d5aae:	4628      	mov	r0, r5
   d5ab0:	f7ff fb80 	bl	d51b4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5ab4:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5ab8:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5aba:	f1b8 0f00 	cmp.w	r8, #0
   d5abe:	d166      	bne.n	d5b8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5ac0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5ac4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5ac8:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5ad0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5ad4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5ad8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5adc:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5ae0:	4293      	cmp	r3, r2
   d5ae2:	db1a      	blt.n	d5b1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5ae4:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5ae8:	f1bb 0f00 	cmp.w	fp, #0
   d5aec:	dd4a      	ble.n	d5b84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5aee:	fb0a f00b 	mul.w	r0, sl, fp
   d5af2:	f7fe ff73 	bl	d49dc <malloc>
            if (!d) {
   d5af6:	9004      	str	r0, [sp, #16]
   d5af8:	2800      	cmp	r0, #0
   d5afa:	d045      	beq.n	d5b88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d5afc:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5b00:	fb0a 1202 	mla	r2, sl, r2, r1
   d5b04:	f7ff fe71 	bl	d57ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5b08:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d5b0a:	6828      	ldr	r0, [r5, #0]
   d5b0c:	9304      	str	r3, [sp, #16]
   d5b0e:	f7fe ff6d 	bl	d49ec <free>
        data_ = d;
   d5b12:	9b04      	ldr	r3, [sp, #16]
   d5b14:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5b16:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d5b1a:	9b01      	ldr	r3, [sp, #4]
   d5b1c:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5b20:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5b22:	fb0a f303 	mul.w	r3, sl, r3
   d5b26:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d5b2a:	f101 0014 	add.w	r0, r1, #20
   d5b2e:	fb0a b202 	mla	r2, sl, r2, fp
   d5b32:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5b34:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5b36:	f7ff fe58 	bl	d57ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5b3a:	9904      	ldr	r1, [sp, #16]
   d5b3c:	b1a9      	cbz	r1, d5b6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d5b3e:	9b05      	ldr	r3, [sp, #20]
   d5b40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5b42:	f84b 2003 	str.w	r2, [fp, r3]
   d5b46:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5b4a:	808b      	strh	r3, [r1, #4]
   d5b4c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5b50:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5b52:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5b56:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5b58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5b5a:	608b      	str	r3, [r1, #8]
   d5b5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5b5e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5b60:	60cb      	str	r3, [r1, #12]
   d5b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5b64:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5b66:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b68:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5b6a:	686b      	ldr	r3, [r5, #4]
   d5b6c:	3301      	adds	r3, #1
   d5b6e:	606b      	str	r3, [r5, #4]
   d5b70:	a813      	add	r0, sp, #76	; 0x4c
   d5b72:	f7ff fca5 	bl	d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b76:	f1b8 0f00 	cmp.w	r8, #0
   d5b7a:	d008      	beq.n	d5b8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5b7c:	a80d      	add	r0, sp, #52	; 0x34
   d5b7e:	f7ff fc9f 	bl	d54c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5b82:	e756      	b.n	d5a32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5b84:	4643      	mov	r3, r8
   d5b86:	e7c0      	b.n	d5b0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b88:	f04f 0801 	mov.w	r8, #1
   d5b8c:	e7f0      	b.n	d5b70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5b8e:	9b01      	ldr	r3, [sp, #4]
   d5b90:	682d      	ldr	r5, [r5, #0]
   d5b92:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5b96:	9b08      	ldr	r3, [sp, #32]
   d5b98:	781b      	ldrb	r3, [r3, #0]
   d5b9a:	b92b      	cbnz	r3, d5ba8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5b9c:	f8d9 3000 	ldr.w	r3, [r9]
   d5ba0:	9a02      	ldr	r2, [sp, #8]
   d5ba2:	4413      	add	r3, r2
   d5ba4:	7c1b      	ldrb	r3, [r3, #16]
   d5ba6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5ba8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5baa:	e773      	b.n	d5a94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bac:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5bae:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bb0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5bb2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bb4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5bb6:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5bba:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bbc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5bbe:	60a2      	str	r2, [r4, #8]
   d5bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5bc2:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bc4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5bc6:	60e2      	str	r2, [r4, #12]
   d5bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5bca:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bcc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5bce:	6122      	str	r2, [r4, #16]
   d5bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5bd2:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5bd4:	9b03      	ldr	r3, [sp, #12]
   d5bd6:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5bd8:	6162      	str	r2, [r4, #20]
   d5bda:	7623      	strb	r3, [r4, #24]
   d5bdc:	e7ce      	b.n	d5b7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5be0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5be2:	4605      	mov	r5, r0
   d5be4:	4b09      	ldr	r3, [pc, #36]	; (d5c0c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5be6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5bea:	4604      	mov	r4, r0
   d5bec:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5bee:	a801      	add	r0, sp, #4
   d5bf0:	4611      	mov	r1, r2
   d5bf2:	f7fe fc52 	bl	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5bf6:	aa01      	add	r2, sp, #4
   d5bf8:	4631      	mov	r1, r6
   d5bfa:	4628      	mov	r0, r5
   d5bfc:	f7ff feda 	bl	d59b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c00:	a801      	add	r0, sp, #4
   d5c02:	f7fe fc09 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5c06:	4620      	mov	r0, r4
   d5c08:	b004      	add	sp, #16
   d5c0a:	bd70      	pop	{r4, r5, r6, pc}
   d5c0c:	000d7c18 	.word	0x000d7c18

000d5c10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c12:	460f      	mov	r7, r1
   d5c14:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5c16:	4926      	ldr	r1, [pc, #152]	; (d5cb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5c18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5c1a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5c1c:	4616      	mov	r6, r2
   d5c1e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5c20:	f001 fefd 	bl	d7a1e <strcmp>
   d5c24:	bb00      	cbnz	r0, d5c68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5c26:	b1e4      	cbz	r4, d5c62 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5c28:	4629      	mov	r1, r5
   d5c2a:	4668      	mov	r0, sp
   d5c2c:	f7ff fc90 	bl	d5550 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5c30:	4920      	ldr	r1, [pc, #128]	; (d5cb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5c32:	2024      	movs	r0, #36	; 0x24
   d5c34:	f001 f815 	bl	d6c62 <_ZnwjRKSt9nothrow_t>
   d5c38:	4605      	mov	r5, r0
   d5c3a:	b170      	cbz	r0, d5c5a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5c3c:	4669      	mov	r1, sp
   d5c3e:	a803      	add	r0, sp, #12
   d5c40:	f7fe fc2b 	bl	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c44:	aa03      	add	r2, sp, #12
   d5c46:	4631      	mov	r1, r6
   d5c48:	4628      	mov	r0, r5
   d5c4a:	f7ff ffc9 	bl	d5be0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c4e:	a803      	add	r0, sp, #12
   d5c50:	f7fe fbe2 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5c54:	4b18      	ldr	r3, [pc, #96]	; (d5cb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5c56:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5c58:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5c5a:	4668      	mov	r0, sp
   d5c5c:	f7fe fbdc 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5c60:	462c      	mov	r4, r5
}
   d5c62:	4620      	mov	r0, r4
   d5c64:	b007      	add	sp, #28
   d5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5c68:	4914      	ldr	r1, [pc, #80]	; (d5cbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5c6a:	4638      	mov	r0, r7
   d5c6c:	f001 fed7 	bl	d7a1e <strcmp>
   d5c70:	b9e0      	cbnz	r0, d5cac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5c72:	2c00      	cmp	r4, #0
   d5c74:	d0f5      	beq.n	d5c62 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5c76:	4629      	mov	r1, r5
   d5c78:	4668      	mov	r0, sp
   d5c7a:	f7ff fc69 	bl	d5550 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5c7e:	490d      	ldr	r1, [pc, #52]	; (d5cb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5c80:	2024      	movs	r0, #36	; 0x24
   d5c82:	f000 ffee 	bl	d6c62 <_ZnwjRKSt9nothrow_t>
   d5c86:	4605      	mov	r5, r0
   d5c88:	2800      	cmp	r0, #0
   d5c8a:	d0e6      	beq.n	d5c5a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5c8c:	4669      	mov	r1, sp
   d5c8e:	a803      	add	r0, sp, #12
   d5c90:	f7fe fc03 	bl	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c94:	aa03      	add	r2, sp, #12
   d5c96:	4631      	mov	r1, r6
   d5c98:	4628      	mov	r0, r5
   d5c9a:	f7ff ffa1 	bl	d5be0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c9e:	a803      	add	r0, sp, #12
   d5ca0:	f7fe fbba 	bl	d4418 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5ca4:	4b06      	ldr	r3, [pc, #24]	; (d5cc0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5ca6:	602b      	str	r3, [r5, #0]
   d5ca8:	622c      	str	r4, [r5, #32]
}
   d5caa:	e7d6      	b.n	d5c5a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5cac:	2400      	movs	r4, #0
   d5cae:	e7d8      	b.n	d5c62 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5cb0:	000d7cd8 	.word	0x000d7cd8
   d5cb4:	000d7ea8 	.word	0x000d7ea8
   d5cb8:	000d7d74 	.word	0x000d7d74
   d5cbc:	000d7cdc 	.word	0x000d7cdc
   d5cc0:	000d7d5c 	.word	0x000d7d5c

000d5cc4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5cc4:	4b01      	ldr	r3, [pc, #4]	; (d5ccc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5cc6:	4a02      	ldr	r2, [pc, #8]	; (d5cd0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5cc8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5cca:	4770      	bx	lr
   d5ccc:	2003e728 	.word	0x2003e728
   d5cd0:	000d7ced 	.word	0x000d7ced

000d5cd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5cd8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5cda:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5cde:	4604      	mov	r4, r0
   d5ce0:	460e      	mov	r6, r1
   d5ce2:	4617      	mov	r7, r2
   d5ce4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5ce6:	f000 fd89 	bl	d67fc <_Z16_fetch_usbserialv>
   d5cea:	4581      	cmp	r9, r0
   d5cec:	d04c      	beq.n	d5d88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5cee:	792b      	ldrb	r3, [r5, #4]
   d5cf0:	0719      	lsls	r1, r3, #28
   d5cf2:	d504      	bpl.n	d5cfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5cf4:	696a      	ldr	r2, [r5, #20]
   d5cf6:	4954      	ldr	r1, [pc, #336]	; (d5e48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	f7ff fa4c 	bl	d5196 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5cfe:	f1b8 0f00 	cmp.w	r8, #0
   d5d02:	d00d      	beq.n	d5d20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5d04:	215b      	movs	r1, #91	; 0x5b
   d5d06:	4620      	mov	r0, r4
   d5d08:	f7ff fa39 	bl	d517e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5d0c:	4641      	mov	r1, r8
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7ff fa26 	bl	d5160 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5d14:	6823      	ldr	r3, [r4, #0]
   d5d16:	494d      	ldr	r1, [pc, #308]	; (d5e4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5d18:	68db      	ldr	r3, [r3, #12]
   d5d1a:	2202      	movs	r2, #2
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	4798      	blx	r3
    if (attr.has_file) {
   d5d20:	792b      	ldrb	r3, [r5, #4]
   d5d22:	07da      	lsls	r2, r3, #31
   d5d24:	d523      	bpl.n	d5d6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5d26:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5d2a:	212f      	movs	r1, #47	; 0x2f
   d5d2c:	4640      	mov	r0, r8
   d5d2e:	f001 fea2 	bl	d7a76 <strrchr>
    if (s1) {
   d5d32:	b108      	cbz	r0, d5d38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5d34:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5d38:	4641      	mov	r1, r8
   d5d3a:	4620      	mov	r0, r4
   d5d3c:	f7ff fa10 	bl	d5160 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5d40:	792b      	ldrb	r3, [r5, #4]
   d5d42:	079b      	lsls	r3, r3, #30
   d5d44:	d508      	bpl.n	d5d58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5d46:	213a      	movs	r1, #58	; 0x3a
   d5d48:	4620      	mov	r0, r4
   d5d4a:	f7ff fa18 	bl	d517e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5d4e:	68ea      	ldr	r2, [r5, #12]
   d5d50:	493f      	ldr	r1, [pc, #252]	; (d5e50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5d52:	4620      	mov	r0, r4
   d5d54:	f7ff fa1f 	bl	d5196 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5d58:	792a      	ldrb	r2, [r5, #4]
   d5d5a:	6823      	ldr	r3, [r4, #0]
   d5d5c:	f012 0f04 	tst.w	r2, #4
   d5d60:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5d62:	bf14      	ite	ne
   d5d64:	493b      	ldrne	r1, [pc, #236]	; (d5e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5d66:	493c      	ldreq	r1, [pc, #240]	; (d5e58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5d68:	2202      	movs	r2, #2
            write(": ", 2);
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	4798      	blx	r3
    if (attr.has_function) {
   d5d6e:	792b      	ldrb	r3, [r5, #4]
   d5d70:	0758      	lsls	r0, r3, #29
   d5d72:	d51d      	bpl.n	d5db0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5d74:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5d76:	460b      	mov	r3, r1
   d5d78:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5d7a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5d7e:	b160      	cbz	r0, d5d9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5d80:	2820      	cmp	r0, #32
   d5d82:	d108      	bne.n	d5d96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5d84:	4619      	mov	r1, r3
   d5d86:	e7f7      	b.n	d5d78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5d88:	4834      	ldr	r0, [pc, #208]	; (d5e5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5d8a:	f000 f966 	bl	d605a <_ZN5spark12NetworkClass9listeningEv>
   d5d8e:	2800      	cmp	r0, #0
   d5d90:	d0ad      	beq.n	d5cee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5d96:	2828      	cmp	r0, #40	; 0x28
   d5d98:	d1ee      	bne.n	d5d78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5d9a:	6823      	ldr	r3, [r4, #0]
   d5d9c:	1a52      	subs	r2, r2, r1
   d5d9e:	68db      	ldr	r3, [r3, #12]
   d5da0:	4620      	mov	r0, r4
   d5da2:	4798      	blx	r3
        write("(): ", 4);
   d5da4:	6823      	ldr	r3, [r4, #0]
   d5da6:	492e      	ldr	r1, [pc, #184]	; (d5e60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5da8:	68db      	ldr	r3, [r3, #12]
   d5daa:	2204      	movs	r2, #4
   d5dac:	4620      	mov	r0, r4
   d5dae:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5db0:	2100      	movs	r1, #0
   d5db2:	4638      	mov	r0, r7
   d5db4:	f7fe fd5e 	bl	d4874 <log_level_name>
   d5db8:	4601      	mov	r1, r0
    write(s);
   d5dba:	4620      	mov	r0, r4
   d5dbc:	f7ff f9d0 	bl	d5160 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5dc0:	6823      	ldr	r3, [r4, #0]
   d5dc2:	4925      	ldr	r1, [pc, #148]	; (d5e58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5dc4:	68db      	ldr	r3, [r3, #12]
   d5dc6:	2202      	movs	r2, #2
   d5dc8:	4620      	mov	r0, r4
   d5dca:	4798      	blx	r3
    if (msg) {
   d5dcc:	b11e      	cbz	r6, d5dd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5dce:	4631      	mov	r1, r6
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	f7ff f9c5 	bl	d5160 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5dd6:	792b      	ldrb	r3, [r5, #4]
   d5dd8:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5ddc:	d02c      	beq.n	d5e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5dde:	6823      	ldr	r3, [r4, #0]
   d5de0:	4920      	ldr	r1, [pc, #128]	; (d5e64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5de2:	68db      	ldr	r3, [r3, #12]
   d5de4:	2202      	movs	r2, #2
   d5de6:	4620      	mov	r0, r4
   d5de8:	4798      	blx	r3
        if (attr.has_code) {
   d5dea:	792b      	ldrb	r3, [r5, #4]
   d5dec:	06d9      	lsls	r1, r3, #27
   d5dee:	d50a      	bpl.n	d5e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5df0:	6823      	ldr	r3, [r4, #0]
   d5df2:	491d      	ldr	r1, [pc, #116]	; (d5e68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5df4:	68db      	ldr	r3, [r3, #12]
   d5df6:	2207      	movs	r2, #7
   d5df8:	4620      	mov	r0, r4
   d5dfa:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5dfc:	69aa      	ldr	r2, [r5, #24]
   d5dfe:	491b      	ldr	r1, [pc, #108]	; (d5e6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5e00:	4620      	mov	r0, r4
   d5e02:	f7ff f9c8 	bl	d5196 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5e06:	792b      	ldrb	r3, [r5, #4]
   d5e08:	069a      	lsls	r2, r3, #26
   d5e0a:	d511      	bpl.n	d5e30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5e0c:	06db      	lsls	r3, r3, #27
   d5e0e:	d505      	bpl.n	d5e1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5e10:	6823      	ldr	r3, [r4, #0]
   d5e12:	4910      	ldr	r1, [pc, #64]	; (d5e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5e14:	68db      	ldr	r3, [r3, #12]
   d5e16:	2202      	movs	r2, #2
   d5e18:	4620      	mov	r0, r4
   d5e1a:	4798      	blx	r3
            write("details = ", 10);
   d5e1c:	6823      	ldr	r3, [r4, #0]
   d5e1e:	4914      	ldr	r1, [pc, #80]	; (d5e70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5e20:	68db      	ldr	r3, [r3, #12]
   d5e22:	4620      	mov	r0, r4
   d5e24:	220a      	movs	r2, #10
   d5e26:	4798      	blx	r3
            write(attr.details);
   d5e28:	69e9      	ldr	r1, [r5, #28]
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff f998 	bl	d5160 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5e30:	215d      	movs	r1, #93	; 0x5d
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff f9a3 	bl	d517e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5e38:	6823      	ldr	r3, [r4, #0]
   d5e3a:	490e      	ldr	r1, [pc, #56]	; (d5e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5e3c:	68db      	ldr	r3, [r3, #12]
   d5e3e:	4620      	mov	r0, r4
   d5e40:	2202      	movs	r2, #2
}
   d5e42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5e46:	4718      	bx	r3
   d5e48:	000d7cf1 	.word	0x000d7cf1
   d5e4c:	000d7cf8 	.word	0x000d7cf8
   d5e50:	000d7cb8 	.word	0x000d7cb8
   d5e54:	000d7cfb 	.word	0x000d7cfb
   d5e58:	000d7d00 	.word	0x000d7d00
   d5e5c:	2003e754 	.word	0x2003e754
   d5e60:	000d7cfe 	.word	0x000d7cfe
   d5e64:	000d7d03 	.word	0x000d7d03
   d5e68:	000d7d06 	.word	0x000d7d06
   d5e6c:	000d7d0e 	.word	0x000d7d0e
   d5e70:	000d7d11 	.word	0x000d7d11
   d5e74:	000d7d1c 	.word	0x000d7d1c

000d5e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e7c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5e7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5e84:	4605      	mov	r5, r0
   d5e86:	460f      	mov	r7, r1
   d5e88:	4690      	mov	r8, r2
   d5e8a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5e8c:	f000 fcb6 	bl	d67fc <_Z16_fetch_usbserialv>
   d5e90:	4581      	cmp	r9, r0
   d5e92:	d105      	bne.n	d5ea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5e94:	4849      	ldr	r0, [pc, #292]	; (d5fbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5e96:	f000 f8e0 	bl	d605a <_ZN5spark12NetworkClass9listeningEv>
   d5e9a:	2800      	cmp	r0, #0
   d5e9c:	f040 808a 	bne.w	d5fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5ea0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5ea2:	4a47      	ldr	r2, [pc, #284]	; (d5fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5ea4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5ea6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5eaa:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5eac:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5eae:	f88d 9008 	strb.w	r9, [sp, #8]
   d5eb2:	f7ff f84a 	bl	d4f4a <_ZN5spark10JSONWriter11beginObjectEv>
   d5eb6:	4649      	mov	r1, r9
   d5eb8:	4640      	mov	r0, r8
   d5eba:	f7fe fcdb 	bl	d4874 <log_level_name>
    json.name("l", 1).value(s);
   d5ebe:	4941      	ldr	r1, [pc, #260]	; (d5fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5ec0:	4680      	mov	r8, r0
   d5ec2:	2201      	movs	r2, #1
   d5ec4:	a801      	add	r0, sp, #4
   d5ec6:	f7ff f8c9 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5eca:	4641      	mov	r1, r8
   d5ecc:	f7ff f93a 	bl	d5144 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5ed0:	b13f      	cbz	r7, d5ee2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5ed2:	493d      	ldr	r1, [pc, #244]	; (d5fc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5ed4:	2201      	movs	r2, #1
   d5ed6:	a801      	add	r0, sp, #4
   d5ed8:	f7ff f8c0 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5edc:	4639      	mov	r1, r7
   d5ede:	f7ff f931 	bl	d5144 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5ee2:	b13e      	cbz	r6, d5ef4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5ee4:	4939      	ldr	r1, [pc, #228]	; (d5fcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5ee6:	2201      	movs	r2, #1
   d5ee8:	a801      	add	r0, sp, #4
   d5eea:	f7ff f8b7 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5eee:	4631      	mov	r1, r6
   d5ef0:	f7ff f928 	bl	d5144 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5ef4:	7923      	ldrb	r3, [r4, #4]
   d5ef6:	07df      	lsls	r7, r3, #31
   d5ef8:	d50e      	bpl.n	d5f18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5efa:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5efc:	212f      	movs	r1, #47	; 0x2f
   d5efe:	4630      	mov	r0, r6
   d5f00:	f001 fdb9 	bl	d7a76 <strrchr>
    if (s1) {
   d5f04:	b100      	cbz	r0, d5f08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5f06:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5f08:	4931      	ldr	r1, [pc, #196]	; (d5fd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5f0a:	2201      	movs	r2, #1
   d5f0c:	a801      	add	r0, sp, #4
   d5f0e:	f7ff f8a5 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f12:	4631      	mov	r1, r6
   d5f14:	f7ff f916 	bl	d5144 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5f18:	7923      	ldrb	r3, [r4, #4]
   d5f1a:	079e      	lsls	r6, r3, #30
   d5f1c:	d507      	bpl.n	d5f2e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5f1e:	492d      	ldr	r1, [pc, #180]	; (d5fd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5f20:	2202      	movs	r2, #2
   d5f22:	a801      	add	r0, sp, #4
   d5f24:	f7ff f89a 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f28:	68e1      	ldr	r1, [r4, #12]
   d5f2a:	f7ff f81b 	bl	d4f64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5f2e:	7923      	ldrb	r3, [r4, #4]
   d5f30:	0758      	lsls	r0, r3, #29
   d5f32:	d514      	bpl.n	d5f5e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5f34:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5f36:	4633      	mov	r3, r6
   d5f38:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5f3e:	b12a      	cbz	r2, d5f4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5f40:	2a20      	cmp	r2, #32
   d5f42:	d101      	bne.n	d5f48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5f44:	461e      	mov	r6, r3
   d5f46:	e7f7      	b.n	d5f38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5f48:	2a28      	cmp	r2, #40	; 0x28
   d5f4a:	d1f5      	bne.n	d5f38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5f4c:	4922      	ldr	r1, [pc, #136]	; (d5fd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5f4e:	2202      	movs	r2, #2
   d5f50:	a801      	add	r0, sp, #4
   d5f52:	f7ff f883 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f56:	1bba      	subs	r2, r7, r6
   d5f58:	4631      	mov	r1, r6
   d5f5a:	f7ff f88f 	bl	d507c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5f5e:	7923      	ldrb	r3, [r4, #4]
   d5f60:	0719      	lsls	r1, r3, #28
   d5f62:	d507      	bpl.n	d5f74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5f64:	491d      	ldr	r1, [pc, #116]	; (d5fdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5f66:	2201      	movs	r2, #1
   d5f68:	a801      	add	r0, sp, #4
   d5f6a:	f7ff f877 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f6e:	6961      	ldr	r1, [r4, #20]
   d5f70:	f7ff f80a 	bl	d4f88 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5f74:	7923      	ldrb	r3, [r4, #4]
   d5f76:	06da      	lsls	r2, r3, #27
   d5f78:	d508      	bpl.n	d5f8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5f7a:	2204      	movs	r2, #4
   d5f7c:	4918      	ldr	r1, [pc, #96]	; (d5fe0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5f7e:	eb0d 0002 	add.w	r0, sp, r2
   d5f82:	f7ff f86b 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f86:	69a1      	ldr	r1, [r4, #24]
   d5f88:	f7fe ffec 	bl	d4f64 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5f8c:	7923      	ldrb	r3, [r4, #4]
   d5f8e:	069b      	lsls	r3, r3, #26
   d5f90:	d507      	bpl.n	d5fa2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5f92:	4914      	ldr	r1, [pc, #80]	; (d5fe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5f94:	2206      	movs	r2, #6
   d5f96:	a801      	add	r0, sp, #4
   d5f98:	f7ff f860 	bl	d505c <_ZN5spark10JSONWriter4nameEPKcj>
   d5f9c:	69e1      	ldr	r1, [r4, #28]
   d5f9e:	f7ff f8d1 	bl	d5144 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5fa2:	a801      	add	r0, sp, #4
   d5fa4:	f7fe ffbb 	bl	d4f1e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5fa8:	6a28      	ldr	r0, [r5, #32]
   d5faa:	490f      	ldr	r1, [pc, #60]	; (d5fe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5fac:	6803      	ldr	r3, [r0, #0]
   d5fae:	2202      	movs	r2, #2
   d5fb0:	68db      	ldr	r3, [r3, #12]
   d5fb2:	4798      	blx	r3
}
   d5fb4:	b005      	add	sp, #20
   d5fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5fba:	bf00      	nop
   d5fbc:	2003e754 	.word	0x2003e754
   d5fc0:	000d7d44 	.word	0x000d7d44
   d5fc4:	000d7cce 	.word	0x000d7cce
   d5fc8:	000d7d1f 	.word	0x000d7d1f
   d5fcc:	000d7d21 	.word	0x000d7d21
   d5fd0:	000d7d23 	.word	0x000d7d23
   d5fd4:	000d7d25 	.word	0x000d7d25
   d5fd8:	000d7d28 	.word	0x000d7d28
   d5fdc:	000d7d2b 	.word	0x000d7d2b
   d5fe0:	000d7d2d 	.word	0x000d7d2d
   d5fe4:	000d7d32 	.word	0x000d7d32
   d5fe8:	000d7d1c 	.word	0x000d7d1c

000d5fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5fec:	2300      	movs	r3, #0
   d5fee:	6840      	ldr	r0, [r0, #4]
   d5ff0:	461a      	mov	r2, r3
   d5ff2:	f7fe bc93 	b.w	d491c <network_connect>

000d5ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ff6:	6840      	ldr	r0, [r0, #4]
   d5ff8:	2200      	movs	r2, #0
   d5ffa:	2102      	movs	r1, #2
   d5ffc:	f7fe bc9e 	b.w	d493c <network_disconnect>

000d6000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6000:	2200      	movs	r2, #0
   d6002:	6840      	ldr	r0, [r0, #4]
   d6004:	4611      	mov	r1, r2
   d6006:	f7fe bc91 	b.w	d492c <network_connecting>

000d600a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d600a:	2200      	movs	r2, #0
   d600c:	6840      	ldr	r0, [r0, #4]
   d600e:	4611      	mov	r1, r2
   d6010:	f7fe bc9c 	b.w	d494c <network_ready>

000d6014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6014:	2300      	movs	r3, #0
   d6016:	6840      	ldr	r0, [r0, #4]
   d6018:	461a      	mov	r2, r3
   d601a:	4619      	mov	r1, r3
   d601c:	f7fe bc9e 	b.w	d495c <network_on>

000d6020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6020:	2300      	movs	r3, #0
   d6022:	6840      	ldr	r0, [r0, #4]
   d6024:	461a      	mov	r2, r3
   d6026:	4619      	mov	r1, r3
   d6028:	f7fe bca0 	b.w	d496c <network_off>

000d602c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d602c:	6840      	ldr	r0, [r0, #4]
   d602e:	2100      	movs	r1, #0
   d6030:	f7fe bcc4 	b.w	d49bc <network_is_on>

000d6034 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6034:	6840      	ldr	r0, [r0, #4]
   d6036:	2100      	movs	r1, #0
   d6038:	f7fe bcc8 	b.w	d49cc <network_is_off>

000d603c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d603c:	6840      	ldr	r0, [r0, #4]
   d603e:	2200      	movs	r2, #0
   d6040:	f081 0101 	eor.w	r1, r1, #1
   d6044:	f7fe bc9a 	b.w	d497c <network_listen>

000d6048 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6048:	6840      	ldr	r0, [r0, #4]
   d604a:	2200      	movs	r2, #0
   d604c:	f7fe bca6 	b.w	d499c <network_set_listen_timeout>

000d6050 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6050:	2200      	movs	r2, #0
   d6052:	6840      	ldr	r0, [r0, #4]
   d6054:	4611      	mov	r1, r2
   d6056:	f7fe bca9 	b.w	d49ac <network_get_listen_timeout>

000d605a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d605a:	2200      	movs	r2, #0
   d605c:	6840      	ldr	r0, [r0, #4]
   d605e:	4611      	mov	r1, r2
   d6060:	f7fe bc94 	b.w	d498c <network_listening>

000d6064 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6068:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d606a:	b095      	sub	sp, #84	; 0x54
   d606c:	4616      	mov	r6, r2
   d606e:	460d      	mov	r5, r1
   d6070:	4607      	mov	r7, r0
    IPAddress addr;
   d6072:	f7fe fdef 	bl	d4c54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6076:	4621      	mov	r1, r4
   d6078:	2218      	movs	r2, #24
   d607a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d607c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d607e:	f001 fc8b 	bl	d7998 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6082:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6084:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6088:	4621      	mov	r1, r4
   d608a:	466b      	mov	r3, sp
   d608c:	aa0c      	add	r2, sp, #48	; 0x30
   d608e:	4630      	mov	r0, r6
   d6090:	f7fe fb30 	bl	d46f4 <netdb_getaddrinfo>
    if (!r) {
   d6094:	4604      	mov	r4, r0
   d6096:	2800      	cmp	r0, #0
   d6098:	d14c      	bne.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d609a:	4602      	mov	r2, r0
   d609c:	2101      	movs	r1, #1
   d609e:	6868      	ldr	r0, [r5, #4]
   d60a0:	f7fe fc54 	bl	d494c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d60a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60a8:	4622      	mov	r2, r4
   d60aa:	6868      	ldr	r0, [r5, #4]
   d60ac:	f7fe fc4e 	bl	d494c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d60b2:	4681      	mov	r9, r0
        bool ok = false;
   d60b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60b6:	2e00      	cmp	r6, #0
   d60b8:	d03c      	beq.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d60ba:	2900      	cmp	r1, #0
   d60bc:	d13a      	bne.n	d6134 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d60be:	6873      	ldr	r3, [r6, #4]
   d60c0:	2b02      	cmp	r3, #2
   d60c2:	d003      	beq.n	d60cc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d60c4:	2b0a      	cmp	r3, #10
   d60c6:	d011      	beq.n	d60ec <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60c8:	69f6      	ldr	r6, [r6, #28]
   d60ca:	e7f4      	b.n	d60b6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d60cc:	f1b8 0f00 	cmp.w	r8, #0
   d60d0:	d00a      	beq.n	d60e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d60d2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d60d4:	a806      	add	r0, sp, #24
   d60d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d60d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d60da:	f7fe fde9 	bl	d4cb0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d60de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60e0:	1d3c      	adds	r4, r7, #4
   d60e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60e4:	682b      	ldr	r3, [r5, #0]
   d60e6:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d60e8:	4641      	mov	r1, r8
   d60ea:	e7ed      	b.n	d60c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d60ec:	f1b9 0f00 	cmp.w	r9, #0
   d60f0:	d101      	bne.n	d60f6 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d60f2:	4649      	mov	r1, r9
   d60f4:	e7e8      	b.n	d60c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d60f6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d60f8:	2210      	movs	r2, #16
   d60fa:	a801      	add	r0, sp, #4
   d60fc:	f001 fc4c 	bl	d7998 <memset>
                    a.v = 6;
   d6100:	2306      	movs	r3, #6
   d6102:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6106:	ad01      	add	r5, sp, #4
   d6108:	f104 0308 	add.w	r3, r4, #8
   d610c:	3418      	adds	r4, #24
   d610e:	6818      	ldr	r0, [r3, #0]
   d6110:	6859      	ldr	r1, [r3, #4]
   d6112:	462a      	mov	r2, r5
   d6114:	c203      	stmia	r2!, {r0, r1}
   d6116:	3308      	adds	r3, #8
   d6118:	42a3      	cmp	r3, r4
   d611a:	4615      	mov	r5, r2
   d611c:	d1f7      	bne.n	d610e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d611e:	a901      	add	r1, sp, #4
   d6120:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6122:	ad07      	add	r5, sp, #28
   d6124:	f7fe fda4 	bl	d4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d612a:	1d3c      	adds	r4, r7, #4
   d612c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d612e:	682b      	ldr	r3, [r5, #0]
   d6130:	7023      	strb	r3, [r4, #0]
   d6132:	e7de      	b.n	d60f2 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6134:	9800      	ldr	r0, [sp, #0]
   d6136:	f7fe fad5 	bl	d46e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d613a:	4638      	mov	r0, r7
   d613c:	b015      	add	sp, #84	; 0x54
   d613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6144 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6144:	4b02      	ldr	r3, [pc, #8]	; (d6150 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6146:	4a03      	ldr	r2, [pc, #12]	; (d6154 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6148:	601a      	str	r2, [r3, #0]
   d614a:	2200      	movs	r2, #0
   d614c:	605a      	str	r2, [r3, #4]

} // spark
   d614e:	4770      	bx	lr
   d6150:	2003e754 	.word	0x2003e754
   d6154:	000d7dbc 	.word	0x000d7dbc

000d6158 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d615a:	4606      	mov	r6, r0
   d615c:	460d      	mov	r5, r1
  size_t n = 0;
   d615e:	188f      	adds	r7, r1, r2
   d6160:	2400      	movs	r4, #0
  while (size--) {
   d6162:	42bd      	cmp	r5, r7
   d6164:	d00c      	beq.n	d6180 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6166:	6833      	ldr	r3, [r6, #0]
   d6168:	f815 1b01 	ldrb.w	r1, [r5], #1
   d616c:	689b      	ldr	r3, [r3, #8]
   d616e:	4630      	mov	r0, r6
   d6170:	4798      	blx	r3
     if (chunk>=0)
   d6172:	1e03      	subs	r3, r0, #0
   d6174:	db01      	blt.n	d617a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6176:	441c      	add	r4, r3
  while (size--) {
   d6178:	e7f3      	b.n	d6162 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d617a:	2c00      	cmp	r4, #0
   d617c:	bf08      	it	eq
   d617e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6180:	4620      	mov	r0, r4
   d6182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6184 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6184:	b513      	push	{r0, r1, r4, lr}
   d6186:	4604      	mov	r4, r0
    }
   d6188:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d618a:	b159      	cbz	r1, d61a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d618c:	9101      	str	r1, [sp, #4]
   d618e:	f001 fc58 	bl	d7a42 <strlen>
   d6192:	6823      	ldr	r3, [r4, #0]
   d6194:	9901      	ldr	r1, [sp, #4]
   d6196:	68db      	ldr	r3, [r3, #12]
   d6198:	4602      	mov	r2, r0
   d619a:	4620      	mov	r0, r4
    }
   d619c:	b002      	add	sp, #8
   d619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d61a2:	4718      	bx	r3
    }
   d61a4:	b002      	add	sp, #8
   d61a6:	bd10      	pop	{r4, pc}

000d61a8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d61a8:	6803      	ldr	r3, [r0, #0]
   d61aa:	689b      	ldr	r3, [r3, #8]
   d61ac:	4718      	bx	r3

000d61ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d61b0:	210d      	movs	r1, #13
{
   d61b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d61b4:	f7ff fff8 	bl	d61a8 <_ZN5Print5printEc>
  n += print('\n');
   d61b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d61ba:	4604      	mov	r4, r0
  n += print('\n');
   d61bc:	4628      	mov	r0, r5
   d61be:	f7ff fff3 	bl	d61a8 <_ZN5Print5printEc>
  return n;
}
   d61c2:	4420      	add	r0, r4
   d61c4:	bd38      	pop	{r3, r4, r5, pc}

000d61c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61c6:	b530      	push	{r4, r5, lr}
   d61c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61ca:	2300      	movs	r3, #0
   d61cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61d0:	2a01      	cmp	r2, #1
   d61d2:	bf98      	it	ls
   d61d4:	220a      	movls	r2, #10
   d61d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d61d8:	460d      	mov	r5, r1
   d61da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d61de:	fb01 5312 	mls	r3, r1, r2, r5
   d61e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61e6:	2b09      	cmp	r3, #9
   d61e8:	bf94      	ite	ls
   d61ea:	3330      	addls	r3, #48	; 0x30
   d61ec:	3337      	addhi	r3, #55	; 0x37
   d61ee:	b2db      	uxtb	r3, r3
  } while(n);
   d61f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d61f6:	d9ef      	bls.n	d61d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d61f8:	4621      	mov	r1, r4
   d61fa:	f7ff ffc3 	bl	d6184 <_ZN5Print5writeEPKc>
}
   d61fe:	b00b      	add	sp, #44	; 0x2c
   d6200:	bd30      	pop	{r4, r5, pc}

000d6202 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6206:	b086      	sub	sp, #24
   d6208:	af00      	add	r7, sp, #0
   d620a:	4605      	mov	r5, r0
   d620c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d620e:	1d38      	adds	r0, r7, #4
   d6210:	2114      	movs	r1, #20
{
   d6212:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6214:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6216:	f7fe fbf9 	bl	d4a0c <vsnprintf>

    if (n<bufsize)
   d621a:	2813      	cmp	r0, #19
   d621c:	d80e      	bhi.n	d623c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d621e:	1d39      	adds	r1, r7, #4
   d6220:	4628      	mov	r0, r5
   d6222:	f7ff ffaf 	bl	d6184 <_ZN5Print5writeEPKc>
   d6226:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6228:	b11e      	cbz	r6, d6232 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d622a:	4628      	mov	r0, r5
   d622c:	f7ff ffbf 	bl	d61ae <_ZN5Print7printlnEv>
   d6230:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6232:	4620      	mov	r0, r4
   d6234:	3718      	adds	r7, #24
   d6236:	46bd      	mov	sp, r7
   d6238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d623c:	f100 0308 	add.w	r3, r0, #8
   d6240:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6244:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6246:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d624a:	4622      	mov	r2, r4
   d624c:	1c41      	adds	r1, r0, #1
   d624e:	683b      	ldr	r3, [r7, #0]
   d6250:	4668      	mov	r0, sp
   d6252:	f7fe fbdb 	bl	d4a0c <vsnprintf>
  return write(str);
   d6256:	4669      	mov	r1, sp
   d6258:	4628      	mov	r0, r5
   d625a:	f7ff ff93 	bl	d6184 <_ZN5Print5writeEPKc>
   d625e:	4604      	mov	r4, r0
   d6260:	46c5      	mov	sp, r8
   d6262:	e7e1      	b.n	d6228 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6264 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6264:	b510      	push	{r4, lr}
   d6266:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6268:	f7fe fbfb 	bl	d4a62 <_ZNSt14_Function_baseD1Ev>
   d626c:	4620      	mov	r0, r4
   d626e:	bd10      	pop	{r4, pc}

000d6270 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6270:	4803      	ldr	r0, [pc, #12]	; (d6280 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6272:	4a04      	ldr	r2, [pc, #16]	; (d6284 <_GLOBAL__sub_I_RGB+0x14>)
   d6274:	4904      	ldr	r1, [pc, #16]	; (d6288 <_GLOBAL__sub_I_RGB+0x18>)
   d6276:	2300      	movs	r3, #0
   d6278:	6083      	str	r3, [r0, #8]
   d627a:	f000 bceb 	b.w	d6c54 <__aeabi_atexit>
   d627e:	bf00      	nop
   d6280:	2003e75c 	.word	0x2003e75c
   d6284:	2003e6b8 	.word	0x2003e6b8
   d6288:	000d6265 	.word	0x000d6265

000d628c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d628c:	b510      	push	{r4, lr}
   d628e:	4604      	mov	r4, r0
   d6290:	4608      	mov	r0, r1
{
    _spi = spi;
   d6292:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6294:	f7fe fa36 	bl	d4704 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6298:	2300      	movs	r3, #0
   d629a:	6063      	str	r3, [r4, #4]
}
   d629c:	4620      	mov	r0, r4
   d629e:	bd10      	pop	{r4, pc}

000d62a0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d62a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d62a4:	ec57 6b10 	vmov	r6, r7, d0
   d62a8:	4680      	mov	r8, r0
   d62aa:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d62ac:	ee10 0a10 	vmov	r0, s0
   d62b0:	2200      	movs	r2, #0
   d62b2:	2300      	movs	r3, #0
   d62b4:	4639      	mov	r1, r7
   d62b6:	f001 f907 	bl	d74c8 <__aeabi_dcmplt>
   d62ba:	b128      	cbz	r0, d62c8 <_Z4dtoadhPc+0x28>
        val = -val;
   d62bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d62c0:	461f      	mov	r7, r3
        *sout++ = '-';
   d62c2:	232d      	movs	r3, #45	; 0x2d
   d62c4:	f804 3b01 	strb.w	r3, [r4], #1
   d62c8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d62ca:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d62ce:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d62d0:	b2d9      	uxtb	r1, r3
   d62d2:	4588      	cmp	r8, r1
   d62d4:	d903      	bls.n	d62de <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d62d6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d62da:	3301      	adds	r3, #1
   d62dc:	e7f8      	b.n	d62d0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d62de:	4648      	mov	r0, r9
   d62e0:	f000 fe16 	bl	d6f10 <__aeabi_i2d>
   d62e4:	4632      	mov	r2, r6
   d62e6:	463b      	mov	r3, r7
   d62e8:	f000 fe7c 	bl	d6fe4 <__aeabi_dmul>
   d62ec:	4606      	mov	r6, r0
   d62ee:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d62f0:	f001 f99a 	bl	d7628 <__aeabi_d2ulz>
   d62f4:	4605      	mov	r5, r0
   d62f6:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d62f8:	f000 fe3e 	bl	d6f78 <__aeabi_ul2d>
   d62fc:	4602      	mov	r2, r0
   d62fe:	460b      	mov	r3, r1
   d6300:	4630      	mov	r0, r6
   d6302:	4639      	mov	r1, r7
   d6304:	f000 fcb6 	bl	d6c74 <__aeabi_dsub>
   d6308:	4b13      	ldr	r3, [pc, #76]	; (d6358 <_Z4dtoadhPc+0xb8>)
   d630a:	2200      	movs	r2, #0
   d630c:	f001 f8f0 	bl	d74f0 <__aeabi_dcmpge>
   d6310:	b110      	cbz	r0, d6318 <_Z4dtoadhPc+0x78>
        fixed++;
   d6312:	3501      	adds	r5, #1
   d6314:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6318:	464a      	mov	r2, r9
   d631a:	4628      	mov	r0, r5
   d631c:	17d3      	asrs	r3, r2, #31
   d631e:	4651      	mov	r1, sl
   d6320:	f001 f96a 	bl	d75f8 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d6324:	2301      	movs	r3, #1
   d6326:	4615      	mov	r5, r2
   d6328:	4621      	mov	r1, r4
   d632a:	220a      	movs	r2, #10
   d632c:	f000 fadf 	bl	d68ee <ultoa>
    if (prec) {
   d6330:	f1b8 0f00 	cmp.w	r8, #0
   d6334:	d00d      	beq.n	d6352 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d6336:	4620      	mov	r0, r4
   d6338:	f001 fb83 	bl	d7a42 <strlen>
        *sout++ = '.';
   d633c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d633e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d6340:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d6342:	220a      	movs	r2, #10
   d6344:	4643      	mov	r3, r8
   d6346:	4628      	mov	r0, r5
   d6348:	3101      	adds	r1, #1
    }
}
   d634a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d634e:	f000 bace 	b.w	d68ee <ultoa>
}
   d6352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6356:	bf00      	nop
   d6358:	3fe00000 	.word	0x3fe00000

000d635c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d635c:	b510      	push	{r4, lr}
   d635e:	4604      	mov	r4, r0
{
	free(buffer);
   d6360:	6800      	ldr	r0, [r0, #0]
   d6362:	f7fe fb43 	bl	d49ec <free>
}
   d6366:	4620      	mov	r0, r4
   d6368:	bd10      	pop	{r4, pc}

000d636a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d636a:	b510      	push	{r4, lr}
   d636c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d636e:	6800      	ldr	r0, [r0, #0]
   d6370:	b108      	cbz	r0, d6376 <_ZN6String10invalidateEv+0xc>
   d6372:	f7fe fb3b 	bl	d49ec <free>
	buffer = NULL;
   d6376:	2300      	movs	r3, #0
	capacity = len = 0;
   d6378:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d637c:	6023      	str	r3, [r4, #0]
}
   d637e:	bd10      	pop	{r4, pc}

000d6380 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6380:	b538      	push	{r3, r4, r5, lr}
   d6382:	4604      	mov	r4, r0
   d6384:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6386:	6800      	ldr	r0, [r0, #0]
   d6388:	3101      	adds	r1, #1
   d638a:	f7fe fb37 	bl	d49fc <realloc>
	if (newbuffer) {
   d638e:	b110      	cbz	r0, d6396 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6390:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6394:	2001      	movs	r0, #1
	}
	return 0;
}
   d6396:	bd38      	pop	{r3, r4, r5, pc}

000d6398 <_ZN6String7reserveEj>:
{
   d6398:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d639a:	6803      	ldr	r3, [r0, #0]
{
   d639c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d639e:	b123      	cbz	r3, d63aa <_ZN6String7reserveEj+0x12>
   d63a0:	6843      	ldr	r3, [r0, #4]
   d63a2:	428b      	cmp	r3, r1
   d63a4:	d301      	bcc.n	d63aa <_ZN6String7reserveEj+0x12>
   d63a6:	2001      	movs	r0, #1
}
   d63a8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d63aa:	4620      	mov	r0, r4
   d63ac:	f7ff ffe8 	bl	d6380 <_ZN6String12changeBufferEj>
   d63b0:	2800      	cmp	r0, #0
   d63b2:	d0f9      	beq.n	d63a8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d63b4:	68a3      	ldr	r3, [r4, #8]
   d63b6:	2b00      	cmp	r3, #0
   d63b8:	d1f5      	bne.n	d63a6 <_ZN6String7reserveEj+0xe>
   d63ba:	6822      	ldr	r2, [r4, #0]
   d63bc:	7013      	strb	r3, [r2, #0]
   d63be:	e7f2      	b.n	d63a6 <_ZN6String7reserveEj+0xe>

000d63c0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d63c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d63c2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d63c4:	4611      	mov	r1, r2
   d63c6:	9201      	str	r2, [sp, #4]
{
   d63c8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d63ca:	f7ff ffe5 	bl	d6398 <_ZN6String7reserveEj>
   d63ce:	9a01      	ldr	r2, [sp, #4]
   d63d0:	b928      	cbnz	r0, d63de <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d63d2:	4620      	mov	r0, r4
   d63d4:	f7ff ffc9 	bl	d636a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d63d8:	4620      	mov	r0, r4
   d63da:	b003      	add	sp, #12
   d63dc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d63de:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d63e0:	4629      	mov	r1, r5
   d63e2:	6820      	ldr	r0, [r4, #0]
   d63e4:	f001 fab0 	bl	d7948 <memcpy>
	buffer[len] = 0;
   d63e8:	6822      	ldr	r2, [r4, #0]
   d63ea:	68a3      	ldr	r3, [r4, #8]
   d63ec:	2100      	movs	r1, #0
   d63ee:	54d1      	strb	r1, [r2, r3]
	return *this;
   d63f0:	e7f2      	b.n	d63d8 <_ZN6String4copyEPKcj+0x18>

000d63f2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d63f2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d63f4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d63f6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d63fa:	4604      	mov	r4, r0
	len = 0;
   d63fc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d63fe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6400:	b141      	cbz	r1, d6414 <_ZN6StringC1EPKc+0x22>
   d6402:	4608      	mov	r0, r1
   d6404:	9101      	str	r1, [sp, #4]
   d6406:	f001 fb1c 	bl	d7a42 <strlen>
   d640a:	9901      	ldr	r1, [sp, #4]
   d640c:	4602      	mov	r2, r0
   d640e:	4620      	mov	r0, r4
   d6410:	f7ff ffd6 	bl	d63c0 <_ZN6String4copyEPKcj>
}
   d6414:	4620      	mov	r0, r4
   d6416:	b002      	add	sp, #8
   d6418:	bd10      	pop	{r4, pc}

000d641a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d641a:	b538      	push	{r3, r4, r5, lr}
   d641c:	4605      	mov	r5, r0
	if (buffer) {
   d641e:	6800      	ldr	r0, [r0, #0]
{
   d6420:	460c      	mov	r4, r1
	if (buffer) {
   d6422:	b168      	cbz	r0, d6440 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6424:	686a      	ldr	r2, [r5, #4]
   d6426:	688b      	ldr	r3, [r1, #8]
   d6428:	429a      	cmp	r2, r3
   d642a:	d307      	bcc.n	d643c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d642c:	6809      	ldr	r1, [r1, #0]
   d642e:	f001 fb00 	bl	d7a32 <strcpy>
			len = rhs.len;
   d6432:	68a3      	ldr	r3, [r4, #8]
   d6434:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6436:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6438:	60a3      	str	r3, [r4, #8]
}
   d643a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d643c:	f7fe fad6 	bl	d49ec <free>
	buffer = rhs.buffer;
   d6440:	6823      	ldr	r3, [r4, #0]
   d6442:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6444:	6863      	ldr	r3, [r4, #4]
   d6446:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6448:	68a3      	ldr	r3, [r4, #8]
   d644a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d644c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d644e:	e9c4 3300 	strd	r3, r3, [r4]
   d6452:	e7f1      	b.n	d6438 <_ZN6String4moveERS_+0x1e>

000d6454 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d6454:	b510      	push	{r4, lr}
	buffer = NULL;
   d6456:	2300      	movs	r3, #0
	capacity = 0;
   d6458:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d645c:	4604      	mov	r4, r0
	len = 0;
   d645e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6460:	7303      	strb	r3, [r0, #12]
	move(rval);
   d6462:	f7ff ffda 	bl	d641a <_ZN6String4moveERS_>
}
   d6466:	4620      	mov	r0, r4
   d6468:	bd10      	pop	{r4, pc}

000d646a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d646a:	4288      	cmp	r0, r1
{
   d646c:	b510      	push	{r4, lr}
   d646e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6470:	d005      	beq.n	d647e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6472:	680b      	ldr	r3, [r1, #0]
   d6474:	b12b      	cbz	r3, d6482 <_ZN6StringaSERKS_+0x18>
   d6476:	688a      	ldr	r2, [r1, #8]
   d6478:	4619      	mov	r1, r3
   d647a:	f7ff ffa1 	bl	d63c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d647e:	4620      	mov	r0, r4
   d6480:	bd10      	pop	{r4, pc}
	else invalidate();
   d6482:	f7ff ff72 	bl	d636a <_ZN6String10invalidateEv>
   d6486:	e7fa      	b.n	d647e <_ZN6StringaSERKS_+0x14>

000d6488 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6488:	b510      	push	{r4, lr}
	buffer = NULL;
   d648a:	2300      	movs	r3, #0
String::String(const String &value)
   d648c:	4604      	mov	r4, r0
	capacity = 0;
   d648e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6492:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6494:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6496:	f7ff ffe8 	bl	d646a <_ZN6StringaSERKS_>
}
   d649a:	4620      	mov	r0, r4
   d649c:	bd10      	pop	{r4, pc}

000d649e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d649e:	b513      	push	{r0, r1, r4, lr}
   d64a0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d64a2:	b159      	cbz	r1, d64bc <_ZN6StringaSEPKc+0x1e>
   d64a4:	4608      	mov	r0, r1
   d64a6:	9101      	str	r1, [sp, #4]
   d64a8:	f001 facb 	bl	d7a42 <strlen>
   d64ac:	9901      	ldr	r1, [sp, #4]
   d64ae:	4602      	mov	r2, r0
   d64b0:	4620      	mov	r0, r4
   d64b2:	f7ff ff85 	bl	d63c0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d64b6:	4620      	mov	r0, r4
   d64b8:	b002      	add	sp, #8
   d64ba:	bd10      	pop	{r4, pc}
	else invalidate();
   d64bc:	f7ff ff55 	bl	d636a <_ZN6String10invalidateEv>
   d64c0:	e7f9      	b.n	d64b6 <_ZN6StringaSEPKc+0x18>

000d64c2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d64c2:	b510      	push	{r4, lr}
   d64c4:	4604      	mov	r4, r0
   d64c6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d64c8:	2300      	movs	r3, #0
	capacity = 0;
   d64ca:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d64ce:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d64d0:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d64d2:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d64d4:	a901      	add	r1, sp, #4
   d64d6:	f000 fa35 	bl	d6944 <itoa>
	*this = buf;
   d64da:	a901      	add	r1, sp, #4
   d64dc:	4620      	mov	r0, r4
   d64de:	f7ff ffde 	bl	d649e <_ZN6StringaSEPKc>
}
   d64e2:	4620      	mov	r0, r4
   d64e4:	b00a      	add	sp, #40	; 0x28
   d64e6:	bd10      	pop	{r4, pc}

000d64e8 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d64e8:	b510      	push	{r4, lr}
   d64ea:	4604      	mov	r4, r0
   d64ec:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d64ee:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d64f0:	4608      	mov	r0, r1
	capacity = 0;
   d64f2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d64f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d64f8:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d64fa:	a901      	add	r1, sp, #4
   d64fc:	b2c0      	uxtb	r0, r0
   d64fe:	f7ff fecf 	bl	d62a0 <_Z4dtoadhPc>
        *this = buf;
   d6502:	a901      	add	r1, sp, #4
   d6504:	4620      	mov	r0, r4
   d6506:	f7ff ffca 	bl	d649e <_ZN6StringaSEPKc>
}
   d650a:	4620      	mov	r0, r4
   d650c:	b00a      	add	sp, #40	; 0x28
   d650e:	bd10      	pop	{r4, pc}

000d6510 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6510:	b570      	push	{r4, r5, r6, lr}
   d6512:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6514:	460e      	mov	r6, r1
   d6516:	b909      	cbnz	r1, d651c <_ZN6String6concatEPKcj+0xc>
   d6518:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d651a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d651c:	b16a      	cbz	r2, d653a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d651e:	6884      	ldr	r4, [r0, #8]
   d6520:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6522:	4621      	mov	r1, r4
   d6524:	f7ff ff38 	bl	d6398 <_ZN6String7reserveEj>
   d6528:	2800      	cmp	r0, #0
   d652a:	d0f5      	beq.n	d6518 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d652c:	6828      	ldr	r0, [r5, #0]
   d652e:	68ab      	ldr	r3, [r5, #8]
   d6530:	4631      	mov	r1, r6
   d6532:	4418      	add	r0, r3
   d6534:	f001 fa7d 	bl	d7a32 <strcpy>
	len = newlen;
   d6538:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d653a:	2001      	movs	r0, #1
   d653c:	e7ed      	b.n	d651a <_ZN6String6concatEPKcj+0xa>

000d653e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d653e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6540:	688a      	ldr	r2, [r1, #8]
   d6542:	6809      	ldr	r1, [r1, #0]
{
   d6544:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6546:	f7ff ffe3 	bl	d6510 <_ZN6String6concatEPKcj>
   d654a:	b910      	cbnz	r0, d6552 <_ZplRK15StringSumHelperRK6String+0x14>
   d654c:	4620      	mov	r0, r4
   d654e:	f7ff ff0c 	bl	d636a <_ZN6String10invalidateEv>
	return a;
}
   d6552:	4620      	mov	r0, r4
   d6554:	bd10      	pop	{r4, pc}

000d6556 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6556:	b513      	push	{r0, r1, r4, lr}
   d6558:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d655a:	b929      	cbnz	r1, d6568 <_ZplRK15StringSumHelperPKc+0x12>
   d655c:	4620      	mov	r0, r4
   d655e:	f7ff ff04 	bl	d636a <_ZN6String10invalidateEv>
	return a;
}
   d6562:	4620      	mov	r0, r4
   d6564:	b002      	add	sp, #8
   d6566:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6568:	4608      	mov	r0, r1
   d656a:	9101      	str	r1, [sp, #4]
   d656c:	f001 fa69 	bl	d7a42 <strlen>
   d6570:	9901      	ldr	r1, [sp, #4]
   d6572:	4602      	mov	r2, r0
   d6574:	4620      	mov	r0, r4
   d6576:	f7ff ffcb 	bl	d6510 <_ZN6String6concatEPKcj>
   d657a:	2800      	cmp	r0, #0
   d657c:	d0ee      	beq.n	d655c <_ZplRK15StringSumHelperPKc+0x6>
   d657e:	e7f0      	b.n	d6562 <_ZplRK15StringSumHelperPKc+0xc>

000d6580 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6580:	b510      	push	{r4, lr}
   d6582:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6584:	6800      	ldr	r0, [r0, #0]
   d6586:	b118      	cbz	r0, d6590 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6588:	f7fe fa30 	bl	d49ec <free>
            wakeupSource_ = nullptr;
   d658c:	2300      	movs	r3, #0
   d658e:	6023      	str	r3, [r4, #0]
        }
    }
   d6590:	bd10      	pop	{r4, pc}

000d6592 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6592:	b510      	push	{r4, lr}
   d6594:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6596:	f7ff fff3 	bl	d6580 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d659a:	4620      	mov	r0, r4
   d659c:	bd10      	pop	{r4, pc}
	...

000d65a0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d65a0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d65a2:	4b09      	ldr	r3, [pc, #36]	; (d65c8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d65a4:	4c09      	ldr	r4, [pc, #36]	; (d65cc <_GLOBAL__sub_I_System+0x2c>)
   d65a6:	2202      	movs	r2, #2
   d65a8:	2000      	movs	r0, #0
   d65aa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d65ac:	4b08      	ldr	r3, [pc, #32]	; (d65d0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d65ae:	6020      	str	r0, [r4, #0]
   d65b0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d65b2:	71a0      	strb	r0, [r4, #6]
   d65b4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d65b6:	f7fe f96d 	bl	d4894 <set_system_mode>
SystemClass System;
   d65ba:	4620      	mov	r0, r4
   d65bc:	4a05      	ldr	r2, [pc, #20]	; (d65d4 <_GLOBAL__sub_I_System+0x34>)
   d65be:	4906      	ldr	r1, [pc, #24]	; (d65d8 <_GLOBAL__sub_I_System+0x38>)
   d65c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d65c4:	f000 bb46 	b.w	d6c54 <__aeabi_atexit>
   d65c8:	2003e778 	.word	0x2003e778
   d65cc:	2003e76c 	.word	0x2003e76c
   d65d0:	ffff0000 	.word	0xffff0000
   d65d4:	2003e6b8 	.word	0x2003e6b8
   d65d8:	000d6593 	.word	0x000d6593

000d65dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d65dc:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d65de:	681a      	ldr	r2, [r3, #0]
   d65e0:	4b02      	ldr	r3, [pc, #8]	; (d65ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d65e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d65e4:	4770      	bx	lr
   d65e6:	bf00      	nop
   d65e8:	2003e650 	.word	0x2003e650
   d65ec:	2003e77c 	.word	0x2003e77c

000d65f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d65f0:	4770      	bx	lr

000d65f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65f2:	7441      	strb	r1, [r0, #17]
}
   d65f4:	4770      	bx	lr

000d65f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d65f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d65f8:	7c00      	ldrb	r0, [r0, #16]
   d65fa:	f7fe f8d3 	bl	d47a4 <hal_usart_available_data_for_write>
}
   d65fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6602:	bd08      	pop	{r3, pc}

000d6604 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6604:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6606:	7c00      	ldrb	r0, [r0, #16]
   d6608:	f7fe f8a4 	bl	d4754 <hal_usart_available>
}
   d660c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6610:	bd08      	pop	{r3, pc}

000d6612 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6612:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6614:	7c00      	ldrb	r0, [r0, #16]
   d6616:	f7fe f8ad 	bl	d4774 <hal_usart_peek>
}
   d661a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d661e:	bd08      	pop	{r3, pc}

000d6620 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6620:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6622:	7c00      	ldrb	r0, [r0, #16]
   d6624:	f7fe f89e 	bl	d4764 <hal_usart_read>
}
   d6628:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d662c:	bd08      	pop	{r3, pc}

000d662e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d662e:	7c00      	ldrb	r0, [r0, #16]
   d6630:	f7fe b8a8 	b.w	d4784 <hal_usart_flush>

000d6634 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6634:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6636:	7c45      	ldrb	r5, [r0, #17]
{
   d6638:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d663a:	b12d      	cbz	r5, d6648 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d663c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d663e:	b003      	add	sp, #12
   d6640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6644:	f7fe b87e 	b.w	d4744 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6648:	7c00      	ldrb	r0, [r0, #16]
   d664a:	9101      	str	r1, [sp, #4]
   d664c:	f7fe f8aa 	bl	d47a4 <hal_usart_available_data_for_write>
   d6650:	2800      	cmp	r0, #0
   d6652:	9901      	ldr	r1, [sp, #4]
   d6654:	dcf2      	bgt.n	d663c <_ZN11USARTSerial5writeEh+0x8>
}
   d6656:	4628      	mov	r0, r5
   d6658:	b003      	add	sp, #12
   d665a:	bd30      	pop	{r4, r5, pc}

000d665c <_ZN11USARTSerialD0Ev>:
   d665c:	b510      	push	{r4, lr}
   d665e:	2114      	movs	r1, #20
   d6660:	4604      	mov	r4, r0
   d6662:	f000 fafc 	bl	d6c5e <_ZdlPvj>
   d6666:	4620      	mov	r0, r4
   d6668:	bd10      	pop	{r4, pc}
	...

000d666c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d666c:	b510      	push	{r4, lr}
   d666e:	f04f 0c00 	mov.w	ip, #0
   d6672:	4604      	mov	r4, r0
   d6674:	4608      	mov	r0, r1
   d6676:	4611      	mov	r1, r2
   d6678:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d667c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6680:	4a04      	ldr	r2, [pc, #16]	; (d6694 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6682:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6684:	2201      	movs	r2, #1
  _serial = serial;
   d6686:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6688:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d668a:	461a      	mov	r2, r3
   d668c:	f7fe f84a 	bl	d4724 <hal_usart_init>
}
   d6690:	4620      	mov	r0, r4
   d6692:	bd10      	pop	{r4, pc}
   d6694:	000d7e14 	.word	0x000d7e14

000d6698 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6698:	7c00      	ldrb	r0, [r0, #16]
   d669a:	2300      	movs	r3, #0
   d669c:	f7fe b88a 	b.w	d47b4 <hal_usart_begin_config>

000d66a0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d66a0:	2200      	movs	r2, #0
   d66a2:	f7ff bff9 	b.w	d6698 <_ZN11USARTSerial5beginEmm>

000d66a6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d66a6:	7c00      	ldrb	r0, [r0, #16]
   d66a8:	f7fe b844 	b.w	d4734 <hal_usart_end>

000d66ac <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d66ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d66ae:	4c1b      	ldr	r4, [pc, #108]	; (d671c <_Z22__fetch_global_Serial1v+0x70>)
   d66b0:	6826      	ldr	r6, [r4, #0]
   d66b2:	b94e      	cbnz	r6, d66c8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d66b4:	2084      	movs	r0, #132	; 0x84
   d66b6:	f7fd fcee 	bl	d4096 <_Znwj>
   d66ba:	4605      	mov	r5, r0
   d66bc:	b118      	cbz	r0, d66c6 <_Z22__fetch_global_Serial1v+0x1a>
   d66be:	2284      	movs	r2, #132	; 0x84
   d66c0:	4631      	mov	r1, r6
   d66c2:	f001 f969 	bl	d7998 <memset>
   d66c6:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d66c8:	4d15      	ldr	r5, [pc, #84]	; (d6720 <_Z22__fetch_global_Serial1v+0x74>)
   d66ca:	682f      	ldr	r7, [r5, #0]
   d66cc:	b94f      	cbnz	r7, d66e2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d66ce:	2084      	movs	r0, #132	; 0x84
   d66d0:	f7fd fce1 	bl	d4096 <_Znwj>
   d66d4:	4606      	mov	r6, r0
   d66d6:	b118      	cbz	r0, d66e0 <_Z22__fetch_global_Serial1v+0x34>
   d66d8:	2284      	movs	r2, #132	; 0x84
   d66da:	4639      	mov	r1, r7
   d66dc:	f001 f95c 	bl	d7998 <memset>
   d66e0:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d66e2:	4e10      	ldr	r6, [pc, #64]	; (d6724 <_Z22__fetch_global_Serial1v+0x78>)
   d66e4:	7831      	ldrb	r1, [r6, #0]
   d66e6:	f3bf 8f5b 	dmb	ish
   d66ea:	f011 0101 	ands.w	r1, r1, #1
   d66ee:	d112      	bne.n	d6716 <_Z22__fetch_global_Serial1v+0x6a>
   d66f0:	4630      	mov	r0, r6
   d66f2:	9101      	str	r1, [sp, #4]
   d66f4:	f7fd fce0 	bl	d40b8 <__cxa_guard_acquire>
   d66f8:	9901      	ldr	r1, [sp, #4]
   d66fa:	b160      	cbz	r0, d6716 <_Z22__fetch_global_Serial1v+0x6a>
   d66fc:	6822      	ldr	r2, [r4, #0]
   d66fe:	682b      	ldr	r3, [r5, #0]
   d6700:	4809      	ldr	r0, [pc, #36]	; (d6728 <_Z22__fetch_global_Serial1v+0x7c>)
   d6702:	f7ff ffb3 	bl	d666c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6706:	4630      	mov	r0, r6
   d6708:	f7fd fcdb 	bl	d40c2 <__cxa_guard_release>
   d670c:	4a07      	ldr	r2, [pc, #28]	; (d672c <_Z22__fetch_global_Serial1v+0x80>)
   d670e:	4908      	ldr	r1, [pc, #32]	; (d6730 <_Z22__fetch_global_Serial1v+0x84>)
   d6710:	4805      	ldr	r0, [pc, #20]	; (d6728 <_Z22__fetch_global_Serial1v+0x7c>)
   d6712:	f000 fa9f 	bl	d6c54 <__aeabi_atexit>
#endif
	return serial1;
}
   d6716:	4804      	ldr	r0, [pc, #16]	; (d6728 <_Z22__fetch_global_Serial1v+0x7c>)
   d6718:	b003      	add	sp, #12
   d671a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d671c:	2003e784 	.word	0x2003e784
   d6720:	2003e788 	.word	0x2003e788
   d6724:	2003e780 	.word	0x2003e780
   d6728:	2003e78c 	.word	0x2003e78c
   d672c:	2003e6b8 	.word	0x2003e6b8
   d6730:	000d65f1 	.word	0x000d65f1

000d6734 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6734:	7441      	strb	r1, [r0, #17]
}
   d6736:	4770      	bx	lr

000d6738 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6738:	4770      	bx	lr

000d673a <_ZN9USBSerial4readEv>:
{
   d673a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d673c:	2100      	movs	r1, #0
   d673e:	7c00      	ldrb	r0, [r0, #16]
   d6740:	f7fe f868 	bl	d4814 <HAL_USB_USART_Receive_Data>
}
   d6744:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6748:	bd08      	pop	{r3, pc}

000d674a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d674a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d674c:	2101      	movs	r1, #1
   d674e:	7c00      	ldrb	r0, [r0, #16]
   d6750:	f7fe f860 	bl	d4814 <HAL_USB_USART_Receive_Data>
}
   d6754:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6758:	bd08      	pop	{r3, pc}

000d675a <_ZN9USBSerial17availableForWriteEv>:
{
   d675a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d675c:	7c00      	ldrb	r0, [r0, #16]
   d675e:	f7fe f851 	bl	d4804 <HAL_USB_USART_Available_Data_For_Write>
}
   d6762:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6766:	bd08      	pop	{r3, pc}

000d6768 <_ZN9USBSerial9availableEv>:
{
   d6768:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d676a:	7c00      	ldrb	r0, [r0, #16]
   d676c:	f7fe f842 	bl	d47f4 <HAL_USB_USART_Available_Data>
}
   d6770:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6774:	bd08      	pop	{r3, pc}

000d6776 <_ZN9USBSerial5writeEh>:
{
   d6776:	b513      	push	{r0, r1, r4, lr}
   d6778:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d677a:	7c00      	ldrb	r0, [r0, #16]
{
   d677c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d677e:	f7fe f841 	bl	d4804 <HAL_USB_USART_Available_Data_For_Write>
   d6782:	2800      	cmp	r0, #0
   d6784:	9901      	ldr	r1, [sp, #4]
   d6786:	dc01      	bgt.n	d678c <_ZN9USBSerial5writeEh+0x16>
   d6788:	7c60      	ldrb	r0, [r4, #17]
   d678a:	b120      	cbz	r0, d6796 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d678c:	7c20      	ldrb	r0, [r4, #16]
   d678e:	f7fe f849 	bl	d4824 <HAL_USB_USART_Send_Data>
   d6792:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6796:	b002      	add	sp, #8
   d6798:	bd10      	pop	{r4, pc}

000d679a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d679a:	7c00      	ldrb	r0, [r0, #16]
   d679c:	f7fe b84a 	b.w	d4834 <HAL_USB_USART_Flush_Data>

000d67a0 <_ZN9USBSerialD0Ev>:
   d67a0:	b510      	push	{r4, lr}
   d67a2:	2114      	movs	r1, #20
   d67a4:	4604      	mov	r4, r0
   d67a6:	f000 fa5a 	bl	d6c5e <_ZdlPvj>
   d67aa:	4620      	mov	r0, r4
   d67ac:	bd10      	pop	{r4, pc}
	...

000d67b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d67b0:	b510      	push	{r4, lr}
   d67b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d67b6:	4604      	mov	r4, r0
   d67b8:	4608      	mov	r0, r1
   d67ba:	2100      	movs	r1, #0
   d67bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d67c0:	4b04      	ldr	r3, [pc, #16]	; (d67d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d67c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d67c4:	2301      	movs	r3, #1
  _serial = serial;
   d67c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d67c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d67ca:	4611      	mov	r1, r2
   d67cc:	f7fd fffa 	bl	d47c4 <HAL_USB_USART_Init>
}
   d67d0:	4620      	mov	r0, r4
   d67d2:	bd10      	pop	{r4, pc}
   d67d4:	000d7e44 	.word	0x000d7e44

000d67d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d67d8:	7c00      	ldrb	r0, [r0, #16]
   d67da:	2200      	movs	r2, #0
   d67dc:	f7fd bffa 	b.w	d47d4 <HAL_USB_USART_Begin>

000d67e0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d67e0:	7c00      	ldrb	r0, [r0, #16]
   d67e2:	f7fd bfff 	b.w	d47e4 <HAL_USB_USART_End>

000d67e6 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d67e6:	7c00      	ldrb	r0, [r0, #16]
   d67e8:	f7fe b82c 	b.w	d4844 <HAL_USB_USART_Is_Connected>

000d67ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d67ee:	2214      	movs	r2, #20
{
   d67f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d67f2:	2100      	movs	r1, #0
   d67f4:	f001 f8d0 	bl	d7998 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d67f8:	4620      	mov	r0, r4
   d67fa:	bd10      	pop	{r4, pc}

000d67fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d67fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67fe:	4c10      	ldr	r4, [pc, #64]	; (d6840 <_Z16_fetch_usbserialv+0x44>)
{
   d6800:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6802:	a803      	add	r0, sp, #12
   d6804:	f7ff fff2 	bl	d67ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6808:	7821      	ldrb	r1, [r4, #0]
   d680a:	f3bf 8f5b 	dmb	ish
   d680e:	f011 0101 	ands.w	r1, r1, #1
   d6812:	d111      	bne.n	d6838 <_Z16_fetch_usbserialv+0x3c>
   d6814:	4620      	mov	r0, r4
   d6816:	9101      	str	r1, [sp, #4]
   d6818:	f7fd fc4e 	bl	d40b8 <__cxa_guard_acquire>
   d681c:	9901      	ldr	r1, [sp, #4]
   d681e:	b158      	cbz	r0, d6838 <_Z16_fetch_usbserialv+0x3c>
   d6820:	aa03      	add	r2, sp, #12
   d6822:	4808      	ldr	r0, [pc, #32]	; (d6844 <_Z16_fetch_usbserialv+0x48>)
   d6824:	f7ff ffc4 	bl	d67b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6828:	4620      	mov	r0, r4
   d682a:	f7fd fc4a 	bl	d40c2 <__cxa_guard_release>
   d682e:	4a06      	ldr	r2, [pc, #24]	; (d6848 <_Z16_fetch_usbserialv+0x4c>)
   d6830:	4906      	ldr	r1, [pc, #24]	; (d684c <_Z16_fetch_usbserialv+0x50>)
   d6832:	4804      	ldr	r0, [pc, #16]	; (d6844 <_Z16_fetch_usbserialv+0x48>)
   d6834:	f000 fa0e 	bl	d6c54 <__aeabi_atexit>
	return _usbserial;
}
   d6838:	4802      	ldr	r0, [pc, #8]	; (d6844 <_Z16_fetch_usbserialv+0x48>)
   d683a:	b008      	add	sp, #32
   d683c:	bd10      	pop	{r4, pc}
   d683e:	bf00      	nop
   d6840:	2003e7a0 	.word	0x2003e7a0
   d6844:	2003e7a4 	.word	0x2003e7a4
   d6848:	2003e6b8 	.word	0x2003e6b8
   d684c:	000d6739 	.word	0x000d6739

000d6850 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6850:	2200      	movs	r2, #0
   d6852:	6840      	ldr	r0, [r0, #4]
   d6854:	4611      	mov	r1, r2
   d6856:	f7fe b879 	b.w	d494c <network_ready>

000d685a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d685a:	2200      	movs	r2, #0
   d685c:	6840      	ldr	r0, [r0, #4]
   d685e:	4611      	mov	r1, r2
   d6860:	f7fe b894 	b.w	d498c <network_listening>

000d6864 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6864:	2200      	movs	r2, #0
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	4611      	mov	r1, r2
   d686a:	f7fe b89f 	b.w	d49ac <network_get_listen_timeout>

000d686e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d686e:	6840      	ldr	r0, [r0, #4]
   d6870:	2200      	movs	r2, #0
   d6872:	f7fe b893 	b.w	d499c <network_set_listen_timeout>

000d6876 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6876:	6840      	ldr	r0, [r0, #4]
   d6878:	2200      	movs	r2, #0
   d687a:	f081 0101 	eor.w	r1, r1, #1
   d687e:	f7fe b87d 	b.w	d497c <network_listen>

000d6882 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6882:	2300      	movs	r3, #0
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	461a      	mov	r2, r3
   d6888:	4619      	mov	r1, r3
   d688a:	f7fe b86f 	b.w	d496c <network_off>

000d688e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d688e:	2300      	movs	r3, #0
   d6890:	6840      	ldr	r0, [r0, #4]
   d6892:	461a      	mov	r2, r3
   d6894:	4619      	mov	r1, r3
   d6896:	f7fe b861 	b.w	d495c <network_on>

000d689a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d689a:	2200      	movs	r2, #0
   d689c:	6840      	ldr	r0, [r0, #4]
   d689e:	4611      	mov	r1, r2
   d68a0:	f7fe b844 	b.w	d492c <network_connecting>

000d68a4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68a4:	6840      	ldr	r0, [r0, #4]
   d68a6:	2200      	movs	r2, #0
   d68a8:	2102      	movs	r1, #2
   d68aa:	f7fe b847 	b.w	d493c <network_disconnect>

000d68ae <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68ae:	2300      	movs	r3, #0
   d68b0:	6840      	ldr	r0, [r0, #4]
   d68b2:	461a      	mov	r2, r3
   d68b4:	f7fe b832 	b.w	d491c <network_connect>

000d68b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68b8:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68ba:	2204      	movs	r2, #4
   d68bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d68be:	4a02      	ldr	r2, [pc, #8]	; (d68c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d68c0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d68c2:	4770      	bx	lr
   d68c4:	2003e7b8 	.word	0x2003e7b8
   d68c8:	000d7e74 	.word	0x000d7e74

000d68cc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d68cc:	b510      	push	{r4, lr}
   d68ce:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d68d0:	f001 f8b7 	bl	d7a42 <strlen>
   d68d4:	3801      	subs	r0, #1
   d68d6:	1823      	adds	r3, r4, r0
   d68d8:	4620      	mov	r0, r4
	while(i<j){
   d68da:	4283      	cmp	r3, r0
   d68dc:	d906      	bls.n	d68ec <_Z11str_reversePc+0x20>
		c = *i;
   d68de:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d68e0:	7819      	ldrb	r1, [r3, #0]
   d68e2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d68e6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d68ea:	e7f6      	b.n	d68da <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d68ec:	bd10      	pop	{r4, pc}

000d68ee <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d68ee:	b570      	push	{r4, r5, r6, lr}
   d68f0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d68f2:	1e91      	subs	r1, r2, #2
   d68f4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d68f6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d68f8:	d822      	bhi.n	d6940 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d68fa:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d68fc:	b16d      	cbz	r5, d691a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d68fe:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6902:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6906:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6908:	2d09      	cmp	r5, #9
                *ptr += '0';
   d690a:	bf94      	ite	ls
   d690c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d690e:	3157      	addhi	r1, #87	; 0x57
   d6910:	b2c9      	uxtb	r1, r1
   d6912:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6916:	4635      	mov	r5, r6
	while(a){
   d6918:	e7f0      	b.n	d68fc <ultoa+0xe>
   d691a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d691c:	4423      	add	r3, r4
            *ptr++ = '0';
   d691e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6920:	4293      	cmp	r3, r2
   d6922:	d902      	bls.n	d692a <ultoa+0x3c>
            *ptr++ = '0';
   d6924:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6928:	e7fa      	b.n	d6920 <ultoa+0x32>
   d692a:	1a1a      	subs	r2, r3, r0
   d692c:	4283      	cmp	r3, r0
   d692e:	bf38      	it	cc
   d6930:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6932:	2300      	movs	r3, #0
   d6934:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6936:	4620      	mov	r0, r4
   d6938:	f7ff ffc8 	bl	d68cc <_Z11str_reversePc>
	return buffer;
   d693c:	4620      	mov	r0, r4
}
   d693e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6940:	2000      	movs	r0, #0
   d6942:	e7fc      	b.n	d693e <ultoa+0x50>

000d6944 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6944:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6946:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6948:	460c      	mov	r4, r1
   d694a:	4615      	mov	r5, r2
	if(a<0){
   d694c:	da0e      	bge.n	d696c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d694e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6952:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6956:	bf14      	ite	ne
   d6958:	4258      	negne	r0, r3
   d695a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d695c:	2301      	movs	r3, #1
		*buffer = '-';
   d695e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6960:	462a      	mov	r2, r5
   d6962:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6964:	f7ff ffc3 	bl	d68ee <ultoa>
	}
	return buffer;
}
   d6968:	4620      	mov	r0, r4
   d696a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d696c:	2301      	movs	r3, #1
   d696e:	e7f9      	b.n	d6964 <itoa+0x20>

000d6970 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6970:	4b01      	ldr	r3, [pc, #4]	; (d6978 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6972:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6974:	4770      	bx	lr
   d6976:	bf00      	nop
   d6978:	2003e654 	.word	0x2003e654

000d697c <serialEventRun>:
{
   d697c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d697e:	4b0b      	ldr	r3, [pc, #44]	; (d69ac <serialEventRun+0x30>)
   d6980:	b143      	cbz	r3, d6994 <serialEventRun+0x18>
   d6982:	f7ff ff3b 	bl	d67fc <_Z16_fetch_usbserialv>
   d6986:	6803      	ldr	r3, [r0, #0]
   d6988:	691b      	ldr	r3, [r3, #16]
   d698a:	4798      	blx	r3
   d698c:	2800      	cmp	r0, #0
   d698e:	dd01      	ble.n	d6994 <serialEventRun+0x18>
        serialEvent();
   d6990:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6994:	4b06      	ldr	r3, [pc, #24]	; (d69b0 <serialEventRun+0x34>)
   d6996:	b143      	cbz	r3, d69aa <serialEventRun+0x2e>
   d6998:	f7ff fe88 	bl	d66ac <_Z22__fetch_global_Serial1v>
   d699c:	6803      	ldr	r3, [r0, #0]
   d699e:	691b      	ldr	r3, [r3, #16]
   d69a0:	4798      	blx	r3
   d69a2:	2800      	cmp	r0, #0
   d69a4:	dd01      	ble.n	d69aa <serialEventRun+0x2e>
        serialEvent1();
   d69a6:	f3af 8000 	nop.w
}
   d69aa:	bd08      	pop	{r3, pc}
	...

000d69b4 <_post_loop>:
{
   d69b4:	b508      	push	{r3, lr}
	serialEventRun();
   d69b6:	f7ff ffe1 	bl	d697c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d69ba:	f7fd fe23 	bl	d4604 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d69be:	4b01      	ldr	r3, [pc, #4]	; (d69c4 <_post_loop+0x10>)
   d69c0:	6018      	str	r0, [r3, #0]
}
   d69c2:	bd08      	pop	{r3, pc}
   d69c4:	2003e7d4 	.word	0x2003e7d4

000d69c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d69c8:	4802      	ldr	r0, [pc, #8]	; (d69d4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d69ca:	4a03      	ldr	r2, [pc, #12]	; (d69d8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d69cc:	4903      	ldr	r1, [pc, #12]	; (d69dc <_Z33system_initialize_user_backup_ramv+0x14>)
   d69ce:	1a12      	subs	r2, r2, r0
   d69d0:	f000 bfba 	b.w	d7948 <memcpy>
   d69d4:	2003f400 	.word	0x2003f400
   d69d8:	2003f404 	.word	0x2003f404
   d69dc:	000d7fd8 	.word	0x000d7fd8

000d69e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d69e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d69e2:	2300      	movs	r3, #0
   d69e4:	9300      	str	r3, [sp, #0]
   d69e6:	461a      	mov	r2, r3
   d69e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d69ec:	f7fd ff74 	bl	d48d8 <system_ctrl_set_result>
}
   d69f0:	b003      	add	sp, #12
   d69f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d69f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d69f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d69fa:	8843      	ldrh	r3, [r0, #2]
   d69fc:	2b0a      	cmp	r3, #10
   d69fe:	d008      	beq.n	d6a12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6a00:	2b50      	cmp	r3, #80	; 0x50
   d6a02:	d10b      	bne.n	d6a1c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6a04:	4b09      	ldr	r3, [pc, #36]	; (d6a2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6a06:	681b      	ldr	r3, [r3, #0]
   d6a08:	b14b      	cbz	r3, d6a1e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6a0a:	b003      	add	sp, #12
   d6a0c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6a10:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6a12:	f7ff ffe5 	bl	d69e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6a16:	b003      	add	sp, #12
   d6a18:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6a1c:	2300      	movs	r3, #0
   d6a1e:	9300      	str	r3, [sp, #0]
   d6a20:	461a      	mov	r2, r3
   d6a22:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6a26:	f7fd ff57 	bl	d48d8 <system_ctrl_set_result>
}
   d6a2a:	e7f4      	b.n	d6a16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6a2c:	2003e7c4 	.word	0x2003e7c4

000d6a30 <module_user_init_hook>:
{
   d6a30:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6a32:	4c12      	ldr	r4, [pc, #72]	; (d6a7c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6a34:	4812      	ldr	r0, [pc, #72]	; (d6a80 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6a36:	4d13      	ldr	r5, [pc, #76]	; (d6a84 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6a38:	2100      	movs	r1, #0
   d6a3a:	f7fd ffef 	bl	d4a1c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6a3e:	6823      	ldr	r3, [r4, #0]
   d6a40:	42ab      	cmp	r3, r5
   d6a42:	4b11      	ldr	r3, [pc, #68]	; (d6a88 <module_user_init_hook+0x58>)
   d6a44:	bf0c      	ite	eq
   d6a46:	2201      	moveq	r2, #1
   d6a48:	2200      	movne	r2, #0
   d6a4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6a4c:	d002      	beq.n	d6a54 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6a4e:	f7ff ffbb 	bl	d69c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6a52:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6a54:	f7fd fdc6 	bl	d45e4 <HAL_RNG_GetRandomNumber>
   d6a58:	4604      	mov	r4, r0
    srand(seed);
   d6a5a:	f000 ffa5 	bl	d79a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6a5e:	4b0b      	ldr	r3, [pc, #44]	; (d6a8c <module_user_init_hook+0x5c>)
   d6a60:	b113      	cbz	r3, d6a68 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6a62:	4620      	mov	r0, r4
   d6a64:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6a68:	2100      	movs	r1, #0
   d6a6a:	4808      	ldr	r0, [pc, #32]	; (d6a8c <module_user_init_hook+0x5c>)
   d6a6c:	f7fd ff4e 	bl	d490c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6a74:	4806      	ldr	r0, [pc, #24]	; (d6a90 <module_user_init_hook+0x60>)
   d6a76:	2100      	movs	r1, #0
   d6a78:	f7fd bf24 	b.w	d48c4 <system_ctrl_set_app_request_handler>
   d6a7c:	2003f400 	.word	0x2003f400
   d6a80:	000d6971 	.word	0x000d6971
   d6a84:	9a271c1e 	.word	0x9a271c1e
   d6a88:	2003e7c0 	.word	0x2003e7c0
   d6a8c:	00000000 	.word	0x00000000
   d6a90:	000d69f9 	.word	0x000d69f9

000d6a94 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a94:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a96:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6a98:	d902      	bls.n	d6aa0 <pinAvailable+0xc>
    return false;
   d6a9a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6a9c:	b002      	add	sp, #8
   d6a9e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6aa0:	f1a0 030b 	sub.w	r3, r0, #11
   d6aa4:	2b02      	cmp	r3, #2
   d6aa6:	d81a      	bhi.n	d6ade <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6aa8:	4c17      	ldr	r4, [pc, #92]	; (d6b08 <pinAvailable+0x74>)
   d6aaa:	7821      	ldrb	r1, [r4, #0]
   d6aac:	f3bf 8f5b 	dmb	ish
   d6ab0:	f011 0101 	ands.w	r1, r1, #1
   d6ab4:	d10b      	bne.n	d6ace <pinAvailable+0x3a>
   d6ab6:	4620      	mov	r0, r4
   d6ab8:	9101      	str	r1, [sp, #4]
   d6aba:	f7fd fafd 	bl	d40b8 <__cxa_guard_acquire>
   d6abe:	9901      	ldr	r1, [sp, #4]
   d6ac0:	b128      	cbz	r0, d6ace <pinAvailable+0x3a>
   d6ac2:	4812      	ldr	r0, [pc, #72]	; (d6b0c <pinAvailable+0x78>)
   d6ac4:	f7ff fbe2 	bl	d628c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6ac8:	4620      	mov	r0, r4
   d6aca:	f7fd fafa 	bl	d40c2 <__cxa_guard_release>
   d6ace:	4b0f      	ldr	r3, [pc, #60]	; (d6b0c <pinAvailable+0x78>)
   d6ad0:	7818      	ldrb	r0, [r3, #0]
   d6ad2:	f7fd fe1f 	bl	d4714 <hal_spi_is_enabled>
   d6ad6:	2800      	cmp	r0, #0
   d6ad8:	d1df      	bne.n	d6a9a <pinAvailable+0x6>
  return true; // 'pin' is available
   d6ada:	2001      	movs	r0, #1
   d6adc:	e7de      	b.n	d6a9c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6ade:	2801      	cmp	r0, #1
   d6ae0:	d809      	bhi.n	d6af6 <pinAvailable+0x62>
   d6ae2:	f000 f88f 	bl	d6c04 <_Z19__fetch_global_Wirev>
   d6ae6:	2100      	movs	r1, #0
   d6ae8:	7c00      	ldrb	r0, [r0, #16]
   d6aea:	f7fd fde3 	bl	d46b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6aee:	f080 0001 	eor.w	r0, r0, #1
   d6af2:	b2c0      	uxtb	r0, r0
   d6af4:	e7d2      	b.n	d6a9c <pinAvailable+0x8>
   d6af6:	3809      	subs	r0, #9
   d6af8:	2801      	cmp	r0, #1
   d6afa:	d8ee      	bhi.n	d6ada <pinAvailable+0x46>
   d6afc:	f7ff fdd6 	bl	d66ac <_Z22__fetch_global_Serial1v>
   d6b00:	7c00      	ldrb	r0, [r0, #16]
   d6b02:	f7fd fe47 	bl	d4794 <hal_usart_is_enabled>
   d6b06:	e7f2      	b.n	d6aee <pinAvailable+0x5a>
   d6b08:	2003e7c8 	.word	0x2003e7c8
   d6b0c:	2003e7cc 	.word	0x2003e7cc

000d6b10 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b10:	2823      	cmp	r0, #35	; 0x23
{
   d6b12:	b538      	push	{r3, r4, r5, lr}
   d6b14:	4604      	mov	r4, r0
   d6b16:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b18:	d80a      	bhi.n	d6b30 <pinMode+0x20>
   d6b1a:	29ff      	cmp	r1, #255	; 0xff
   d6b1c:	d008      	beq.n	d6b30 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6b1e:	f7ff ffb9 	bl	d6a94 <pinAvailable>
   d6b22:	b128      	cbz	r0, d6b30 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6b24:	4629      	mov	r1, r5
   d6b26:	4620      	mov	r0, r4
}
   d6b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6b2c:	f7fd bd7a 	b.w	d4624 <HAL_Pin_Mode>
}
   d6b30:	bd38      	pop	{r3, r4, r5, pc}

000d6b32 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6b32:	b538      	push	{r3, r4, r5, lr}
   d6b34:	4604      	mov	r4, r0
   d6b36:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b38:	f7fd fd7c 	bl	d4634 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6b3c:	28ff      	cmp	r0, #255	; 0xff
   d6b3e:	d010      	beq.n	d6b62 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6b40:	2806      	cmp	r0, #6
   d6b42:	d804      	bhi.n	d6b4e <digitalWrite+0x1c>
   d6b44:	234d      	movs	r3, #77	; 0x4d
   d6b46:	fa23 f000 	lsr.w	r0, r3, r0
   d6b4a:	07c3      	lsls	r3, r0, #31
   d6b4c:	d409      	bmi.n	d6b62 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6b4e:	4620      	mov	r0, r4
   d6b50:	f7ff ffa0 	bl	d6a94 <pinAvailable>
   d6b54:	b128      	cbz	r0, d6b62 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6b56:	4629      	mov	r1, r5
   d6b58:	4620      	mov	r0, r4
}
   d6b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6b5e:	f7fd bd71 	b.w	d4644 <HAL_GPIO_Write>
}
   d6b62:	bd38      	pop	{r3, r4, r5, pc}

000d6b64 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6b64:	b510      	push	{r4, lr}
   d6b66:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b68:	f7fd fd64 	bl	d4634 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6b6c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6b6e:	b2db      	uxtb	r3, r3
   d6b70:	2b01      	cmp	r3, #1
   d6b72:	d908      	bls.n	d6b86 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6b74:	4620      	mov	r0, r4
   d6b76:	f7ff ff8d 	bl	d6a94 <pinAvailable>
   d6b7a:	b120      	cbz	r0, d6b86 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6b7c:	4620      	mov	r0, r4
}
   d6b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6b82:	f7fd bd67 	b.w	d4654 <HAL_GPIO_Read>
}
   d6b86:	2000      	movs	r0, #0
   d6b88:	bd10      	pop	{r4, pc}

000d6b8a <shiftIn>:
  }

  return hal_pwm_get_max_frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   d6b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b8e:	2500      	movs	r5, #0
   d6b90:	4690      	mov	r8, r2
  uint8_t value = 0;
   d6b92:	462c      	mov	r4, r5
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
   d6b94:	460e      	mov	r6, r1
   d6b96:	4607      	mov	r7, r0
   d6b98:	4630      	mov	r0, r6
   d6b9a:	2101      	movs	r1, #1
   d6b9c:	f7ff ffc9 	bl	d6b32 <digitalWrite>
    if (bitOrder == LSBFIRST)
   d6ba0:	b264      	sxtb	r4, r4
      value |= digitalRead(dataPin) << i;
   d6ba2:	4638      	mov	r0, r7
    if (bitOrder == LSBFIRST)
   d6ba4:	f1b8 0f00 	cmp.w	r8, #0
   d6ba8:	d10e      	bne.n	d6bc8 <shiftIn+0x3e>
      value |= digitalRead(dataPin) << i;
   d6baa:	f7ff ffdb 	bl	d6b64 <digitalRead>
   d6bae:	40a8      	lsls	r0, r5
    else
      value |= digitalRead(dataPin) << (7 - i);
   d6bb0:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
   d6bb2:	2100      	movs	r1, #0
   d6bb4:	4630      	mov	r0, r6
   d6bb6:	3501      	adds	r5, #1
   d6bb8:	f7ff ffbb 	bl	d6b32 <digitalWrite>
  for (i = 0; i < 8; ++i) {
   d6bbc:	2d08      	cmp	r5, #8
      value |= digitalRead(dataPin) << (7 - i);
   d6bbe:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; ++i) {
   d6bc0:	d1ea      	bne.n	d6b98 <shiftIn+0xe>
  }
  return value;
}
   d6bc2:	4620      	mov	r0, r4
   d6bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      value |= digitalRead(dataPin) << (7 - i);
   d6bc8:	f7ff ffcc 	bl	d6b64 <digitalRead>
   d6bcc:	f1c5 0307 	rsb	r3, r5, #7
   d6bd0:	4098      	lsls	r0, r3
   d6bd2:	e7ed      	b.n	d6bb0 <shiftIn+0x26>

000d6bd4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6bd4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6bd6:	2300      	movs	r3, #0
   d6bd8:	2520      	movs	r5, #32
   d6bda:	8043      	strh	r3, [r0, #2]
   d6bdc:	2314      	movs	r3, #20
{
   d6bde:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6be0:	8003      	strh	r3, [r0, #0]
   d6be2:	6085      	str	r5, [r0, #8]
   d6be4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6be6:	4906      	ldr	r1, [pc, #24]	; (d6c00 <_Z17acquireWireBufferv+0x2c>)
   d6be8:	4628      	mov	r0, r5
   d6bea:	f000 f83c 	bl	d6c66 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bee:	4904      	ldr	r1, [pc, #16]	; (d6c00 <_Z17acquireWireBufferv+0x2c>)
	};
   d6bf0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bf2:	4628      	mov	r0, r5
   d6bf4:	f000 f837 	bl	d6c66 <_ZnajRKSt9nothrow_t>
	};
   d6bf8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6bfa:	4620      	mov	r0, r4
   d6bfc:	bd38      	pop	{r3, r4, r5, pc}
   d6bfe:	bf00      	nop
   d6c00:	000d7ea8 	.word	0x000d7ea8

000d6c04 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6c04:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c06:	4d0f      	ldr	r5, [pc, #60]	; (d6c44 <_Z19__fetch_global_Wirev+0x40>)
   d6c08:	7829      	ldrb	r1, [r5, #0]
   d6c0a:	f3bf 8f5b 	dmb	ish
   d6c0e:	f011 0401 	ands.w	r4, r1, #1
{
   d6c12:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c14:	d113      	bne.n	d6c3e <_Z19__fetch_global_Wirev+0x3a>
   d6c16:	4628      	mov	r0, r5
   d6c18:	f7fd fa4e 	bl	d40b8 <__cxa_guard_acquire>
   d6c1c:	b178      	cbz	r0, d6c3e <_Z19__fetch_global_Wirev+0x3a>
   d6c1e:	a801      	add	r0, sp, #4
   d6c20:	f7ff ffd8 	bl	d6bd4 <_Z17acquireWireBufferv>
   d6c24:	aa01      	add	r2, sp, #4
   d6c26:	4621      	mov	r1, r4
   d6c28:	4807      	ldr	r0, [pc, #28]	; (d6c48 <_Z19__fetch_global_Wirev+0x44>)
   d6c2a:	f7fd ffc7 	bl	d4bbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6c2e:	4628      	mov	r0, r5
   d6c30:	f7fd fa47 	bl	d40c2 <__cxa_guard_release>
   d6c34:	4a05      	ldr	r2, [pc, #20]	; (d6c4c <_Z19__fetch_global_Wirev+0x48>)
   d6c36:	4906      	ldr	r1, [pc, #24]	; (d6c50 <_Z19__fetch_global_Wirev+0x4c>)
   d6c38:	4803      	ldr	r0, [pc, #12]	; (d6c48 <_Z19__fetch_global_Wirev+0x44>)
   d6c3a:	f000 f80b 	bl	d6c54 <__aeabi_atexit>
	return wire;
}
   d6c3e:	4802      	ldr	r0, [pc, #8]	; (d6c48 <_Z19__fetch_global_Wirev+0x44>)
   d6c40:	b007      	add	sp, #28
   d6c42:	bd30      	pop	{r4, r5, pc}
   d6c44:	2003e7d8 	.word	0x2003e7d8
   d6c48:	2003e7dc 	.word	0x2003e7dc
   d6c4c:	2003e6b8 	.word	0x2003e6b8
   d6c50:	000d4b65 	.word	0x000d4b65

000d6c54 <__aeabi_atexit>:
   d6c54:	460b      	mov	r3, r1
   d6c56:	4601      	mov	r1, r0
   d6c58:	4618      	mov	r0, r3
   d6c5a:	f000 be67 	b.w	d792c <__cxa_atexit>

000d6c5e <_ZdlPvj>:
   d6c5e:	f7fd ba1e 	b.w	d409e <_ZdlPv>

000d6c62 <_ZnwjRKSt9nothrow_t>:
   d6c62:	f7fd ba18 	b.w	d4096 <_Znwj>

000d6c66 <_ZnajRKSt9nothrow_t>:
   d6c66:	f7fd ba18 	b.w	d409a <_Znaj>
	...

000d6c6c <__aeabi_drsub>:
   d6c6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6c70:	e002      	b.n	d6c78 <__adddf3>
   d6c72:	bf00      	nop

000d6c74 <__aeabi_dsub>:
   d6c74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6c78 <__adddf3>:
   d6c78:	b530      	push	{r4, r5, lr}
   d6c7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6c7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6c82:	ea94 0f05 	teq	r4, r5
   d6c86:	bf08      	it	eq
   d6c88:	ea90 0f02 	teqeq	r0, r2
   d6c8c:	bf1f      	itttt	ne
   d6c8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c92:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c9e:	f000 80e2 	beq.w	d6e66 <__adddf3+0x1ee>
   d6ca2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6ca6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6caa:	bfb8      	it	lt
   d6cac:	426d      	neglt	r5, r5
   d6cae:	dd0c      	ble.n	d6cca <__adddf3+0x52>
   d6cb0:	442c      	add	r4, r5
   d6cb2:	ea80 0202 	eor.w	r2, r0, r2
   d6cb6:	ea81 0303 	eor.w	r3, r1, r3
   d6cba:	ea82 0000 	eor.w	r0, r2, r0
   d6cbe:	ea83 0101 	eor.w	r1, r3, r1
   d6cc2:	ea80 0202 	eor.w	r2, r0, r2
   d6cc6:	ea81 0303 	eor.w	r3, r1, r3
   d6cca:	2d36      	cmp	r5, #54	; 0x36
   d6ccc:	bf88      	it	hi
   d6cce:	bd30      	pophi	{r4, r5, pc}
   d6cd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6cd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6cd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6cdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6ce0:	d002      	beq.n	d6ce8 <__adddf3+0x70>
   d6ce2:	4240      	negs	r0, r0
   d6ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ce8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6cec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6cf0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6cf4:	d002      	beq.n	d6cfc <__adddf3+0x84>
   d6cf6:	4252      	negs	r2, r2
   d6cf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6cfc:	ea94 0f05 	teq	r4, r5
   d6d00:	f000 80a7 	beq.w	d6e52 <__adddf3+0x1da>
   d6d04:	f1a4 0401 	sub.w	r4, r4, #1
   d6d08:	f1d5 0e20 	rsbs	lr, r5, #32
   d6d0c:	db0d      	blt.n	d6d2a <__adddf3+0xb2>
   d6d0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6d12:	fa22 f205 	lsr.w	r2, r2, r5
   d6d16:	1880      	adds	r0, r0, r2
   d6d18:	f141 0100 	adc.w	r1, r1, #0
   d6d1c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6d20:	1880      	adds	r0, r0, r2
   d6d22:	fa43 f305 	asr.w	r3, r3, r5
   d6d26:	4159      	adcs	r1, r3
   d6d28:	e00e      	b.n	d6d48 <__adddf3+0xd0>
   d6d2a:	f1a5 0520 	sub.w	r5, r5, #32
   d6d2e:	f10e 0e20 	add.w	lr, lr, #32
   d6d32:	2a01      	cmp	r2, #1
   d6d34:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6d38:	bf28      	it	cs
   d6d3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6d3e:	fa43 f305 	asr.w	r3, r3, r5
   d6d42:	18c0      	adds	r0, r0, r3
   d6d44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6d48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d4c:	d507      	bpl.n	d6d5e <__adddf3+0xe6>
   d6d4e:	f04f 0e00 	mov.w	lr, #0
   d6d52:	f1dc 0c00 	rsbs	ip, ip, #0
   d6d56:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6d5a:	eb6e 0101 	sbc.w	r1, lr, r1
   d6d5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6d62:	d31b      	bcc.n	d6d9c <__adddf3+0x124>
   d6d64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6d68:	d30c      	bcc.n	d6d84 <__adddf3+0x10c>
   d6d6a:	0849      	lsrs	r1, r1, #1
   d6d6c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6d70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6d74:	f104 0401 	add.w	r4, r4, #1
   d6d78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6d7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6d80:	f080 809a 	bcs.w	d6eb8 <__adddf3+0x240>
   d6d84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d88:	bf08      	it	eq
   d6d8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d8e:	f150 0000 	adcs.w	r0, r0, #0
   d6d92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d96:	ea41 0105 	orr.w	r1, r1, r5
   d6d9a:	bd30      	pop	{r4, r5, pc}
   d6d9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6da0:	4140      	adcs	r0, r0
   d6da2:	eb41 0101 	adc.w	r1, r1, r1
   d6da6:	3c01      	subs	r4, #1
   d6da8:	bf28      	it	cs
   d6daa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6dae:	d2e9      	bcs.n	d6d84 <__adddf3+0x10c>
   d6db0:	f091 0f00 	teq	r1, #0
   d6db4:	bf04      	itt	eq
   d6db6:	4601      	moveq	r1, r0
   d6db8:	2000      	moveq	r0, #0
   d6dba:	fab1 f381 	clz	r3, r1
   d6dbe:	bf08      	it	eq
   d6dc0:	3320      	addeq	r3, #32
   d6dc2:	f1a3 030b 	sub.w	r3, r3, #11
   d6dc6:	f1b3 0220 	subs.w	r2, r3, #32
   d6dca:	da0c      	bge.n	d6de6 <__adddf3+0x16e>
   d6dcc:	320c      	adds	r2, #12
   d6dce:	dd08      	ble.n	d6de2 <__adddf3+0x16a>
   d6dd0:	f102 0c14 	add.w	ip, r2, #20
   d6dd4:	f1c2 020c 	rsb	r2, r2, #12
   d6dd8:	fa01 f00c 	lsl.w	r0, r1, ip
   d6ddc:	fa21 f102 	lsr.w	r1, r1, r2
   d6de0:	e00c      	b.n	d6dfc <__adddf3+0x184>
   d6de2:	f102 0214 	add.w	r2, r2, #20
   d6de6:	bfd8      	it	le
   d6de8:	f1c2 0c20 	rsble	ip, r2, #32
   d6dec:	fa01 f102 	lsl.w	r1, r1, r2
   d6df0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6df4:	bfdc      	itt	le
   d6df6:	ea41 010c 	orrle.w	r1, r1, ip
   d6dfa:	4090      	lslle	r0, r2
   d6dfc:	1ae4      	subs	r4, r4, r3
   d6dfe:	bfa2      	ittt	ge
   d6e00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6e04:	4329      	orrge	r1, r5
   d6e06:	bd30      	popge	{r4, r5, pc}
   d6e08:	ea6f 0404 	mvn.w	r4, r4
   d6e0c:	3c1f      	subs	r4, #31
   d6e0e:	da1c      	bge.n	d6e4a <__adddf3+0x1d2>
   d6e10:	340c      	adds	r4, #12
   d6e12:	dc0e      	bgt.n	d6e32 <__adddf3+0x1ba>
   d6e14:	f104 0414 	add.w	r4, r4, #20
   d6e18:	f1c4 0220 	rsb	r2, r4, #32
   d6e1c:	fa20 f004 	lsr.w	r0, r0, r4
   d6e20:	fa01 f302 	lsl.w	r3, r1, r2
   d6e24:	ea40 0003 	orr.w	r0, r0, r3
   d6e28:	fa21 f304 	lsr.w	r3, r1, r4
   d6e2c:	ea45 0103 	orr.w	r1, r5, r3
   d6e30:	bd30      	pop	{r4, r5, pc}
   d6e32:	f1c4 040c 	rsb	r4, r4, #12
   d6e36:	f1c4 0220 	rsb	r2, r4, #32
   d6e3a:	fa20 f002 	lsr.w	r0, r0, r2
   d6e3e:	fa01 f304 	lsl.w	r3, r1, r4
   d6e42:	ea40 0003 	orr.w	r0, r0, r3
   d6e46:	4629      	mov	r1, r5
   d6e48:	bd30      	pop	{r4, r5, pc}
   d6e4a:	fa21 f004 	lsr.w	r0, r1, r4
   d6e4e:	4629      	mov	r1, r5
   d6e50:	bd30      	pop	{r4, r5, pc}
   d6e52:	f094 0f00 	teq	r4, #0
   d6e56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6e5a:	bf06      	itte	eq
   d6e5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6e60:	3401      	addeq	r4, #1
   d6e62:	3d01      	subne	r5, #1
   d6e64:	e74e      	b.n	d6d04 <__adddf3+0x8c>
   d6e66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e6a:	bf18      	it	ne
   d6e6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e70:	d029      	beq.n	d6ec6 <__adddf3+0x24e>
   d6e72:	ea94 0f05 	teq	r4, r5
   d6e76:	bf08      	it	eq
   d6e78:	ea90 0f02 	teqeq	r0, r2
   d6e7c:	d005      	beq.n	d6e8a <__adddf3+0x212>
   d6e7e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6e82:	bf04      	itt	eq
   d6e84:	4619      	moveq	r1, r3
   d6e86:	4610      	moveq	r0, r2
   d6e88:	bd30      	pop	{r4, r5, pc}
   d6e8a:	ea91 0f03 	teq	r1, r3
   d6e8e:	bf1e      	ittt	ne
   d6e90:	2100      	movne	r1, #0
   d6e92:	2000      	movne	r0, #0
   d6e94:	bd30      	popne	{r4, r5, pc}
   d6e96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e9a:	d105      	bne.n	d6ea8 <__adddf3+0x230>
   d6e9c:	0040      	lsls	r0, r0, #1
   d6e9e:	4149      	adcs	r1, r1
   d6ea0:	bf28      	it	cs
   d6ea2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6ea6:	bd30      	pop	{r4, r5, pc}
   d6ea8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6eac:	bf3c      	itt	cc
   d6eae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6eb2:	bd30      	popcc	{r4, r5, pc}
   d6eb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6eb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6ebc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6ec0:	f04f 0000 	mov.w	r0, #0
   d6ec4:	bd30      	pop	{r4, r5, pc}
   d6ec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6eca:	bf1a      	itte	ne
   d6ecc:	4619      	movne	r1, r3
   d6ece:	4610      	movne	r0, r2
   d6ed0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6ed4:	bf1c      	itt	ne
   d6ed6:	460b      	movne	r3, r1
   d6ed8:	4602      	movne	r2, r0
   d6eda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6ede:	bf06      	itte	eq
   d6ee0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6ee4:	ea91 0f03 	teqeq	r1, r3
   d6ee8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6eec:	bd30      	pop	{r4, r5, pc}
   d6eee:	bf00      	nop

000d6ef0 <__aeabi_ui2d>:
   d6ef0:	f090 0f00 	teq	r0, #0
   d6ef4:	bf04      	itt	eq
   d6ef6:	2100      	moveq	r1, #0
   d6ef8:	4770      	bxeq	lr
   d6efa:	b530      	push	{r4, r5, lr}
   d6efc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f04:	f04f 0500 	mov.w	r5, #0
   d6f08:	f04f 0100 	mov.w	r1, #0
   d6f0c:	e750      	b.n	d6db0 <__adddf3+0x138>
   d6f0e:	bf00      	nop

000d6f10 <__aeabi_i2d>:
   d6f10:	f090 0f00 	teq	r0, #0
   d6f14:	bf04      	itt	eq
   d6f16:	2100      	moveq	r1, #0
   d6f18:	4770      	bxeq	lr
   d6f1a:	b530      	push	{r4, r5, lr}
   d6f1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6f28:	bf48      	it	mi
   d6f2a:	4240      	negmi	r0, r0
   d6f2c:	f04f 0100 	mov.w	r1, #0
   d6f30:	e73e      	b.n	d6db0 <__adddf3+0x138>
   d6f32:	bf00      	nop

000d6f34 <__aeabi_f2d>:
   d6f34:	0042      	lsls	r2, r0, #1
   d6f36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6f3a:	ea4f 0131 	mov.w	r1, r1, rrx
   d6f3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6f42:	bf1f      	itttt	ne
   d6f44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6f48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6f4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6f50:	4770      	bxne	lr
   d6f52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6f56:	bf08      	it	eq
   d6f58:	4770      	bxeq	lr
   d6f5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6f5e:	bf04      	itt	eq
   d6f60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6f64:	4770      	bxeq	lr
   d6f66:	b530      	push	{r4, r5, lr}
   d6f68:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6f6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6f74:	e71c      	b.n	d6db0 <__adddf3+0x138>
   d6f76:	bf00      	nop

000d6f78 <__aeabi_ul2d>:
   d6f78:	ea50 0201 	orrs.w	r2, r0, r1
   d6f7c:	bf08      	it	eq
   d6f7e:	4770      	bxeq	lr
   d6f80:	b530      	push	{r4, r5, lr}
   d6f82:	f04f 0500 	mov.w	r5, #0
   d6f86:	e00a      	b.n	d6f9e <__aeabi_l2d+0x16>

000d6f88 <__aeabi_l2d>:
   d6f88:	ea50 0201 	orrs.w	r2, r0, r1
   d6f8c:	bf08      	it	eq
   d6f8e:	4770      	bxeq	lr
   d6f90:	b530      	push	{r4, r5, lr}
   d6f92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f96:	d502      	bpl.n	d6f9e <__aeabi_l2d+0x16>
   d6f98:	4240      	negs	r0, r0
   d6f9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6fa2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6fa6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6faa:	f43f aed8 	beq.w	d6d5e <__adddf3+0xe6>
   d6fae:	f04f 0203 	mov.w	r2, #3
   d6fb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6fb6:	bf18      	it	ne
   d6fb8:	3203      	addne	r2, #3
   d6fba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6fbe:	bf18      	it	ne
   d6fc0:	3203      	addne	r2, #3
   d6fc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6fc6:	f1c2 0320 	rsb	r3, r2, #32
   d6fca:	fa00 fc03 	lsl.w	ip, r0, r3
   d6fce:	fa20 f002 	lsr.w	r0, r0, r2
   d6fd2:	fa01 fe03 	lsl.w	lr, r1, r3
   d6fd6:	ea40 000e 	orr.w	r0, r0, lr
   d6fda:	fa21 f102 	lsr.w	r1, r1, r2
   d6fde:	4414      	add	r4, r2
   d6fe0:	e6bd      	b.n	d6d5e <__adddf3+0xe6>
   d6fe2:	bf00      	nop

000d6fe4 <__aeabi_dmul>:
   d6fe4:	b570      	push	{r4, r5, r6, lr}
   d6fe6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6fea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6fee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ff2:	bf1d      	ittte	ne
   d6ff4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ff8:	ea94 0f0c 	teqne	r4, ip
   d6ffc:	ea95 0f0c 	teqne	r5, ip
   d7000:	f000 f8de 	bleq	d71c0 <__aeabi_dmul+0x1dc>
   d7004:	442c      	add	r4, r5
   d7006:	ea81 0603 	eor.w	r6, r1, r3
   d700a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d700e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7012:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7016:	bf18      	it	ne
   d7018:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d701c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7024:	d038      	beq.n	d7098 <__aeabi_dmul+0xb4>
   d7026:	fba0 ce02 	umull	ip, lr, r0, r2
   d702a:	f04f 0500 	mov.w	r5, #0
   d702e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7032:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7036:	fbe0 e503 	umlal	lr, r5, r0, r3
   d703a:	f04f 0600 	mov.w	r6, #0
   d703e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7042:	f09c 0f00 	teq	ip, #0
   d7046:	bf18      	it	ne
   d7048:	f04e 0e01 	orrne.w	lr, lr, #1
   d704c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7050:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7054:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7058:	d204      	bcs.n	d7064 <__aeabi_dmul+0x80>
   d705a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d705e:	416d      	adcs	r5, r5
   d7060:	eb46 0606 	adc.w	r6, r6, r6
   d7064:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7068:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d706c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7070:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7074:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7078:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d707c:	bf88      	it	hi
   d707e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7082:	d81e      	bhi.n	d70c2 <__aeabi_dmul+0xde>
   d7084:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7088:	bf08      	it	eq
   d708a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d708e:	f150 0000 	adcs.w	r0, r0, #0
   d7092:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7096:	bd70      	pop	{r4, r5, r6, pc}
   d7098:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d709c:	ea46 0101 	orr.w	r1, r6, r1
   d70a0:	ea40 0002 	orr.w	r0, r0, r2
   d70a4:	ea81 0103 	eor.w	r1, r1, r3
   d70a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d70ac:	bfc2      	ittt	gt
   d70ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d70b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d70b6:	bd70      	popgt	{r4, r5, r6, pc}
   d70b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d70bc:	f04f 0e00 	mov.w	lr, #0
   d70c0:	3c01      	subs	r4, #1
   d70c2:	f300 80ab 	bgt.w	d721c <__aeabi_dmul+0x238>
   d70c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d70ca:	bfde      	ittt	le
   d70cc:	2000      	movle	r0, #0
   d70ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d70d2:	bd70      	pople	{r4, r5, r6, pc}
   d70d4:	f1c4 0400 	rsb	r4, r4, #0
   d70d8:	3c20      	subs	r4, #32
   d70da:	da35      	bge.n	d7148 <__aeabi_dmul+0x164>
   d70dc:	340c      	adds	r4, #12
   d70de:	dc1b      	bgt.n	d7118 <__aeabi_dmul+0x134>
   d70e0:	f104 0414 	add.w	r4, r4, #20
   d70e4:	f1c4 0520 	rsb	r5, r4, #32
   d70e8:	fa00 f305 	lsl.w	r3, r0, r5
   d70ec:	fa20 f004 	lsr.w	r0, r0, r4
   d70f0:	fa01 f205 	lsl.w	r2, r1, r5
   d70f4:	ea40 0002 	orr.w	r0, r0, r2
   d70f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d70fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7100:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7104:	fa21 f604 	lsr.w	r6, r1, r4
   d7108:	eb42 0106 	adc.w	r1, r2, r6
   d710c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7110:	bf08      	it	eq
   d7112:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7116:	bd70      	pop	{r4, r5, r6, pc}
   d7118:	f1c4 040c 	rsb	r4, r4, #12
   d711c:	f1c4 0520 	rsb	r5, r4, #32
   d7120:	fa00 f304 	lsl.w	r3, r0, r4
   d7124:	fa20 f005 	lsr.w	r0, r0, r5
   d7128:	fa01 f204 	lsl.w	r2, r1, r4
   d712c:	ea40 0002 	orr.w	r0, r0, r2
   d7130:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7134:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7138:	f141 0100 	adc.w	r1, r1, #0
   d713c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7140:	bf08      	it	eq
   d7142:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7146:	bd70      	pop	{r4, r5, r6, pc}
   d7148:	f1c4 0520 	rsb	r5, r4, #32
   d714c:	fa00 f205 	lsl.w	r2, r0, r5
   d7150:	ea4e 0e02 	orr.w	lr, lr, r2
   d7154:	fa20 f304 	lsr.w	r3, r0, r4
   d7158:	fa01 f205 	lsl.w	r2, r1, r5
   d715c:	ea43 0302 	orr.w	r3, r3, r2
   d7160:	fa21 f004 	lsr.w	r0, r1, r4
   d7164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7168:	fa21 f204 	lsr.w	r2, r1, r4
   d716c:	ea20 0002 	bic.w	r0, r0, r2
   d7170:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7178:	bf08      	it	eq
   d717a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d717e:	bd70      	pop	{r4, r5, r6, pc}
   d7180:	f094 0f00 	teq	r4, #0
   d7184:	d10f      	bne.n	d71a6 <__aeabi_dmul+0x1c2>
   d7186:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d718a:	0040      	lsls	r0, r0, #1
   d718c:	eb41 0101 	adc.w	r1, r1, r1
   d7190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7194:	bf08      	it	eq
   d7196:	3c01      	subeq	r4, #1
   d7198:	d0f7      	beq.n	d718a <__aeabi_dmul+0x1a6>
   d719a:	ea41 0106 	orr.w	r1, r1, r6
   d719e:	f095 0f00 	teq	r5, #0
   d71a2:	bf18      	it	ne
   d71a4:	4770      	bxne	lr
   d71a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d71aa:	0052      	lsls	r2, r2, #1
   d71ac:	eb43 0303 	adc.w	r3, r3, r3
   d71b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d71b4:	bf08      	it	eq
   d71b6:	3d01      	subeq	r5, #1
   d71b8:	d0f7      	beq.n	d71aa <__aeabi_dmul+0x1c6>
   d71ba:	ea43 0306 	orr.w	r3, r3, r6
   d71be:	4770      	bx	lr
   d71c0:	ea94 0f0c 	teq	r4, ip
   d71c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d71c8:	bf18      	it	ne
   d71ca:	ea95 0f0c 	teqne	r5, ip
   d71ce:	d00c      	beq.n	d71ea <__aeabi_dmul+0x206>
   d71d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d71d4:	bf18      	it	ne
   d71d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d71da:	d1d1      	bne.n	d7180 <__aeabi_dmul+0x19c>
   d71dc:	ea81 0103 	eor.w	r1, r1, r3
   d71e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d71e4:	f04f 0000 	mov.w	r0, #0
   d71e8:	bd70      	pop	{r4, r5, r6, pc}
   d71ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d71ee:	bf06      	itte	eq
   d71f0:	4610      	moveq	r0, r2
   d71f2:	4619      	moveq	r1, r3
   d71f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d71f8:	d019      	beq.n	d722e <__aeabi_dmul+0x24a>
   d71fa:	ea94 0f0c 	teq	r4, ip
   d71fe:	d102      	bne.n	d7206 <__aeabi_dmul+0x222>
   d7200:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7204:	d113      	bne.n	d722e <__aeabi_dmul+0x24a>
   d7206:	ea95 0f0c 	teq	r5, ip
   d720a:	d105      	bne.n	d7218 <__aeabi_dmul+0x234>
   d720c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7210:	bf1c      	itt	ne
   d7212:	4610      	movne	r0, r2
   d7214:	4619      	movne	r1, r3
   d7216:	d10a      	bne.n	d722e <__aeabi_dmul+0x24a>
   d7218:	ea81 0103 	eor.w	r1, r1, r3
   d721c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7220:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7224:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7228:	f04f 0000 	mov.w	r0, #0
   d722c:	bd70      	pop	{r4, r5, r6, pc}
   d722e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7232:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7236:	bd70      	pop	{r4, r5, r6, pc}

000d7238 <__aeabi_ddiv>:
   d7238:	b570      	push	{r4, r5, r6, lr}
   d723a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d723e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7242:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7246:	bf1d      	ittte	ne
   d7248:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d724c:	ea94 0f0c 	teqne	r4, ip
   d7250:	ea95 0f0c 	teqne	r5, ip
   d7254:	f000 f8a7 	bleq	d73a6 <__aeabi_ddiv+0x16e>
   d7258:	eba4 0405 	sub.w	r4, r4, r5
   d725c:	ea81 0e03 	eor.w	lr, r1, r3
   d7260:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7264:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7268:	f000 8088 	beq.w	d737c <__aeabi_ddiv+0x144>
   d726c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7270:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7274:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7278:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d727c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7280:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7284:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7288:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d728c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7290:	429d      	cmp	r5, r3
   d7292:	bf08      	it	eq
   d7294:	4296      	cmpeq	r6, r2
   d7296:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d729a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d729e:	d202      	bcs.n	d72a6 <__aeabi_ddiv+0x6e>
   d72a0:	085b      	lsrs	r3, r3, #1
   d72a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d72a6:	1ab6      	subs	r6, r6, r2
   d72a8:	eb65 0503 	sbc.w	r5, r5, r3
   d72ac:	085b      	lsrs	r3, r3, #1
   d72ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d72b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d72b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d72ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d72be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72c2:	bf22      	ittt	cs
   d72c4:	1ab6      	subcs	r6, r6, r2
   d72c6:	4675      	movcs	r5, lr
   d72c8:	ea40 000c 	orrcs.w	r0, r0, ip
   d72cc:	085b      	lsrs	r3, r3, #1
   d72ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d72d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d72d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72da:	bf22      	ittt	cs
   d72dc:	1ab6      	subcs	r6, r6, r2
   d72de:	4675      	movcs	r5, lr
   d72e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d72e4:	085b      	lsrs	r3, r3, #1
   d72e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d72ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d72ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d72f2:	bf22      	ittt	cs
   d72f4:	1ab6      	subcs	r6, r6, r2
   d72f6:	4675      	movcs	r5, lr
   d72f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d72fc:	085b      	lsrs	r3, r3, #1
   d72fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7302:	ebb6 0e02 	subs.w	lr, r6, r2
   d7306:	eb75 0e03 	sbcs.w	lr, r5, r3
   d730a:	bf22      	ittt	cs
   d730c:	1ab6      	subcs	r6, r6, r2
   d730e:	4675      	movcs	r5, lr
   d7310:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7314:	ea55 0e06 	orrs.w	lr, r5, r6
   d7318:	d018      	beq.n	d734c <__aeabi_ddiv+0x114>
   d731a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d731e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7322:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7326:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d732a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d732e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7332:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7336:	d1c0      	bne.n	d72ba <__aeabi_ddiv+0x82>
   d7338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d733c:	d10b      	bne.n	d7356 <__aeabi_ddiv+0x11e>
   d733e:	ea41 0100 	orr.w	r1, r1, r0
   d7342:	f04f 0000 	mov.w	r0, #0
   d7346:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d734a:	e7b6      	b.n	d72ba <__aeabi_ddiv+0x82>
   d734c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7350:	bf04      	itt	eq
   d7352:	4301      	orreq	r1, r0
   d7354:	2000      	moveq	r0, #0
   d7356:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d735a:	bf88      	it	hi
   d735c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7360:	f63f aeaf 	bhi.w	d70c2 <__aeabi_dmul+0xde>
   d7364:	ebb5 0c03 	subs.w	ip, r5, r3
   d7368:	bf04      	itt	eq
   d736a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d736e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7372:	f150 0000 	adcs.w	r0, r0, #0
   d7376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d737a:	bd70      	pop	{r4, r5, r6, pc}
   d737c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7380:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7384:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7388:	bfc2      	ittt	gt
   d738a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d738e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7392:	bd70      	popgt	{r4, r5, r6, pc}
   d7394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7398:	f04f 0e00 	mov.w	lr, #0
   d739c:	3c01      	subs	r4, #1
   d739e:	e690      	b.n	d70c2 <__aeabi_dmul+0xde>
   d73a0:	ea45 0e06 	orr.w	lr, r5, r6
   d73a4:	e68d      	b.n	d70c2 <__aeabi_dmul+0xde>
   d73a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d73aa:	ea94 0f0c 	teq	r4, ip
   d73ae:	bf08      	it	eq
   d73b0:	ea95 0f0c 	teqeq	r5, ip
   d73b4:	f43f af3b 	beq.w	d722e <__aeabi_dmul+0x24a>
   d73b8:	ea94 0f0c 	teq	r4, ip
   d73bc:	d10a      	bne.n	d73d4 <__aeabi_ddiv+0x19c>
   d73be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d73c2:	f47f af34 	bne.w	d722e <__aeabi_dmul+0x24a>
   d73c6:	ea95 0f0c 	teq	r5, ip
   d73ca:	f47f af25 	bne.w	d7218 <__aeabi_dmul+0x234>
   d73ce:	4610      	mov	r0, r2
   d73d0:	4619      	mov	r1, r3
   d73d2:	e72c      	b.n	d722e <__aeabi_dmul+0x24a>
   d73d4:	ea95 0f0c 	teq	r5, ip
   d73d8:	d106      	bne.n	d73e8 <__aeabi_ddiv+0x1b0>
   d73da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d73de:	f43f aefd 	beq.w	d71dc <__aeabi_dmul+0x1f8>
   d73e2:	4610      	mov	r0, r2
   d73e4:	4619      	mov	r1, r3
   d73e6:	e722      	b.n	d722e <__aeabi_dmul+0x24a>
   d73e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d73ec:	bf18      	it	ne
   d73ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73f2:	f47f aec5 	bne.w	d7180 <__aeabi_dmul+0x19c>
   d73f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d73fa:	f47f af0d 	bne.w	d7218 <__aeabi_dmul+0x234>
   d73fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7402:	f47f aeeb 	bne.w	d71dc <__aeabi_dmul+0x1f8>
   d7406:	e712      	b.n	d722e <__aeabi_dmul+0x24a>

000d7408 <__gedf2>:
   d7408:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d740c:	e006      	b.n	d741c <__cmpdf2+0x4>
   d740e:	bf00      	nop

000d7410 <__ledf2>:
   d7410:	f04f 0c01 	mov.w	ip, #1
   d7414:	e002      	b.n	d741c <__cmpdf2+0x4>
   d7416:	bf00      	nop

000d7418 <__cmpdf2>:
   d7418:	f04f 0c01 	mov.w	ip, #1
   d741c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7420:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7428:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d742c:	bf18      	it	ne
   d742e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7432:	d01b      	beq.n	d746c <__cmpdf2+0x54>
   d7434:	b001      	add	sp, #4
   d7436:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d743a:	bf0c      	ite	eq
   d743c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7440:	ea91 0f03 	teqne	r1, r3
   d7444:	bf02      	ittt	eq
   d7446:	ea90 0f02 	teqeq	r0, r2
   d744a:	2000      	moveq	r0, #0
   d744c:	4770      	bxeq	lr
   d744e:	f110 0f00 	cmn.w	r0, #0
   d7452:	ea91 0f03 	teq	r1, r3
   d7456:	bf58      	it	pl
   d7458:	4299      	cmppl	r1, r3
   d745a:	bf08      	it	eq
   d745c:	4290      	cmpeq	r0, r2
   d745e:	bf2c      	ite	cs
   d7460:	17d8      	asrcs	r0, r3, #31
   d7462:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7466:	f040 0001 	orr.w	r0, r0, #1
   d746a:	4770      	bx	lr
   d746c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7474:	d102      	bne.n	d747c <__cmpdf2+0x64>
   d7476:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d747a:	d107      	bne.n	d748c <__cmpdf2+0x74>
   d747c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7480:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7484:	d1d6      	bne.n	d7434 <__cmpdf2+0x1c>
   d7486:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d748a:	d0d3      	beq.n	d7434 <__cmpdf2+0x1c>
   d748c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7490:	4770      	bx	lr
   d7492:	bf00      	nop

000d7494 <__aeabi_cdrcmple>:
   d7494:	4684      	mov	ip, r0
   d7496:	4610      	mov	r0, r2
   d7498:	4662      	mov	r2, ip
   d749a:	468c      	mov	ip, r1
   d749c:	4619      	mov	r1, r3
   d749e:	4663      	mov	r3, ip
   d74a0:	e000      	b.n	d74a4 <__aeabi_cdcmpeq>
   d74a2:	bf00      	nop

000d74a4 <__aeabi_cdcmpeq>:
   d74a4:	b501      	push	{r0, lr}
   d74a6:	f7ff ffb7 	bl	d7418 <__cmpdf2>
   d74aa:	2800      	cmp	r0, #0
   d74ac:	bf48      	it	mi
   d74ae:	f110 0f00 	cmnmi.w	r0, #0
   d74b2:	bd01      	pop	{r0, pc}

000d74b4 <__aeabi_dcmpeq>:
   d74b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74b8:	f7ff fff4 	bl	d74a4 <__aeabi_cdcmpeq>
   d74bc:	bf0c      	ite	eq
   d74be:	2001      	moveq	r0, #1
   d74c0:	2000      	movne	r0, #0
   d74c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d74c6:	bf00      	nop

000d74c8 <__aeabi_dcmplt>:
   d74c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74cc:	f7ff ffea 	bl	d74a4 <__aeabi_cdcmpeq>
   d74d0:	bf34      	ite	cc
   d74d2:	2001      	movcc	r0, #1
   d74d4:	2000      	movcs	r0, #0
   d74d6:	f85d fb08 	ldr.w	pc, [sp], #8
   d74da:	bf00      	nop

000d74dc <__aeabi_dcmple>:
   d74dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74e0:	f7ff ffe0 	bl	d74a4 <__aeabi_cdcmpeq>
   d74e4:	bf94      	ite	ls
   d74e6:	2001      	movls	r0, #1
   d74e8:	2000      	movhi	r0, #0
   d74ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d74ee:	bf00      	nop

000d74f0 <__aeabi_dcmpge>:
   d74f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d74f4:	f7ff ffce 	bl	d7494 <__aeabi_cdrcmple>
   d74f8:	bf94      	ite	ls
   d74fa:	2001      	movls	r0, #1
   d74fc:	2000      	movhi	r0, #0
   d74fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d7502:	bf00      	nop

000d7504 <__aeabi_dcmpgt>:
   d7504:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7508:	f7ff ffc4 	bl	d7494 <__aeabi_cdrcmple>
   d750c:	bf34      	ite	cc
   d750e:	2001      	movcc	r0, #1
   d7510:	2000      	movcs	r0, #0
   d7512:	f85d fb08 	ldr.w	pc, [sp], #8
   d7516:	bf00      	nop

000d7518 <__aeabi_d2uiz>:
   d7518:	004a      	lsls	r2, r1, #1
   d751a:	d211      	bcs.n	d7540 <__aeabi_d2uiz+0x28>
   d751c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7520:	d211      	bcs.n	d7546 <__aeabi_d2uiz+0x2e>
   d7522:	d50d      	bpl.n	d7540 <__aeabi_d2uiz+0x28>
   d7524:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7528:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d752c:	d40e      	bmi.n	d754c <__aeabi_d2uiz+0x34>
   d752e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7536:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d753a:	fa23 f002 	lsr.w	r0, r3, r2
   d753e:	4770      	bx	lr
   d7540:	f04f 0000 	mov.w	r0, #0
   d7544:	4770      	bx	lr
   d7546:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d754a:	d102      	bne.n	d7552 <__aeabi_d2uiz+0x3a>
   d754c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7550:	4770      	bx	lr
   d7552:	f04f 0000 	mov.w	r0, #0
   d7556:	4770      	bx	lr

000d7558 <__aeabi_d2f>:
   d7558:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d755c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7560:	bf24      	itt	cs
   d7562:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7566:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d756a:	d90d      	bls.n	d7588 <__aeabi_d2f+0x30>
   d756c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7570:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7574:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7578:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d757c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7580:	bf08      	it	eq
   d7582:	f020 0001 	biceq.w	r0, r0, #1
   d7586:	4770      	bx	lr
   d7588:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d758c:	d121      	bne.n	d75d2 <__aeabi_d2f+0x7a>
   d758e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7592:	bfbc      	itt	lt
   d7594:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7598:	4770      	bxlt	lr
   d759a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d759e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d75a2:	f1c2 0218 	rsb	r2, r2, #24
   d75a6:	f1c2 0c20 	rsb	ip, r2, #32
   d75aa:	fa10 f30c 	lsls.w	r3, r0, ip
   d75ae:	fa20 f002 	lsr.w	r0, r0, r2
   d75b2:	bf18      	it	ne
   d75b4:	f040 0001 	orrne.w	r0, r0, #1
   d75b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d75bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d75c0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d75c4:	ea40 000c 	orr.w	r0, r0, ip
   d75c8:	fa23 f302 	lsr.w	r3, r3, r2
   d75cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d75d0:	e7cc      	b.n	d756c <__aeabi_d2f+0x14>
   d75d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d75d6:	d107      	bne.n	d75e8 <__aeabi_d2f+0x90>
   d75d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d75dc:	bf1e      	ittt	ne
   d75de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d75e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d75e6:	4770      	bxne	lr
   d75e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d75ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d75f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d75f4:	4770      	bx	lr
   d75f6:	bf00      	nop

000d75f8 <__aeabi_uldivmod>:
   d75f8:	b953      	cbnz	r3, d7610 <__aeabi_uldivmod+0x18>
   d75fa:	b94a      	cbnz	r2, d7610 <__aeabi_uldivmod+0x18>
   d75fc:	2900      	cmp	r1, #0
   d75fe:	bf08      	it	eq
   d7600:	2800      	cmpeq	r0, #0
   d7602:	bf1c      	itt	ne
   d7604:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d7608:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d760c:	f000 b98c 	b.w	d7928 <__aeabi_idiv0>
   d7610:	f1ad 0c08 	sub.w	ip, sp, #8
   d7614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7618:	f000 f824 	bl	d7664 <__udivmoddi4>
   d761c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7624:	b004      	add	sp, #16
   d7626:	4770      	bx	lr

000d7628 <__aeabi_d2ulz>:
   d7628:	b5d0      	push	{r4, r6, r7, lr}
   d762a:	4b0c      	ldr	r3, [pc, #48]	; (d765c <__aeabi_d2ulz+0x34>)
   d762c:	2200      	movs	r2, #0
   d762e:	4606      	mov	r6, r0
   d7630:	460f      	mov	r7, r1
   d7632:	f7ff fcd7 	bl	d6fe4 <__aeabi_dmul>
   d7636:	f7ff ff6f 	bl	d7518 <__aeabi_d2uiz>
   d763a:	4604      	mov	r4, r0
   d763c:	f7ff fc58 	bl	d6ef0 <__aeabi_ui2d>
   d7640:	4b07      	ldr	r3, [pc, #28]	; (d7660 <__aeabi_d2ulz+0x38>)
   d7642:	2200      	movs	r2, #0
   d7644:	f7ff fcce 	bl	d6fe4 <__aeabi_dmul>
   d7648:	4602      	mov	r2, r0
   d764a:	460b      	mov	r3, r1
   d764c:	4630      	mov	r0, r6
   d764e:	4639      	mov	r1, r7
   d7650:	f7ff fb10 	bl	d6c74 <__aeabi_dsub>
   d7654:	f7ff ff60 	bl	d7518 <__aeabi_d2uiz>
   d7658:	4621      	mov	r1, r4
   d765a:	bdd0      	pop	{r4, r6, r7, pc}
   d765c:	3df00000 	.word	0x3df00000
   d7660:	41f00000 	.word	0x41f00000

000d7664 <__udivmoddi4>:
   d7664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7668:	9d08      	ldr	r5, [sp, #32]
   d766a:	4604      	mov	r4, r0
   d766c:	468c      	mov	ip, r1
   d766e:	2b00      	cmp	r3, #0
   d7670:	f040 8083 	bne.w	d777a <__udivmoddi4+0x116>
   d7674:	428a      	cmp	r2, r1
   d7676:	4617      	mov	r7, r2
   d7678:	d947      	bls.n	d770a <__udivmoddi4+0xa6>
   d767a:	fab2 f282 	clz	r2, r2
   d767e:	b142      	cbz	r2, d7692 <__udivmoddi4+0x2e>
   d7680:	f1c2 0020 	rsb	r0, r2, #32
   d7684:	fa24 f000 	lsr.w	r0, r4, r0
   d7688:	4091      	lsls	r1, r2
   d768a:	4097      	lsls	r7, r2
   d768c:	ea40 0c01 	orr.w	ip, r0, r1
   d7690:	4094      	lsls	r4, r2
   d7692:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7696:	0c23      	lsrs	r3, r4, #16
   d7698:	fbbc f6f8 	udiv	r6, ip, r8
   d769c:	fa1f fe87 	uxth.w	lr, r7
   d76a0:	fb08 c116 	mls	r1, r8, r6, ip
   d76a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d76a8:	fb06 f10e 	mul.w	r1, r6, lr
   d76ac:	4299      	cmp	r1, r3
   d76ae:	d909      	bls.n	d76c4 <__udivmoddi4+0x60>
   d76b0:	18fb      	adds	r3, r7, r3
   d76b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d76b6:	f080 8119 	bcs.w	d78ec <__udivmoddi4+0x288>
   d76ba:	4299      	cmp	r1, r3
   d76bc:	f240 8116 	bls.w	d78ec <__udivmoddi4+0x288>
   d76c0:	3e02      	subs	r6, #2
   d76c2:	443b      	add	r3, r7
   d76c4:	1a5b      	subs	r3, r3, r1
   d76c6:	b2a4      	uxth	r4, r4
   d76c8:	fbb3 f0f8 	udiv	r0, r3, r8
   d76cc:	fb08 3310 	mls	r3, r8, r0, r3
   d76d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d76d4:	fb00 fe0e 	mul.w	lr, r0, lr
   d76d8:	45a6      	cmp	lr, r4
   d76da:	d909      	bls.n	d76f0 <__udivmoddi4+0x8c>
   d76dc:	193c      	adds	r4, r7, r4
   d76de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d76e2:	f080 8105 	bcs.w	d78f0 <__udivmoddi4+0x28c>
   d76e6:	45a6      	cmp	lr, r4
   d76e8:	f240 8102 	bls.w	d78f0 <__udivmoddi4+0x28c>
   d76ec:	3802      	subs	r0, #2
   d76ee:	443c      	add	r4, r7
   d76f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d76f4:	eba4 040e 	sub.w	r4, r4, lr
   d76f8:	2600      	movs	r6, #0
   d76fa:	b11d      	cbz	r5, d7704 <__udivmoddi4+0xa0>
   d76fc:	40d4      	lsrs	r4, r2
   d76fe:	2300      	movs	r3, #0
   d7700:	e9c5 4300 	strd	r4, r3, [r5]
   d7704:	4631      	mov	r1, r6
   d7706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d770a:	b902      	cbnz	r2, d770e <__udivmoddi4+0xaa>
   d770c:	deff      	udf	#255	; 0xff
   d770e:	fab2 f282 	clz	r2, r2
   d7712:	2a00      	cmp	r2, #0
   d7714:	d150      	bne.n	d77b8 <__udivmoddi4+0x154>
   d7716:	1bcb      	subs	r3, r1, r7
   d7718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d771c:	fa1f f887 	uxth.w	r8, r7
   d7720:	2601      	movs	r6, #1
   d7722:	fbb3 fcfe 	udiv	ip, r3, lr
   d7726:	0c21      	lsrs	r1, r4, #16
   d7728:	fb0e 331c 	mls	r3, lr, ip, r3
   d772c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7730:	fb08 f30c 	mul.w	r3, r8, ip
   d7734:	428b      	cmp	r3, r1
   d7736:	d907      	bls.n	d7748 <__udivmoddi4+0xe4>
   d7738:	1879      	adds	r1, r7, r1
   d773a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d773e:	d202      	bcs.n	d7746 <__udivmoddi4+0xe2>
   d7740:	428b      	cmp	r3, r1
   d7742:	f200 80e9 	bhi.w	d7918 <__udivmoddi4+0x2b4>
   d7746:	4684      	mov	ip, r0
   d7748:	1ac9      	subs	r1, r1, r3
   d774a:	b2a3      	uxth	r3, r4
   d774c:	fbb1 f0fe 	udiv	r0, r1, lr
   d7750:	fb0e 1110 	mls	r1, lr, r0, r1
   d7754:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7758:	fb08 f800 	mul.w	r8, r8, r0
   d775c:	45a0      	cmp	r8, r4
   d775e:	d907      	bls.n	d7770 <__udivmoddi4+0x10c>
   d7760:	193c      	adds	r4, r7, r4
   d7762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7766:	d202      	bcs.n	d776e <__udivmoddi4+0x10a>
   d7768:	45a0      	cmp	r8, r4
   d776a:	f200 80d9 	bhi.w	d7920 <__udivmoddi4+0x2bc>
   d776e:	4618      	mov	r0, r3
   d7770:	eba4 0408 	sub.w	r4, r4, r8
   d7774:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7778:	e7bf      	b.n	d76fa <__udivmoddi4+0x96>
   d777a:	428b      	cmp	r3, r1
   d777c:	d909      	bls.n	d7792 <__udivmoddi4+0x12e>
   d777e:	2d00      	cmp	r5, #0
   d7780:	f000 80b1 	beq.w	d78e6 <__udivmoddi4+0x282>
   d7784:	2600      	movs	r6, #0
   d7786:	e9c5 0100 	strd	r0, r1, [r5]
   d778a:	4630      	mov	r0, r6
   d778c:	4631      	mov	r1, r6
   d778e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7792:	fab3 f683 	clz	r6, r3
   d7796:	2e00      	cmp	r6, #0
   d7798:	d14a      	bne.n	d7830 <__udivmoddi4+0x1cc>
   d779a:	428b      	cmp	r3, r1
   d779c:	d302      	bcc.n	d77a4 <__udivmoddi4+0x140>
   d779e:	4282      	cmp	r2, r0
   d77a0:	f200 80b8 	bhi.w	d7914 <__udivmoddi4+0x2b0>
   d77a4:	1a84      	subs	r4, r0, r2
   d77a6:	eb61 0103 	sbc.w	r1, r1, r3
   d77aa:	2001      	movs	r0, #1
   d77ac:	468c      	mov	ip, r1
   d77ae:	2d00      	cmp	r5, #0
   d77b0:	d0a8      	beq.n	d7704 <__udivmoddi4+0xa0>
   d77b2:	e9c5 4c00 	strd	r4, ip, [r5]
   d77b6:	e7a5      	b.n	d7704 <__udivmoddi4+0xa0>
   d77b8:	f1c2 0320 	rsb	r3, r2, #32
   d77bc:	fa20 f603 	lsr.w	r6, r0, r3
   d77c0:	4097      	lsls	r7, r2
   d77c2:	fa01 f002 	lsl.w	r0, r1, r2
   d77c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d77ca:	40d9      	lsrs	r1, r3
   d77cc:	4330      	orrs	r0, r6
   d77ce:	0c03      	lsrs	r3, r0, #16
   d77d0:	fbb1 f6fe 	udiv	r6, r1, lr
   d77d4:	fa1f f887 	uxth.w	r8, r7
   d77d8:	fb0e 1116 	mls	r1, lr, r6, r1
   d77dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d77e0:	fb06 f108 	mul.w	r1, r6, r8
   d77e4:	4299      	cmp	r1, r3
   d77e6:	fa04 f402 	lsl.w	r4, r4, r2
   d77ea:	d909      	bls.n	d7800 <__udivmoddi4+0x19c>
   d77ec:	18fb      	adds	r3, r7, r3
   d77ee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d77f2:	f080 808d 	bcs.w	d7910 <__udivmoddi4+0x2ac>
   d77f6:	4299      	cmp	r1, r3
   d77f8:	f240 808a 	bls.w	d7910 <__udivmoddi4+0x2ac>
   d77fc:	3e02      	subs	r6, #2
   d77fe:	443b      	add	r3, r7
   d7800:	1a5b      	subs	r3, r3, r1
   d7802:	b281      	uxth	r1, r0
   d7804:	fbb3 f0fe 	udiv	r0, r3, lr
   d7808:	fb0e 3310 	mls	r3, lr, r0, r3
   d780c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7810:	fb00 f308 	mul.w	r3, r0, r8
   d7814:	428b      	cmp	r3, r1
   d7816:	d907      	bls.n	d7828 <__udivmoddi4+0x1c4>
   d7818:	1879      	adds	r1, r7, r1
   d781a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d781e:	d273      	bcs.n	d7908 <__udivmoddi4+0x2a4>
   d7820:	428b      	cmp	r3, r1
   d7822:	d971      	bls.n	d7908 <__udivmoddi4+0x2a4>
   d7824:	3802      	subs	r0, #2
   d7826:	4439      	add	r1, r7
   d7828:	1acb      	subs	r3, r1, r3
   d782a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d782e:	e778      	b.n	d7722 <__udivmoddi4+0xbe>
   d7830:	f1c6 0c20 	rsb	ip, r6, #32
   d7834:	fa03 f406 	lsl.w	r4, r3, r6
   d7838:	fa22 f30c 	lsr.w	r3, r2, ip
   d783c:	431c      	orrs	r4, r3
   d783e:	fa20 f70c 	lsr.w	r7, r0, ip
   d7842:	fa01 f306 	lsl.w	r3, r1, r6
   d7846:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d784a:	fa21 f10c 	lsr.w	r1, r1, ip
   d784e:	431f      	orrs	r7, r3
   d7850:	0c3b      	lsrs	r3, r7, #16
   d7852:	fbb1 f9fe 	udiv	r9, r1, lr
   d7856:	fa1f f884 	uxth.w	r8, r4
   d785a:	fb0e 1119 	mls	r1, lr, r9, r1
   d785e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7862:	fb09 fa08 	mul.w	sl, r9, r8
   d7866:	458a      	cmp	sl, r1
   d7868:	fa02 f206 	lsl.w	r2, r2, r6
   d786c:	fa00 f306 	lsl.w	r3, r0, r6
   d7870:	d908      	bls.n	d7884 <__udivmoddi4+0x220>
   d7872:	1861      	adds	r1, r4, r1
   d7874:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7878:	d248      	bcs.n	d790c <__udivmoddi4+0x2a8>
   d787a:	458a      	cmp	sl, r1
   d787c:	d946      	bls.n	d790c <__udivmoddi4+0x2a8>
   d787e:	f1a9 0902 	sub.w	r9, r9, #2
   d7882:	4421      	add	r1, r4
   d7884:	eba1 010a 	sub.w	r1, r1, sl
   d7888:	b2bf      	uxth	r7, r7
   d788a:	fbb1 f0fe 	udiv	r0, r1, lr
   d788e:	fb0e 1110 	mls	r1, lr, r0, r1
   d7892:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d7896:	fb00 f808 	mul.w	r8, r0, r8
   d789a:	45b8      	cmp	r8, r7
   d789c:	d907      	bls.n	d78ae <__udivmoddi4+0x24a>
   d789e:	19e7      	adds	r7, r4, r7
   d78a0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d78a4:	d22e      	bcs.n	d7904 <__udivmoddi4+0x2a0>
   d78a6:	45b8      	cmp	r8, r7
   d78a8:	d92c      	bls.n	d7904 <__udivmoddi4+0x2a0>
   d78aa:	3802      	subs	r0, #2
   d78ac:	4427      	add	r7, r4
   d78ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d78b2:	eba7 0708 	sub.w	r7, r7, r8
   d78b6:	fba0 8902 	umull	r8, r9, r0, r2
   d78ba:	454f      	cmp	r7, r9
   d78bc:	46c6      	mov	lr, r8
   d78be:	4649      	mov	r1, r9
   d78c0:	d31a      	bcc.n	d78f8 <__udivmoddi4+0x294>
   d78c2:	d017      	beq.n	d78f4 <__udivmoddi4+0x290>
   d78c4:	b15d      	cbz	r5, d78de <__udivmoddi4+0x27a>
   d78c6:	ebb3 020e 	subs.w	r2, r3, lr
   d78ca:	eb67 0701 	sbc.w	r7, r7, r1
   d78ce:	fa07 fc0c 	lsl.w	ip, r7, ip
   d78d2:	40f2      	lsrs	r2, r6
   d78d4:	ea4c 0202 	orr.w	r2, ip, r2
   d78d8:	40f7      	lsrs	r7, r6
   d78da:	e9c5 2700 	strd	r2, r7, [r5]
   d78de:	2600      	movs	r6, #0
   d78e0:	4631      	mov	r1, r6
   d78e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78e6:	462e      	mov	r6, r5
   d78e8:	4628      	mov	r0, r5
   d78ea:	e70b      	b.n	d7704 <__udivmoddi4+0xa0>
   d78ec:	4606      	mov	r6, r0
   d78ee:	e6e9      	b.n	d76c4 <__udivmoddi4+0x60>
   d78f0:	4618      	mov	r0, r3
   d78f2:	e6fd      	b.n	d76f0 <__udivmoddi4+0x8c>
   d78f4:	4543      	cmp	r3, r8
   d78f6:	d2e5      	bcs.n	d78c4 <__udivmoddi4+0x260>
   d78f8:	ebb8 0e02 	subs.w	lr, r8, r2
   d78fc:	eb69 0104 	sbc.w	r1, r9, r4
   d7900:	3801      	subs	r0, #1
   d7902:	e7df      	b.n	d78c4 <__udivmoddi4+0x260>
   d7904:	4608      	mov	r0, r1
   d7906:	e7d2      	b.n	d78ae <__udivmoddi4+0x24a>
   d7908:	4660      	mov	r0, ip
   d790a:	e78d      	b.n	d7828 <__udivmoddi4+0x1c4>
   d790c:	4681      	mov	r9, r0
   d790e:	e7b9      	b.n	d7884 <__udivmoddi4+0x220>
   d7910:	4666      	mov	r6, ip
   d7912:	e775      	b.n	d7800 <__udivmoddi4+0x19c>
   d7914:	4630      	mov	r0, r6
   d7916:	e74a      	b.n	d77ae <__udivmoddi4+0x14a>
   d7918:	f1ac 0c02 	sub.w	ip, ip, #2
   d791c:	4439      	add	r1, r7
   d791e:	e713      	b.n	d7748 <__udivmoddi4+0xe4>
   d7920:	3802      	subs	r0, #2
   d7922:	443c      	add	r4, r7
   d7924:	e724      	b.n	d7770 <__udivmoddi4+0x10c>
   d7926:	bf00      	nop

000d7928 <__aeabi_idiv0>:
   d7928:	4770      	bx	lr
   d792a:	bf00      	nop

000d792c <__cxa_atexit>:
   d792c:	b510      	push	{r4, lr}
   d792e:	4c05      	ldr	r4, [pc, #20]	; (d7944 <__cxa_atexit+0x18>)
   d7930:	4613      	mov	r3, r2
   d7932:	b12c      	cbz	r4, d7940 <__cxa_atexit+0x14>
   d7934:	460a      	mov	r2, r1
   d7936:	4601      	mov	r1, r0
   d7938:	2002      	movs	r0, #2
   d793a:	f3af 8000 	nop.w
   d793e:	bd10      	pop	{r4, pc}
   d7940:	4620      	mov	r0, r4
   d7942:	e7fc      	b.n	d793e <__cxa_atexit+0x12>
   d7944:	00000000 	.word	0x00000000

000d7948 <memcpy>:
   d7948:	440a      	add	r2, r1
   d794a:	4291      	cmp	r1, r2
   d794c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7950:	d100      	bne.n	d7954 <memcpy+0xc>
   d7952:	4770      	bx	lr
   d7954:	b510      	push	{r4, lr}
   d7956:	f811 4b01 	ldrb.w	r4, [r1], #1
   d795a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d795e:	4291      	cmp	r1, r2
   d7960:	d1f9      	bne.n	d7956 <memcpy+0xe>
   d7962:	bd10      	pop	{r4, pc}

000d7964 <memmove>:
   d7964:	4288      	cmp	r0, r1
   d7966:	b510      	push	{r4, lr}
   d7968:	eb01 0402 	add.w	r4, r1, r2
   d796c:	d902      	bls.n	d7974 <memmove+0x10>
   d796e:	4284      	cmp	r4, r0
   d7970:	4623      	mov	r3, r4
   d7972:	d807      	bhi.n	d7984 <memmove+0x20>
   d7974:	1e43      	subs	r3, r0, #1
   d7976:	42a1      	cmp	r1, r4
   d7978:	d008      	beq.n	d798c <memmove+0x28>
   d797a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d797e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7982:	e7f8      	b.n	d7976 <memmove+0x12>
   d7984:	4402      	add	r2, r0
   d7986:	4601      	mov	r1, r0
   d7988:	428a      	cmp	r2, r1
   d798a:	d100      	bne.n	d798e <memmove+0x2a>
   d798c:	bd10      	pop	{r4, pc}
   d798e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7992:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7996:	e7f7      	b.n	d7988 <memmove+0x24>

000d7998 <memset>:
   d7998:	4402      	add	r2, r0
   d799a:	4603      	mov	r3, r0
   d799c:	4293      	cmp	r3, r2
   d799e:	d100      	bne.n	d79a2 <memset+0xa>
   d79a0:	4770      	bx	lr
   d79a2:	f803 1b01 	strb.w	r1, [r3], #1
   d79a6:	e7f9      	b.n	d799c <memset+0x4>

000d79a8 <srand>:
   d79a8:	b538      	push	{r3, r4, r5, lr}
   d79aa:	4b0d      	ldr	r3, [pc, #52]	; (d79e0 <srand+0x38>)
   d79ac:	681d      	ldr	r5, [r3, #0]
   d79ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d79b0:	4604      	mov	r4, r0
   d79b2:	b97b      	cbnz	r3, d79d4 <srand+0x2c>
   d79b4:	2018      	movs	r0, #24
   d79b6:	f7fd f811 	bl	d49dc <malloc>
   d79ba:	4a0a      	ldr	r2, [pc, #40]	; (d79e4 <srand+0x3c>)
   d79bc:	4b0a      	ldr	r3, [pc, #40]	; (d79e8 <srand+0x40>)
   d79be:	63a8      	str	r0, [r5, #56]	; 0x38
   d79c0:	e9c0 2300 	strd	r2, r3, [r0]
   d79c4:	4b09      	ldr	r3, [pc, #36]	; (d79ec <srand+0x44>)
   d79c6:	6083      	str	r3, [r0, #8]
   d79c8:	230b      	movs	r3, #11
   d79ca:	8183      	strh	r3, [r0, #12]
   d79cc:	2201      	movs	r2, #1
   d79ce:	2300      	movs	r3, #0
   d79d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d79d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d79d6:	2200      	movs	r2, #0
   d79d8:	611c      	str	r4, [r3, #16]
   d79da:	615a      	str	r2, [r3, #20]
   d79dc:	bd38      	pop	{r3, r4, r5, pc}
   d79de:	bf00      	nop
   d79e0:	2003e654 	.word	0x2003e654
   d79e4:	abcd330e 	.word	0xabcd330e
   d79e8:	e66d1234 	.word	0xe66d1234
   d79ec:	0005deec 	.word	0x0005deec

000d79f0 <strchr>:
   d79f0:	b2c9      	uxtb	r1, r1
   d79f2:	4603      	mov	r3, r0
   d79f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d79f8:	b11a      	cbz	r2, d7a02 <strchr+0x12>
   d79fa:	428a      	cmp	r2, r1
   d79fc:	d1f9      	bne.n	d79f2 <strchr+0x2>
   d79fe:	4618      	mov	r0, r3
   d7a00:	4770      	bx	lr
   d7a02:	2900      	cmp	r1, #0
   d7a04:	bf18      	it	ne
   d7a06:	2300      	movne	r3, #0
   d7a08:	e7f9      	b.n	d79fe <strchr+0xe>

000d7a0a <strchrnul>:
   d7a0a:	b510      	push	{r4, lr}
   d7a0c:	4604      	mov	r4, r0
   d7a0e:	f7ff ffef 	bl	d79f0 <strchr>
   d7a12:	b918      	cbnz	r0, d7a1c <strchrnul+0x12>
   d7a14:	4620      	mov	r0, r4
   d7a16:	f000 f814 	bl	d7a42 <strlen>
   d7a1a:	4420      	add	r0, r4
   d7a1c:	bd10      	pop	{r4, pc}

000d7a1e <strcmp>:
   d7a1e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7a22:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7a26:	2a01      	cmp	r2, #1
   d7a28:	bf28      	it	cs
   d7a2a:	429a      	cmpcs	r2, r3
   d7a2c:	d0f7      	beq.n	d7a1e <strcmp>
   d7a2e:	1ad0      	subs	r0, r2, r3
   d7a30:	4770      	bx	lr

000d7a32 <strcpy>:
   d7a32:	4603      	mov	r3, r0
   d7a34:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7a38:	f803 2b01 	strb.w	r2, [r3], #1
   d7a3c:	2a00      	cmp	r2, #0
   d7a3e:	d1f9      	bne.n	d7a34 <strcpy+0x2>
   d7a40:	4770      	bx	lr

000d7a42 <strlen>:
   d7a42:	4603      	mov	r3, r0
   d7a44:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7a48:	2a00      	cmp	r2, #0
   d7a4a:	d1fb      	bne.n	d7a44 <strlen+0x2>
   d7a4c:	1a18      	subs	r0, r3, r0
   d7a4e:	3801      	subs	r0, #1
   d7a50:	4770      	bx	lr

000d7a52 <strncmp>:
   d7a52:	b510      	push	{r4, lr}
   d7a54:	b16a      	cbz	r2, d7a72 <strncmp+0x20>
   d7a56:	3901      	subs	r1, #1
   d7a58:	1884      	adds	r4, r0, r2
   d7a5a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7a5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7a62:	4293      	cmp	r3, r2
   d7a64:	d103      	bne.n	d7a6e <strncmp+0x1c>
   d7a66:	42a0      	cmp	r0, r4
   d7a68:	d001      	beq.n	d7a6e <strncmp+0x1c>
   d7a6a:	2b00      	cmp	r3, #0
   d7a6c:	d1f5      	bne.n	d7a5a <strncmp+0x8>
   d7a6e:	1a98      	subs	r0, r3, r2
   d7a70:	bd10      	pop	{r4, pc}
   d7a72:	4610      	mov	r0, r2
   d7a74:	e7fc      	b.n	d7a70 <strncmp+0x1e>

000d7a76 <strrchr>:
   d7a76:	b538      	push	{r3, r4, r5, lr}
   d7a78:	4603      	mov	r3, r0
   d7a7a:	460c      	mov	r4, r1
   d7a7c:	b969      	cbnz	r1, d7a9a <strrchr+0x24>
   d7a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7a82:	f7ff bfb5 	b.w	d79f0 <strchr>
   d7a86:	1c43      	adds	r3, r0, #1
   d7a88:	4605      	mov	r5, r0
   d7a8a:	4621      	mov	r1, r4
   d7a8c:	4618      	mov	r0, r3
   d7a8e:	f7ff ffaf 	bl	d79f0 <strchr>
   d7a92:	2800      	cmp	r0, #0
   d7a94:	d1f7      	bne.n	d7a86 <strrchr+0x10>
   d7a96:	4628      	mov	r0, r5
   d7a98:	bd38      	pop	{r3, r4, r5, pc}
   d7a9a:	2500      	movs	r5, #0
   d7a9c:	e7f5      	b.n	d7a8a <strrchr+0x14>
	...

000d7aa0 <_strtol_l.isra.0>:
   d7aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7aa4:	4e3a      	ldr	r6, [pc, #232]	; (d7b90 <_strtol_l.isra.0+0xf0>)
   d7aa6:	4686      	mov	lr, r0
   d7aa8:	468c      	mov	ip, r1
   d7aaa:	4660      	mov	r0, ip
   d7aac:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7ab0:	5da5      	ldrb	r5, [r4, r6]
   d7ab2:	f015 0508 	ands.w	r5, r5, #8
   d7ab6:	d1f8      	bne.n	d7aaa <_strtol_l.isra.0+0xa>
   d7ab8:	2c2d      	cmp	r4, #45	; 0x2d
   d7aba:	d133      	bne.n	d7b24 <_strtol_l.isra.0+0x84>
   d7abc:	f89c 4000 	ldrb.w	r4, [ip]
   d7ac0:	f04f 0801 	mov.w	r8, #1
   d7ac4:	f100 0c02 	add.w	ip, r0, #2
   d7ac8:	2b00      	cmp	r3, #0
   d7aca:	d05c      	beq.n	d7b86 <_strtol_l.isra.0+0xe6>
   d7acc:	2b10      	cmp	r3, #16
   d7ace:	d10c      	bne.n	d7aea <_strtol_l.isra.0+0x4a>
   d7ad0:	2c30      	cmp	r4, #48	; 0x30
   d7ad2:	d10a      	bne.n	d7aea <_strtol_l.isra.0+0x4a>
   d7ad4:	f89c 0000 	ldrb.w	r0, [ip]
   d7ad8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7adc:	2858      	cmp	r0, #88	; 0x58
   d7ade:	d14d      	bne.n	d7b7c <_strtol_l.isra.0+0xdc>
   d7ae0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7ae4:	2310      	movs	r3, #16
   d7ae6:	f10c 0c02 	add.w	ip, ip, #2
   d7aea:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d7aee:	3f01      	subs	r7, #1
   d7af0:	2600      	movs	r6, #0
   d7af2:	fbb7 f9f3 	udiv	r9, r7, r3
   d7af6:	4630      	mov	r0, r6
   d7af8:	fb03 7a19 	mls	sl, r3, r9, r7
   d7afc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7b00:	2d09      	cmp	r5, #9
   d7b02:	d818      	bhi.n	d7b36 <_strtol_l.isra.0+0x96>
   d7b04:	462c      	mov	r4, r5
   d7b06:	42a3      	cmp	r3, r4
   d7b08:	dd24      	ble.n	d7b54 <_strtol_l.isra.0+0xb4>
   d7b0a:	1c75      	adds	r5, r6, #1
   d7b0c:	d007      	beq.n	d7b1e <_strtol_l.isra.0+0x7e>
   d7b0e:	4581      	cmp	r9, r0
   d7b10:	d31d      	bcc.n	d7b4e <_strtol_l.isra.0+0xae>
   d7b12:	d101      	bne.n	d7b18 <_strtol_l.isra.0+0x78>
   d7b14:	45a2      	cmp	sl, r4
   d7b16:	db1a      	blt.n	d7b4e <_strtol_l.isra.0+0xae>
   d7b18:	fb00 4003 	mla	r0, r0, r3, r4
   d7b1c:	2601      	movs	r6, #1
   d7b1e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7b22:	e7eb      	b.n	d7afc <_strtol_l.isra.0+0x5c>
   d7b24:	2c2b      	cmp	r4, #43	; 0x2b
   d7b26:	bf08      	it	eq
   d7b28:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7b2c:	46a8      	mov	r8, r5
   d7b2e:	bf08      	it	eq
   d7b30:	f100 0c02 	addeq.w	ip, r0, #2
   d7b34:	e7c8      	b.n	d7ac8 <_strtol_l.isra.0+0x28>
   d7b36:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7b3a:	2d19      	cmp	r5, #25
   d7b3c:	d801      	bhi.n	d7b42 <_strtol_l.isra.0+0xa2>
   d7b3e:	3c37      	subs	r4, #55	; 0x37
   d7b40:	e7e1      	b.n	d7b06 <_strtol_l.isra.0+0x66>
   d7b42:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7b46:	2d19      	cmp	r5, #25
   d7b48:	d804      	bhi.n	d7b54 <_strtol_l.isra.0+0xb4>
   d7b4a:	3c57      	subs	r4, #87	; 0x57
   d7b4c:	e7db      	b.n	d7b06 <_strtol_l.isra.0+0x66>
   d7b4e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d7b52:	e7e4      	b.n	d7b1e <_strtol_l.isra.0+0x7e>
   d7b54:	1c73      	adds	r3, r6, #1
   d7b56:	d106      	bne.n	d7b66 <_strtol_l.isra.0+0xc6>
   d7b58:	2322      	movs	r3, #34	; 0x22
   d7b5a:	f8ce 3000 	str.w	r3, [lr]
   d7b5e:	4638      	mov	r0, r7
   d7b60:	b942      	cbnz	r2, d7b74 <_strtol_l.isra.0+0xd4>
   d7b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b66:	f1b8 0f00 	cmp.w	r8, #0
   d7b6a:	d000      	beq.n	d7b6e <_strtol_l.isra.0+0xce>
   d7b6c:	4240      	negs	r0, r0
   d7b6e:	2a00      	cmp	r2, #0
   d7b70:	d0f7      	beq.n	d7b62 <_strtol_l.isra.0+0xc2>
   d7b72:	b10e      	cbz	r6, d7b78 <_strtol_l.isra.0+0xd8>
   d7b74:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d7b78:	6011      	str	r1, [r2, #0]
   d7b7a:	e7f2      	b.n	d7b62 <_strtol_l.isra.0+0xc2>
   d7b7c:	2430      	movs	r4, #48	; 0x30
   d7b7e:	2b00      	cmp	r3, #0
   d7b80:	d1b3      	bne.n	d7aea <_strtol_l.isra.0+0x4a>
   d7b82:	2308      	movs	r3, #8
   d7b84:	e7b1      	b.n	d7aea <_strtol_l.isra.0+0x4a>
   d7b86:	2c30      	cmp	r4, #48	; 0x30
   d7b88:	d0a4      	beq.n	d7ad4 <_strtol_l.isra.0+0x34>
   d7b8a:	230a      	movs	r3, #10
   d7b8c:	e7ad      	b.n	d7aea <_strtol_l.isra.0+0x4a>
   d7b8e:	bf00      	nop
   d7b90:	000d7eaa 	.word	0x000d7eaa

000d7b94 <strtol>:
   d7b94:	4613      	mov	r3, r2
   d7b96:	460a      	mov	r2, r1
   d7b98:	4601      	mov	r1, r0
   d7b9a:	4802      	ldr	r0, [pc, #8]	; (d7ba4 <strtol+0x10>)
   d7b9c:	6800      	ldr	r0, [r0, #0]
   d7b9e:	f7ff bf7f 	b.w	d7aa0 <_strtol_l.isra.0>
   d7ba2:	bf00      	nop
   d7ba4:	2003e654 	.word	0x2003e654

000d7ba8 <dynalib_user>:
   d7ba8:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d7bb8:	00000000 7361656d 64657275 706d6554     ....measuredTemp
   d7bc8:	74617265 43657275 75630031 6e657272     eratureC1.curren
   d7bd8:	6d655474 27204370 002e2700 736c7550     tTempC '.'..Puls
   d7be8:	20676e69 77657242 61654820 20726574     ing Brew Heater 
   d7bf8:	20726f66 20270027 6c6c696d 63657369     for '.' millisec
   d7c08:	73646e6f 0000002e                       onds....

000d7c10 <_ZTVN5spark10LogHandlerE>:
	...
   d7c20:	000d40a5 000d40c9                       .@...@..

000d7c28 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7c30:	000d40d5 000d4109 000d5cd5 000d40cb     .@...A...\...@..

000d7c40 <_ZTVN5spark13EthernetClassE>:
	...
   d7c48:	000d4b47 000d4b3d 000d4b33 000d4b29     GK..=K..3K..)K..
   d7c58:	000d4b1d 000d4b11 000d602d 000d6035     .K...K..-`..5`..
   d7c68:	000d4b05 000d4afd 000d4af3 000d4ae9     .K...J...J...J..
   d7c78:	000d6065                                e`..

000d7c7c <_ZTV7TwoWire>:
	...
   d7c84:	000d4b65 000d4baf 000d4b87 000d4b67     eK...K...K..gK..
   d7c94:	000d4b8f 000d4b97 000d4b9f 000d4ba7     .K...K...K...K..

000d7ca4 <_ZTV9IPAddress>:
	...
   d7cac:	000d4bf1 000d4be1 000d4be3 25006425     .K...K...K..%d.%
   d7cbc:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
   d7ccc:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   d7cdc:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   d7cec:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   d7cfc:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   d7d0c:	69250020 74656400 736c6961 00203d20      .%i.details = .
   d7d1c:	6d000a0d 66006300 006e6c00 74006e66     ...m.c.f.ln.fn.t
   d7d2c:	646f6300 65640065 6c696174 00000000     .code.detail....

000d7d3c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7d44:	000d50b7 000d50dd 000d509d 000d4cfb     .P...P...P...L..

000d7d54 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7d5c:	000d54fd 000d5515 000d5cd5 000d40cb     .T...U...\...@..

000d7d6c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7d74:	000d5529 000d553d 000d5e79 000d50a5     )U..=U..y^...P..

000d7d84 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7d8c:	000d50b5 000d50eb 000d5c11 000d50a7     .P...P...\...P..

000d7d9c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7da4:	000d50b3 000d50f9 000d5469 000d5115     .P...P..iT...Q..

000d7db4 <_ZTVN5spark12NetworkClassE>:
	...
   d7dbc:	000d5fed 000d5ff7 000d6001 000d600b     ._..._...`...`..
   d7dcc:	000d6015 000d6021 000d602d 000d6035     .`..!`..-`..5`..
   d7ddc:	000d603d 000d6049 000d6051 000d605b     =`..I`..Q`..[`..
   d7dec:	000d6065 252d5925 64252d6d 3a482554     e`..%Y-%m-%dT%H:
   d7dfc:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d7e0c <_ZTV11USARTSerial>:
	...
   d7e14:	000d65f1 000d665d 000d6635 000d6159     .e..]f..5f..Ya..
   d7e24:	000d6605 000d6621 000d6613 000d662f     .f..!f...f../f..
   d7e34:	000d65f3 000d65f7                       .e...e..

000d7e3c <_ZTV9USBSerial>:
	...
   d7e44:	000d6739 000d67a1 000d6777 000d6159     9g...g..wg..Ya..
   d7e54:	000d6769 000d673b 000d674b 000d679b     ig..;g..Kg...g..
   d7e64:	000d675b 000d6735                       [g..5g..

000d7e6c <_ZTVN5spark9WiFiClassE>:
	...
   d7e74:	000d68af 000d68a5 000d689b 000d6851     .h...h...h..Qh..
   d7e84:	000d688f 000d6883 000d602d 000d6035     .h...h..-`..5`..
   d7e94:	000d6877 000d686f 000d6865 000d685b     wh..oh..eh..[h..
   d7ea4:	000d6065                                e`..

000d7ea8 <_ZSt7nothrow>:
	...

000d7ea9 <_ctype_>:
   d7ea9:	20202000 20202020 28282020 20282828     .         ((((( 
   d7eb9:	20202020 20202020 20202020 20202020                     
   d7ec9:	10108820 10101010 10101010 10101010      ...............
   d7ed9:	04040410 04040404 10040404 10101010     ................
   d7ee9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7ef9:	01010101 01010101 01010101 10101010     ................
   d7f09:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7f19:	02020202 02020202 02020202 10101010     ................
   d7f29:	00000020 00000000 00000000 00000000      ...............
	...

000d7faa <link_const_variable_data_end>:
	...

000d7fac <link_constructors_location>:
   d7fac:	000d4501 	.word	0x000d4501
   d7fb0:	000d4ac1 	.word	0x000d4ac1
   d7fb4:	000d4b51 	.word	0x000d4b51
   d7fb8:	000d5cc5 	.word	0x000d5cc5
   d7fbc:	000d6145 	.word	0x000d6145
   d7fc0:	000d6271 	.word	0x000d6271
   d7fc4:	000d65a1 	.word	0x000d65a1
   d7fc8:	000d65dd 	.word	0x000d65dd
   d7fcc:	000d68b9 	.word	0x000d68b9
